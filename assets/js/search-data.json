{
  
    
        "post0": {
            "title": "Lightboard FRQ 4 Completed",
            "content": "public class LightBoard{ /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols){ lights = new boolean[numRows][numCols]; for (int i = 0; i &lt; numRows; i++) {//for loops for (int j = 0; j &lt; numCols; j++) { lights[i][j] = Math.random() &lt; 0.4;// random chance of being on 40 percent } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col){ //first find out how many are on in column int columnLights = 0; for (int i = 0; i &lt; lights.length; i++) { if (lights[i][col]) { columnLights++; } } //next check conditions for light if (lights[row][col] == true &amp;&amp; columnLights % 2 == 0) {//first condition return false; } else if (lights[row][col] == false &amp;&amp; columnLights % 3 == 0) {//second condition return true; } else {//last condition return lights[row][col]; } } public static void main(String[] args) { //tester method LightBoard tester = new LightBoard(10,10); System.out.println(tester.evaluateLight(3,6)); System.out.println(tester.evaluateLight(2,5)); System.out.println(tester.evaluateLight(0,8)); System.out.println(tester.evaluateLight(2,9)); } } LightBoard.main(null); . false false false true .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/14/frq4.html",
            "relUrl": "/java/2022/12/14/frq4.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "- toc: true - comments: false - categories: [java] . Vocabulary . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(&quot;last element: &quot;+ arr[2][2]); } } Test.main(null); . last element: i . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); System.out.println(arr[arr.length - 1][arr[0].length - 3]); arr[arr.length - 1][arr[0].length - 3] = &quot;Athens&quot;; System.out.println(arr[arr.length - 1][arr[0].length - 3]); } } Test.main(null); . Change Austin to Athens and print! Austin Athens . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! System.out.println(arr[arr.length - 3][arr[0].length - 1] + &quot; &quot; + arr[arr.length - 3][arr[0].length - 2] + &quot; &quot; + arr[arr.length - 3][arr[0].length - 3]); System.out.println(arr[arr.length - 2][arr[0].length - 1] + &quot; &quot; + arr[arr.length - 2][arr[0].length - 2] + &quot; &quot; + arr[arr.length - 2][arr[0].length - 3]); System.out.println(arr[arr.length - 1][arr[0].length - 1] + &quot; &quot; + arr[arr.length - 1][arr[0].length - 2] + &quot; &quot; + arr[arr.length - 1][arr[0].length - 3]); } } Test.main(null); . Chicago Baltimore Atlanta Cincinnati Boston Australia Columbus Beaumont Austin . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); } } Test.main(null); . Use nested for loops to find the longest or shortest string! .",
            "url": "https://rohitd3.github.io/rohitfastpages/2022/12/06/lesson8hwk.html",
            "relUrl": "/2022/12/06/lesson8hwk.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 1-5 Lesson Notes",
            "content": "Unit 1 . Work done . wrapper classes for all primitive data types like char, int, double, boolean where you can call in static methods that return values | primitive wrapper objects or string objects are immutable so the methods can&#39;t change Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | . | String class are unable to be changed | declare a variable that can be accessible and/or changed (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | . | . Unit 2 . Work done . classes are blueprints for creating objects | objects are instances within a class attributes are inherited by objects | Non static methods are dot operators | . | methods are certain set of code that runs a specific task | overloaded methods give multiple methods the same name with different signatures | void methods don&#39;t return values | Non void methods return a value of the same type defined in the method signature | static methods are a part of a class instead of an instance of a class which is why it&#39;s in a bracket in the class | . Unit 3 . Work done . boolean expression is true or false | If-else statements sets up alternate code if the first expression turns false | Else-if statements allow for more conditions to be defined | De Morgan&#39;s law: logical operators &amp;&amp; (and) ll(or) and !(not) | . Unit 4 . Work done . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | For loops are most tested | Strings: array chairs | . Unit 5 . Work done . Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | toString() method is a overridden method that provides description of a specific object | Mutator Method (setter): void method that changes value of instance variables/static variable | . Additional Vocab . Primitives: . Doubles - 64 bits | Integers - 32 bits - use int when declaring, not Integer. Integer is non-primitive | Booleans - 1 bit | String is a non-primitive data type | . Non-primitive or Wrapper classes data types use methods to perform actions . String Class . Strings are immutable - unable to be changed . Methods that act upon string objects do not change the state of the defined string object. . Constructors - initialize the attributes for an object . Constructors start with public, and have the same name as the class. In this case, these constructors are for the class Person | . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). . Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from) . Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes . Casting . change one data type to another. Two casting operators are | int | double . | Division - Seen above, casting can round the division for y/x so that it returns an integer, this is to allow for certain code beyond that that would only be able to take integer values for a specific reason. . | Rounding/Truncating - Seen in both examples above, casting is great for rounding a value to an integer or for another reason in order to simplify code. | . double x = 4.5; double y = 6.52; int z = (int) (y/x); int aa = (int) (x*y); System.out.println(z); System.out.println(aa) . 1 29 . Wrapper Classes - Classes that are able to make primitive types into objects to be used in things such as ArrayLists that would not allow primitives. See below for an example. . // Wrapper classes example ArrayList&lt;Integer&gt; ton = new ArrayList&lt;Integer&gt;(); // ArrayList&lt;int&gt; would not work for this // Concatenation example String a = &quot;Hello&quot;; String b = &quot;World&quot;; int c = 333; String d = a + &quot; &quot; + b + &quot; &quot; + c; System.out.println(d); . Hello World 333 . Concatenation - Concatenation involves combining two or more strings together. This is done by using the + operator. Anything that&#39;s not a string is attempted to be converted to a string in order to be concatenated on the end, like the int in this example. . Static/Class Variables - Static variables are variables that are shared across all instances of a class. This means that no matter how many objects you instantiate of the same class, modifying a static variable or method will update it for all instances. This is useful for things like a counter that you want to increment for every instance of a class. . Inheritance/Extends - Using an extends method allows it to inherit attributes and methods from the class it is extending. This is useful when you want to modify or create a subclass of a class without having to rewrite all of the code for the class you are extending. . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Polymorphism - Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters . Overloading is when you have multiple methods with the same name but different parameters. . Overriding is when you have a method with the same name and parameters as a method in a superclass but you want to modify the method in the subclass. . Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. Abstract Class - Objects cannot be created from an abstract class, they can only be extended. This is useful when you want to create a class that can be extended but not instantiated . abstract class People { public void walked() { System.out.println(&quot;Rohit walked 10 miles&quot;); } } class KURTIS extends People { public void walked() { System.out.println(&quot;kurtis walked 9 miles&quot;); } } class NATHAN extends People { public void walked() { System.out.println(&quot;nathan walked 8 miles&quot;); } } // Instantiating the People class would throw an error as it is abstract KURTIS kur = new KURTIS(); NATHAN nat = new NATHAN(); kur.walked(); nat.walked(); . kurtis walked 9 miles nathan walked 8 miles . Subclass Constructor / Super - Extending a class and then constructing the new extends class will call the constructor of the superclass. This is useful when you want to have a constructor that will call the constructor of the superclass. . Referencing Superclass - Using the super keyword allows you to reference the superclass of the current class. This is useful when you want to reference the superclass of the current class. . Standard Methods - ToString is a standard method that is used to convert an object into a string. Equals is useful for comparing two objects to see if they are equal. HashCode is useful for getting a unique hash code for an object. . Big O Notation - Implementing Big O notation is useful for determining the efficiency of an algorithm. Making algorithms more efficient is useful for making programs compile and run faster and likely reduce the load of it, which could be especially good for websites where users may be runnning the same function through an api many times. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/12/02/trioenlessons.html",
            "relUrl": "/entry/2022/12/02/trioenlessons.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 1-5 Lesson Score",
            "content": "Unit Score Grading Comments . Unit 1 | 0.9/1 | Link | N/A | . Unit 2 | 0.95/1 | Link | Standard Answers yet a seemlingly perfect blog | . Unit 3 | 0.9/1 | Link.html) | Completed exercises, not FRQ | . Unit 4 | 0.9/1 | Link | N/A | . Unit 5 | 1/1 | Link | N/A | . TOTAL SCORE | 4.65/5 | | | .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/12/02/scoretrione.html",
            "relUrl": "/entry/2022/12/02/scoretrione.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 1-5 Lesson Blogs",
            "content": "Grading . Unit Score Grading . Unit 1 | 0.9/1 | Link | . Unit 2 | 0.95/1 | Link | . Unit 3 | 0.9/1 | Link.html) | . Unit 4 | 0.8/1 | Link | . Unit 5 | 1/1 | Link | . TOTAL SCORE | 4.55/5 | N/A | . Unit 1 . Work done . wrapper classes for all primitive data types like char, int, double, boolean where you can call in static methods that return values | primitive wrapper objects or string objects are immutable so the methods can&#39;t change Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | . | String class are unable to be changed | declare a variable that can be accessible and/or changed (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | . | . Unit 2 . Work done . classes are blueprints for creating objects | objects are instances within a class attributes are inherited by objects | Non static methods are dot operators | . | methods are certain set of code that runs a specific task | overloaded methods give multiple methods the same name with different signatures | void methods don&#39;t return values | Non void methods return a value of the same type defined in the method signature | static methods are a part of a class instead of an instance of a class which is why it&#39;s in a bracket in the class | . Unit 3 . Work done . boolean expression is true or false | If-else statements sets up alternate code if the first expression turns false | Else-if statements allow for more conditions to be defined | De Morgan&#39;s law: logical operators &amp;&amp; (and) ll(or) and !(not) | . Unit 4 . Work done . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | For loops are most tested | Strings: array chairs | . Unit 5 . Work done . Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | toString() method is a overridden method that provides description of a specific object | Mutator Method (setter): void method that changes value of instance variables/static variable | . Additional Vocab . Primitives: . Doubles - 64 bits | Integers - 32 bits - use int when declaring, not Integer. Integer is non-primitive | Booleans - 1 bit | String is a non-primitive data type | . Non-primitive or Wrapper classes data types use methods to perform actions . String Class . Strings are immutable - unable to be changed . Methods that act upon string objects do not change the state of the defined string object. . Overloading with Constructors and Methods . Constructors - initialize the attributes for an object . Constructors start with public, and have the same name as the class. In this case, these constructors are for the class Person | . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). . Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from) . Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/02/final15lessons.html",
            "relUrl": "/java/2022/12/02/final15lessons.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 1-5 Lesson Notes",
            "content": "Unit 1 . Work done . wrapper classes for all primitive data types like char, int, double, boolean where you can call in static methods that return values | primitive wrapper objects or string objects are immutable so the methods can&#39;t change Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | . | String class are unable to be changed | declare a variable that can be accessible and/or changed (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | . | . Unit 2 . Work done . classes are blueprints for creating objects | objects are instances within a class attributes are inherited by objects | Non static methods are dot operators | . | methods are certain set of code that runs a specific task | overloaded methods give multiple methods the same name with different signatures | void methods don&#39;t return values | Non void methods return a value of the same type defined in the method signature | static methods are a part of a class instead of an instance of a class which is why it&#39;s in a bracket in the class | . Unit 3 . Work done . boolean expression is true or false | If-else statements sets up alternate code if the first expression turns false | Else-if statements allow for more conditions to be defined | De Morgan&#39;s law: logical operators &amp;&amp; (and) ll(or) and !(not) | . Unit 4 . Work done . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | For loops are most tested | Strings: array chairs | . Unit 5 . Work done . Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | toString() method is a overridden method that provides description of a specific object | Mutator Method (setter): void method that changes value of instance variables/static variable | . Additional Vocab . Primitives: . Doubles - 64 bits | Integers - 32 bits - use int when declaring, not Integer. Integer is non-primitive | Booleans - 1 bit | String is a non-primitive data type | . Non-primitive or Wrapper classes data types use methods to perform actions . String Class . Strings are immutable - unable to be changed . Methods that act upon string objects do not change the state of the defined string object. . Constructors - initialize the attributes for an object . Constructors start with public, and have the same name as the class. In this case, these constructors are for the class Person | . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). . Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from) . Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes . Casting . change one data type to another. Two casting operators are | int | double . | Division - Seen above, casting can round the division for y/x so that it returns an integer, this is to allow for certain code beyond that that would only be able to take integer values for a specific reason. . | Rounding/Truncating - Seen in both examples above, casting is great for rounding a value to an integer or for another reason in order to simplify code. | . double x = 4.5; double y = 6.52; int z = (int) (y/x); int aa = (int) (x*y); System.out.println(z); System.out.println(aa) . 1 29 . Wrapper Classes - Classes that are able to make primitive types into objects to be used in things such as ArrayLists that would not allow primitives. See below for an example. . // Wrapper classes example ArrayList&lt;Integer&gt; ton = new ArrayList&lt;Integer&gt;(); // ArrayList&lt;int&gt; would not work for this // Concatenation example String a = &quot;Hello&quot;; String b = &quot;World&quot;; int c = 333; String d = a + &quot; &quot; + b + &quot; &quot; + c; System.out.println(d); . Hello World 333 . Concatenation - Concatenation involves combining two or more strings together. This is done by using the + operator. Anything that&#39;s not a string is attempted to be converted to a string in order to be concatenated on the end, like the int in this example. . Static/Class Variables - Static variables are variables that are shared across all instances of a class. This means that no matter how many objects you instantiate of the same class, modifying a static variable or method will update it for all instances. This is useful for things like a counter that you want to increment for every instance of a class. . Inheritance/Extends - Using an extends method allows it to inherit attributes and methods from the class it is extending. This is useful when you want to modify or create a subclass of a class without having to rewrite all of the code for the class you are extending. . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Polymorphism - Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters . Overloading is when you have multiple methods with the same name but different parameters. . Overriding is when you have a method with the same name and parameters as a method in a superclass but you want to modify the method in the subclass. . Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. Abstract Class - Objects cannot be created from an abstract class, they can only be extended. This is useful when you want to create a class that can be extended but not instantiated . abstract class People { public void walked() { System.out.println(&quot;Rohit walked 10 miles&quot;); } } class KURTIS extends People { public void walked() { System.out.println(&quot;kurtis walked 9 miles&quot;); } } class NATHAN extends People { public void walked() { System.out.println(&quot;nathan walked 8 miles&quot;); } } // Instantiating the People class would throw an error as it is abstract KURTIS kur = new KURTIS(); NATHAN nat = new NATHAN(); kur.walked(); nat.walked(); . kurtis walked 9 miles nathan walked 8 miles . Subclass Constructor / Super - Extending a class and then constructing the new extends class will call the constructor of the superclass. This is useful when you want to have a constructor that will call the constructor of the superclass. . Referencing Superclass - Using the super keyword allows you to reference the superclass of the current class. This is useful when you want to reference the superclass of the current class. . Standard Methods - ToString is a standard method that is used to convert an object into a string. Equals is useful for comparing two objects to see if they are equal. HashCode is useful for getting a unique hash code for an object. . Big O Notation - Implementing Big O notation is useful for determining the efficiency of an algorithm. Making algorithms more efficient is useful for making programs compile and run faster and likely reduce the load of it, which could be especially good for websites where users may be runnning the same function through an api many times. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/12/02/fianltri.html",
            "relUrl": "/entry/2022/12/02/fianltri.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Collegeboard Test Corrections",
            "content": "Score: 36/40 . Corrections for Q4 . The value of 2.33333 is incorrect because it is the result if the division used was floating point division, instead of integer division. . For it to be correct, evaluating x &lt; 10 &amp;&amp; y &lt; 0 for x having the value 7 and y have a value of 3, x &lt; 10 is true since 7 is less than 10 and y is less than 0 makes it false since 3 is not less than 0. The operator &amp;&amp; evaluates to true when both conditions are true and evaluates to false otherwise. As a result, compiler will skip first output and execute the else statement for integer division for 7 / 3, which is 2. . Corrections for Q5 . B is incorrect as this would be the output if k was initialized to 0. . The correct answer is C. As the method mystery contains a loop that starts k at 1 and iterates, incrementing k by 1 until k exceeds n, which is 6. In each iteration, the Integer value k * k + 3 is added to the ArrayList seq. As the iterations continue {4, 7, 12, 19, 28, 39} is formed. . Corrections for Q12 . D is incorrect. This would be the return value if k was incremented by 1 instead of 2 and the loop condition was changed to k &lt; input.length()- 1. . The correct answer is C. The value of the loop control variable k starts at 1 and is incremented by 2 as long as it is less than input.length. The input is “computer”, so input.length is 8. The values of k are 1, 3, 5, 7, and then when k is 9, the loop terminates. The statement input.substring (k, k + 1) will return the value of input at index k. Output is “o”, “p”, “t”, and “r”. The value “optr” is returned. . Corrections for Q40 . . Answer D is incorrect. When whatsItDo(“W”) is called, nothing is printed since the print occurs in the if statement which does not execute. All previous recursive method calls print a substring of str and not str. . C is correct. The call whatsItDo(“WATCH”) assigns to temp a substring of “WATCH” starting at 0 and ending at 4 – 1 or 3, which is “WATC”. Next the call whatsItDo(“WATC”) is made. The call whatsItDo(“WATC”), sets its local temp to “WAT” and calls whatsItDo(“WAT”). The call whatsItDo(“WAT”), sets its local temp to “WA” and calls whatsItDo(“WA”). The call whatsItDo(“WA”), sets its local temp to “W” and calls whatsItDo(“W”). The call whatsItDo(“W”) reaches the base case and doesn’t do anything since the length of “W” is 1. Then we need to finish the call to whatsItDo(“WA”), which prints the value of its local temp, “W”. . Reflection . Taking AP CSP last year, I wanted to further my computer science education by taking AP CSA the sequential year. The Java syntax was really different than the python syntax I learned last year but it was still very interesting. I believe that our group dynamic was really nice and I also learned from my team members. . What I want to get better at is working with backend and try making my own API next trimester. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/11/08/cbtest.html",
            "relUrl": "/entry/2022/11/08/cbtest.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lesson 6 - Array",
            "content": "HACK 1 . // HACK 1 int[] arrayOne = {1, 3, 5, 7, 9}; for (int num : arrayOne) { if (num % 2 == 0) { System.out.println(num); } } . HACK 2 . // HACK 2 // Answer is B . HACK 3 . // HACK 3 import java.util.Arrays; public class arraySorter { public static void main(int[] a) { Arrays.sort(a); for (int i : a) { System.out.println(i); } } } int[] myNumbers = new int[] {5, 3, 4, 1, 2}; arraySorter.main(myNumbers); . 1 2 3 4 5 . HACK 4 . // HACK 4 // ANSWER IS B . HACK 5 . // HACK 5 public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } . HACK 6 . // HACK 6 // ANSWER IS D . HACK 7 . // HACK 7 public class leftShifted { public static int[] main(int[] a) { int first = a[0]; for (int i=1; i&lt;a.length; i++) { a[i-1] = a[i]; } a[a.length-1] = first; return a; } } int[] array = {7,9,4}; int[] array_out = leftShifted.main(array); Arrays.toString(array_out) . [9, 4, 7] . HACK 8 . // HACK 8 public class findDuplicate { public static int main(int[] a, int b) { int d=0; for (int number : a) { if (number==b) { d++; } } return d; } } int[] array = {7,7,9,4}; findDuplicate.main(array, 7); . 2 . HACK 9 . // HACK 9 public class reverseString { public static char[] main(char[] s) { char[] reverse = new char[s.length]; for (int i=s.length-1; i&gt;=0; i--) { reverse[s.length-i-1] = s[i]; } return reverse; } } String s = &quot;hello&quot;; char[] c = s.toCharArray(); char[] reverse = reverseString.main(c); // Arrays.toString(reverse) String reversed = new String(reverse); System.out.println(reversed); . olleh . FRQ PART A . // FRQ PART A public void addMembers(String[] names, int gradYear) { for (String name : names) { MemberInfo member = new MemberInfo(name, gradYear, true); memberList.add(member); } } . Notes . Arrays: one type of data storage | Reference types | Need import java.util Arrays | Initialize arrays using constructors | Access elements through arrayName[index] | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/11/01/lesson6hwk.html",
            "relUrl": "/java/2022/11/01/lesson6hwk.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lesson 5 Homework - Writing Classes",
            "content": "2019 FRQ Q2 Rohit and Kurtis . public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 . Notes . Classes are blueprints to create objects and define attributes | Instances: attributes, constructors, methods, objects | Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/28/lesson5hwk.html",
            "relUrl": "/java/2022/10/28/lesson5hwk.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lesson 4 Homework -  Iteration",
            "content": "Hack 1 . public class WhileLoops { public double money = 0; public double profit = 5450000; public double goal = 30000000; public double years = 0; public void Calc() { while (this.money &lt; this.goal) { this.money = this.money + this.profit; this.profit = this.profit * 1.05; this.years = this.years + 1; } System.out.println(this.years); } public static void main(String[] args) { WhileLoops obj = new WhileLoops(); obj.Calc(); } } WhileLoops.main(null); . 5.0 . Hack 2 . public class ForLoops { public double temp = 0; public void Calc() { System.out.println(&quot;Numbers 10-15&quot;); for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } System.out.println(&quot;Convert temperature&quot;); for (int x = 0; x&lt;=100; x+=10) { temp = 0; temp = x + 273.15; System.out.println(x + &quot;c -&gt; &quot; + temp + &quot;k&quot;); } } public static void main(String[] args) { ForLoops obj = new ForLoops(); obj.Calc(); } } ForLoops.main(null); . Numbers 10-15 10 11 12 13 14 15 Convert temperature 0c -&gt; 273.15k 10c -&gt; 283.15k 20c -&gt; 293.15k 30c -&gt; 303.15k 40c -&gt; 313.15k 50c -&gt; 323.15k 60c -&gt; 333.15k 70c -&gt; 343.15k 80c -&gt; 353.15k 90c -&gt; 363.15k 100c -&gt; 373.15k . Caesar Cipher Homework . public class CaesarCipher { public String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; public String temp; // Method which takes a string and swaps a character static char[] swap(String str, int i, char j) { char ch[] = str.toCharArray(); ch[i] = j; return ch; } public String Calc(String message) { temp = message; // Looping through each character in the message for (int i=0; i&lt;temp.length(); i++) { // Cast the character to ascii to make substitutions much more efficient int ascii = (int) temp.charAt(i); // Letters at the end of the alphabet behave differently, so we create two separate conditionals if (ascii &gt; 64 &amp;&amp; ascii &lt; 88 || (ascii &gt; 96 &amp;&amp; ascii &lt; 120)) { ascii = ascii + 3; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } // This is for the last three letters of the alphabet else if (ascii &gt; 87 &amp;&amp; ascii &lt; 91 || ascii &gt; 119 &amp;&amp; ascii &lt; 123) { ascii = ascii - 23; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } } return temp; } public static void main(String[] args) { CaesarCipher cipherCalc = new CaesarCipher(); String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipherCalc.Calc(message1)); System.out.println(cipherCalc.Calc(message2)); System.out.println(cipherCalc.Calc(message3)); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious . Notes . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | . | For loops are most tested | Strings: array chairs | Nested iteration: loop within a loop | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/27/lesson4hwk.html",
            "relUrl": "/java/2022/10/27/lesson4hwk.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Lesson 3 Homework - Boolean Expressions and if Statements",
            "content": "Conditionals Exercises . 2 . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The roots are -0.552786404500042 and -1.4472135954999579 . 4 . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 6 . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 8 . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Vowel . 10 . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 12 . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 18 The Average is : 3.0 . 14 . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 6 X 0 = 0 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 . 16 . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 123 1234 12345 123456 1234567 12345678 123456789 12345678910 1234567891011 123456789101112 12345678910111213 1234567891011121314 123456789101112131415 12345678910111213141516 1234567891011121314151617 123456789101112131415161718 12345678910111213141516171819 . 18 . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 78910 1112131415 161718192021 22232425262728 2930313233343536 373839404142434445 . 20 . import java.util.Scanner; public class Exercise20 { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Exercise20.main(null); . Input number of rows : 1 . Notes . if the boolean expression is true or false dictates whether the code will run | if-else statements sets up alternate code if the first expression turns false | else-if statements allow for more conditions to be defined | De Morgan&#39;s law: . !(a&amp;&amp;b) = (!a || !b) . | !(a || b) = (!a &amp;&amp; !b) . | . | Comparing objects through == | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/25/lesson3hwk.html",
            "relUrl": "/java/2022/10/25/lesson3hwk.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Lesson 2 Homework - Using Objects",
            "content": "public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Notes . Classes are blueprints for creating objects | Objects are instances within a class | Methods: certain set of code that runs a specific task | Class attributes are inherited by objects | Learned about myPainter in Code.org | Non static methods are dot operators | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/25/lesson2hwk.html",
            "relUrl": "/java/2022/10/25/lesson2hwk.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lesson 1 Homework - Primitive Types",
            "content": "import java.util.*; public class gradecalc { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Final is part of the test category? true or false&quot;); boolean finalIsTest = sc.nextBoolean(); if (finalIsTest) { System.out.println(&quot;Current grade:&quot;); double grade = sc.nextDouble(); System.out.println(&quot;What percent of your grade is the tests category?&quot;); int testsPercent = sc.nextInt(); System.out.println(&quot;Your current grade (in tests category)?&quot;); double testsGrade = sc.nextDouble(); System.out.println(&quot;Total points in tests category currently?&quot;); int testsPoints = sc.nextInt(); System.out.println(&quot;Amount of points:&quot;); int finalPoints = sc.nextInt(); System.out.println(&quot;The grade you want:&quot;); double finalgrade = sc.nextDouble(); double percentReq = finalgrade - (grade - testsGrade * testsPercent/100.0); double testPointsNeeded = (percentReq/testsPercent) * (testsPoints + finalPoints); double finalPointsNeeded = testPointsNeeded - testsPoints; System.out.println(&quot;You need a &quot; + finalPointsNeeded + &quot; on the final.&quot;); } else { System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); int finalPercent = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double target = sc.nextDouble(); double percentReq = target - (grade/100.0)*(100.0-finalPercent); double gradeNeeded = 100.0 * (percentReq/finalPercent); System.out.println(&quot;You need a &quot; + gradeNeeded + &quot; on the test.&quot;); } } } gradecalc.main(null); . Final is part of the test category? true or false Current grade: What percent of your grade is the tests category? Your current grade (in tests category)? Total points in tests category currently? Amount of points: The grade you want: You need a 32.0 on the final. . Notes . Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | Learned to declare a variable that can be accessible and/or changed | Learned how to store data as variables | (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/24/lesson1hwk.html",
            "relUrl": "/java/2022/10/24/lesson1hwk.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "POJO",
            "content": "POJO w/ Annotation . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; // generating getters and setters using lombok annotations import javax.persistence.*; @Data // simplify writing code @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Lo ng id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // stores joke likes private int dislike; // stores joke jeers } . POJO w/o Annotation . import javax.persistence.*; // without lombok we have more boilerplate code @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { public CarBrands() { this.id = null; this.brand = &quot;&quot;; this.like = 0; this.dislike = 0; } public CarBrands(Long ID, String Brand, int Like, int Dislike) { this.id = null; this.brand = Brand; this.like = Like; this.dislike = Dislike; } @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // Store joke likes private int dislike; // Store joke jeers // Only have a getter for ID // Don&#39;t need to set since it auto generates public Long getID() { return this.id; } public String getBrand() { return this.brand; } public void setBrand(String Brand) { this.brand = Brand; } public int getLike() { return this.like; } public void setLike(int Like) { this.like = Like; } public int getDislike() { return this.dislike; } public void setDislike(int Dislike) { this.dislike = Dislike; } } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/10/pojostuff.html",
            "relUrl": "/java/2022/10/10/pojostuff.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "image rescaling and coloring",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;mort&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Changing to go by blocks 2 times as wide as tall for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // Gray scale method public void GrayScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+green+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGray = new Color(avg, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGray.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graymort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (green)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGreen = new Color(avg, green, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGreen.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greenmort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorRed = new Color(red, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorRed.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redmort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorBlue = new Color(avg, avg, blue); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorBlue.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluemort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics mort = new Pics(&quot;mort&quot;, &quot;png&quot;); mort.GrayScale(); mort.GreenScale(); mort.RedScale(); mort.BlueScale(); mort.printStats(&quot;Original&quot;); mort.resize(33); mort.printStats(&quot;Scaled&quot;); mort.convertToAscii(); } } Pics.main(null); . Original: 621907 627x622 images/mort.png Scaled: 122492 207x205 images/tmp/mort.png . .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/02/image.html",
            "relUrl": "/java/2022/10/02/image.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "api",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/louislefebure9/api/star-wars-characters/ HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://star-wars-characters.p.rapidapi.com/46DYBV/star_wars_characters&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;bf09b94566msh22c602dfe97bd97p19c2fajsn1d42e34f8724&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;star-wars-characters.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //Printing out results System.out.println(response.body()); . [ { &#34;id&#34;: 1, &#34;mass&#34;: &#34;77&#34;, &#34;name&#34;: &#34;Luke Skywalker&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;172&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;19BBY&#34;, &#34;hair_color&#34;: &#34;blond&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 2, &#34;mass&#34;: &#34;75&#34;, &#34;name&#34;: &#34;C-3PO&#34;, &#34;gender&#34;: &#34;NA&#34;, &#34;height&#34;: &#34;167&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;112BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;gold&#34; }, { &#34;id&#34;: 3, &#34;mass&#34;: &#34;32&#34;, &#34;name&#34;: &#34;R2-D2&#34;, &#34;gender&#34;: &#34;NA&#34;, &#34;height&#34;: &#34;96&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;33BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;white, blue&#34; }, { &#34;id&#34;: 4, &#34;mass&#34;: &#34;136&#34;, &#34;name&#34;: &#34;Darth Vader&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;202&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;41.9BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;white&#34; }, { &#34;id&#34;: 5, &#34;mass&#34;: &#34;49&#34;, &#34;name&#34;: &#34;Leia Organa&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;150&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Alderaan&#34;, &#34;birth_year&#34;: &#34;19BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 6, &#34;mass&#34;: &#34;120&#34;, &#34;name&#34;: &#34;Owen Lars&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;52BBY&#34;, &#34;hair_color&#34;: &#34;brown, grey&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 7, &#34;mass&#34;: &#34;75&#34;, &#34;name&#34;: &#34;Beru Whitesun lars&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;165&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;47BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 8, &#34;mass&#34;: &#34;32&#34;, &#34;name&#34;: &#34;R5-D4&#34;, &#34;gender&#34;: &#34;NA&#34;, &#34;height&#34;: &#34;97&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;white, red&#34; }, { &#34;id&#34;: 9, &#34;mass&#34;: &#34;84&#34;, &#34;name&#34;: &#34;Biggs Darklighter&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;24BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 10, &#34;mass&#34;: &#34;77&#34;, &#34;name&#34;: &#34;Obi-Wan Kenobi&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;182&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue-gray&#34;, &#34;homeworld&#34;: &#34;Stewjon&#34;, &#34;birth_year&#34;: &#34;57BBY&#34;, &#34;hair_color&#34;: &#34;auburn, white&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 11, &#34;mass&#34;: &#34;84&#34;, &#34;name&#34;: &#34;Anakin Skywalker&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;41.9BBY&#34;, &#34;hair_color&#34;: &#34;blond&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 12, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Wilhuff Tarkin&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Eriadu&#34;, &#34;birth_year&#34;: &#34;64BBY&#34;, &#34;hair_color&#34;: &#34;auburn, grey&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 13, &#34;mass&#34;: &#34;112&#34;, &#34;name&#34;: &#34;Chewbacca&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;228&#34;, &#34;species&#34;: &#34;Wookiee&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Kashyyyk&#34;, &#34;birth_year&#34;: &#34;200BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;NA&#34; }, { &#34;id&#34;: 14, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Han Solo&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Corellia&#34;, &#34;birth_year&#34;: &#34;29BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 15, &#34;mass&#34;: &#34;74&#34;, &#34;name&#34;: &#34;Greedo&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;173&#34;, &#34;species&#34;: &#34;Rodian&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Rodia&#34;, &#34;birth_year&#34;: &#34;44BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 16, &#34;mass&#34;: &#34;1,358&#34;, &#34;name&#34;: &#34;Jabba Desilijic Tiure&#34;, &#34;gender&#34;: &#34;hermaphrodite&#34;, &#34;height&#34;: &#34;175&#34;, &#34;species&#34;: &#34;Hutt&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Nal Hutta&#34;, &#34;birth_year&#34;: &#34;600BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;green-tan, brown&#34; }, { &#34;id&#34;: 17, &#34;mass&#34;: &#34;77&#34;, &#34;name&#34;: &#34;Wedge Antilles&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;hazel&#34;, &#34;homeworld&#34;: &#34;Corellia&#34;, &#34;birth_year&#34;: &#34;21BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 18, &#34;mass&#34;: &#34;110&#34;, &#34;name&#34;: &#34;Jek Tono Porkins&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Bestine IV&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 19, &#34;mass&#34;: &#34;17&#34;, &#34;name&#34;: &#34;Yoda&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;66&#34;, &#34;species&#34;: &#34;Yoda&#39;s species&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;896BBY&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 20, &#34;mass&#34;: &#34;75&#34;, &#34;name&#34;: &#34;Palpatine&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;82BBY&#34;, &#34;hair_color&#34;: &#34;grey&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 21, &#34;mass&#34;: &#34;78.2&#34;, &#34;name&#34;: &#34;Boba Fett&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Kamino&#34;, &#34;birth_year&#34;: &#34;31.5BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 22, &#34;mass&#34;: &#34;140&#34;, &#34;name&#34;: &#34;IG-88&#34;, &#34;gender&#34;: &#34;none&#34;, &#34;height&#34;: &#34;200&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;15BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;metal&#34; }, { &#34;id&#34;: 23, &#34;mass&#34;: &#34;113&#34;, &#34;name&#34;: &#34;Bossk&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;190&#34;, &#34;species&#34;: &#34;Trandoshan&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Trandosha&#34;, &#34;birth_year&#34;: &#34;53BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 24, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Lando Calrissian&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;177&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Socorro&#34;, &#34;birth_year&#34;: &#34;31BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 25, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Lobot&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;175&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Bespin&#34;, &#34;birth_year&#34;: &#34;37BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 26, &#34;mass&#34;: &#34;83&#34;, &#34;name&#34;: &#34;Ackbar&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Mon Calamari&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Mon Cala&#34;, &#34;birth_year&#34;: &#34;41BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;brown mottle&#34; }, { &#34;id&#34;: 27, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Mon Mothma&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;150&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Chandrila&#34;, &#34;birth_year&#34;: &#34;48BBY&#34;, &#34;hair_color&#34;: &#34;auburn&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 28, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Arvel Crynyd&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 29, &#34;mass&#34;: &#34;20&#34;, &#34;name&#34;: &#34;Wicket Systri Warrick&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;88&#34;, &#34;species&#34;: &#34;Ewok&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Endor&#34;, &#34;birth_year&#34;: &#34;8BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 30, &#34;mass&#34;: &#34;68&#34;, &#34;name&#34;: &#34;Nien Nunb&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;160&#34;, &#34;species&#34;: &#34;Sullustan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Sullust&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 31, &#34;mass&#34;: &#34;89&#34;, &#34;name&#34;: &#34;Qui-Gon Jinn&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;193&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;92BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 32, &#34;mass&#34;: &#34;90&#34;, &#34;name&#34;: &#34;Nute Gunray&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;191&#34;, &#34;species&#34;: &#34;Neimodian&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Cato Neimoidia&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;mottled green&#34; }, { &#34;id&#34;: 33, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Finis Valorum&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Coruscant&#34;, &#34;birth_year&#34;: &#34;91BBY&#34;, &#34;hair_color&#34;: &#34;blond&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 34, &#34;mass&#34;: &#34;66&#34;, &#34;name&#34;: &#34;Jar Jar Binks&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;196&#34;, &#34;species&#34;: &#34;Gungan&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;52BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;orange&#34; }, { &#34;id&#34;: 35, &#34;mass&#34;: &#34;82&#34;, &#34;name&#34;: &#34;Roos Tarpals&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;224&#34;, &#34;species&#34;: &#34;Gungan&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 36, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Rugor Nass&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;206&#34;, &#34;species&#34;: &#34;Gungan&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 37, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Ric Olié&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 38, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Watto&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;137&#34;, &#34;species&#34;: &#34;Toydarian&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Toydaria&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;blue, grey&#34; }, { &#34;id&#34;: 39, &#34;mass&#34;: &#34;40&#34;, &#34;name&#34;: &#34;Sebulba&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;112&#34;, &#34;species&#34;: &#34;Dug&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Malastare&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey, red&#34; }, { &#34;id&#34;: 40, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Quarsh Panaka&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;62BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 41, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Shmi Skywalker&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;163&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;72BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 42, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Darth Maul&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;175&#34;, &#34;species&#34;: &#34;Zabrak&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Dathomir&#34;, &#34;birth_year&#34;: &#34;54BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;red&#34; }, { &#34;id&#34;: 43, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Bib Fortuna&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Twi&#39;lek&#34;, &#34;eye_color&#34;: &#34;pink&#34;, &#34;homeworld&#34;: &#34;Ryloth&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 44, &#34;mass&#34;: &#34;55&#34;, &#34;name&#34;: &#34;Ayla Secura&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;Twi&#39;lek&#34;, &#34;eye_color&#34;: &#34;hazel&#34;, &#34;homeworld&#34;: &#34;Ryloth&#34;, &#34;birth_year&#34;: &#34;48BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;blue&#34; }, { &#34;id&#34;: 45, &#34;mass&#34;: &#34;45&#34;, &#34;name&#34;: &#34;Dud Bolt&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;94&#34;, &#34;species&#34;: &#34;Vulptereen&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Vulpter&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;blue, grey&#34; }, { &#34;id&#34;: 46, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Gasgano&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;122&#34;, &#34;species&#34;: &#34;Xexto&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Troiken&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;white, blue&#34; }, { &#34;id&#34;: 47, &#34;mass&#34;: &#34;65&#34;, &#34;name&#34;: &#34;Ben Quadinaros&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;163&#34;, &#34;species&#34;: &#34;Toong&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Tund&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey, green, yellow&#34; }, { &#34;id&#34;: 48, &#34;mass&#34;: &#34;84&#34;, &#34;name&#34;: &#34;Mace Windu&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Haruun Kal&#34;, &#34;birth_year&#34;: &#34;72BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 49, &#34;mass&#34;: &#34;82&#34;, &#34;name&#34;: &#34;Ki-Adi-Mundi&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;198&#34;, &#34;species&#34;: &#34;Cerean&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Cerea&#34;, &#34;birth_year&#34;: &#34;92BBY&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 50, &#34;mass&#34;: &#34;87&#34;, &#34;name&#34;: &#34;Kit Fisto&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;196&#34;, &#34;species&#34;: &#34;Nautolan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Glee Anselm&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 51, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Eeth Koth&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;171&#34;, &#34;species&#34;: &#34;Zabrak&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Iridonia&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 52, &#34;mass&#34;: &#34;50&#34;, &#34;name&#34;: &#34;Adi Gallia&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;184&#34;, &#34;species&#34;: &#34;Tholothian&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Coruscant&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 53, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Saesee Tiin&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Iktotchi&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Iktotch&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 54, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Yarael Poof&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;264&#34;, &#34;species&#34;: &#34;Quermian&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Quermia&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;white&#34; }, { &#34;id&#34;: 55, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Plo Koon&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Kel Dor&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Dorin&#34;, &#34;birth_year&#34;: &#34;22BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;orange&#34; }, { &#34;id&#34;: 56, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Mas Amedda&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;196&#34;, &#34;species&#34;: &#34;Chagrian&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Champala&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;blue&#34; }, { &#34;id&#34;: 57, &#34;mass&#34;: &#34;85&#34;, &#34;name&#34;: &#34;Gregar Typho&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;185&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 58, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Cordé&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;157&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 59, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Cliegg Lars&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;82BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 60, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Poggle the Lesser&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Geonosian&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Geonosis&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 61, &#34;mass&#34;: &#34;56.2&#34;, &#34;name&#34;: &#34;Luminara Unduli&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Mirialan&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Mirial&#34;, &#34;birth_year&#34;: &#34;58BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;yellow&#34; }, { &#34;id&#34;: 62, &#34;mass&#34;: &#34;50&#34;, &#34;name&#34;: &#34;Barriss Offee&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;166&#34;, &#34;species&#34;: &#34;Mirialan&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Mirial&#34;, &#34;birth_year&#34;: &#34;40BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;yellow&#34; }, { &#34;id&#34;: 63, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Dormé&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;165&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 64, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Dooku&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;193&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Serenno&#34;, &#34;birth_year&#34;: &#34;102BBY&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 65, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Bail Prestor Organa&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;191&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Alderaan&#34;, &#34;birth_year&#34;: &#34;67BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;tan&#34; }, { &#34;id&#34;: 66, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Jango Fett&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Concord Dawn&#34;, &#34;birth_year&#34;: &#34;66BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;tan&#34; }, { &#34;id&#34;: 67, &#34;mass&#34;: &#34;55&#34;, &#34;name&#34;: &#34;Zam Wesell&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;168&#34;, &#34;species&#34;: &#34;Clawdite&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Zolan&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;blonde&#34;, &#34;skin_color&#34;: &#34;fair, green, yellow&#34; }, { &#34;id&#34;: 68, &#34;mass&#34;: &#34;102&#34;, &#34;name&#34;: &#34;Dexter Jettster&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;198&#34;, &#34;species&#34;: &#34;Besalisk&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Ojom&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 69, &#34;mass&#34;: &#34;88&#34;, &#34;name&#34;: &#34;Lama Su&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;229&#34;, &#34;species&#34;: &#34;Kaminoan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Kamino&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 70, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Taun We&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;213&#34;, &#34;species&#34;: &#34;Kaminoan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Kamino&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 71, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Jocasta Nu&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;167&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Coruscant&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 72, &#34;mass&#34;: &#34;15&#34;, &#34;name&#34;: &#34;Ratts Tyerell&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;79&#34;, &#34;species&#34;: &#34;Aleena&#34;, &#34;eye_color&#34;: &#34;NA&#34;, &#34;homeworld&#34;: &#34;Aleen Minor&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey, blue&#34; }, { &#34;id&#34;: 73, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;R4-P17&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;96&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;red, blue&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;silver, red&#34; }, { &#34;id&#34;: 74, &#34;mass&#34;: &#34;48&#34;, &#34;name&#34;: &#34;Wat Tambor&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;193&#34;, &#34;species&#34;: &#34;Skakoan&#34;, &#34;eye_color&#34;: &#34;NA&#34;, &#34;homeworld&#34;: &#34;Skako&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green, grey&#34; }, { &#34;id&#34;: 75, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;San Hill&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;191&#34;, &#34;species&#34;: &#34;Muun&#34;, &#34;eye_color&#34;: &#34;gold&#34;, &#34;homeworld&#34;: &#34;Muunilinst&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 76, &#34;mass&#34;: &#34;57&#34;, &#34;name&#34;: &#34;Shaak Ti&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;Togruta&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Shili&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;red, blue, white&#34; }, { &#34;id&#34;: 77, &#34;mass&#34;: &#34;159&#34;, &#34;name&#34;: &#34;Grievous&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;216&#34;, &#34;species&#34;: &#34;Kaleesh&#34;, &#34;eye_color&#34;: &#34;green, yellow&#34;, &#34;homeworld&#34;: &#34;Kalee&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;brown, white&#34; }, { &#34;id&#34;: 78, &#34;mass&#34;: &#34;136&#34;, &#34;name&#34;: &#34;Tarfful&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;234&#34;, &#34;species&#34;: &#34;Wookiee&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Kashyyyk&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 79, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Raymus Antilles&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Alderaan&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 80, &#34;mass&#34;: &#34;48&#34;, &#34;name&#34;: &#34;Sly Moore&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;white&#34;, &#34;homeworld&#34;: &#34;Umbara&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 81, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Tion Medon&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;206&#34;, &#34;species&#34;: &#34;Pau&#39;an&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Utapau&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 82, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Finn&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;dark&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 83, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Rey&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;hazel&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 84, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Poe Dameron&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 85, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;BB8&#34;, &#34;gender&#34;: &#34;none&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;none&#34; }, { &#34;id&#34;: 86, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Captain Phasma&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;NA&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;NA&#34; }, { &#34;id&#34;: 87, &#34;mass&#34;: &#34;45&#34;, &#34;name&#34;: &#34;Padmé Amidala&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;165&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;46BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 88, &#34;mass&#34;: null, &#34;name&#34;: &#34;&#34;, &#34;gender&#34;: null, &#34;height&#34;: null, &#34;species&#34;: null, &#34;eye_color&#34;: null, &#34;homeworld&#34;: null, &#34;birth_year&#34;: null, &#34;hair_color&#34;: null, &#34;skin_color&#34;: null } ] . import java.io.InputStream; import java.net.HttpURLConnection; import java.net.URL; import com.fasterxml.jackson.databind.ObjectMapper; URL url = new URL(&quot;https://api.api-ninjas.com/v1/cars?model=camry&quot;); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestProperty(&quot;accept&quot;, &quot;application/json&quot;); InputStream responseStream = connection.getInputStream(); ObjectMapper mapper = new ObjectMapper(); JsonNode root = mapper.readTree(responseStream); System.out.println(root.path(&quot;fact&quot;).asText()); . | import com.fasterxml.jackson.databind.ObjectMapper; package com.fasterxml.jackson.databind does not exist .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/02/api.html",
            "relUrl": "/java/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "fibonacci using loops",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: fibonaccinacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class fibonacci { String name; // name or title of method , no name is set int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current fibonaccinacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result int first = 1; int second = 1; /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public fibonacci() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonaccinacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public fibonacci(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonaccinacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; */ protected abstract void init(); /* Number is added to fibonaccinacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { // the number in setdata is added here list.add(num); // the number is added to the list hash.put(this.hashID++, list.clone()); // the hash id is incremented and added as a key and list is added as a value in the hashmap } /* Custom Getter to return last element in fibonaccinacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonaccinacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonaccinacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonaccinacci List = &quot; + this.list); System.out.println(&quot;fibonaccinacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonaccinacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . public class fibonacciFor extends fibonacci{ @Override public void init() { this.name = &quot;For Loop&quot;; // setting name this.setData(0); // first item in the list this.setData(first); this.setData(second); int loopSize = this.size - 3; for(int i = 0;i&lt;loopSize;i++) { int next = second; second = second + first; first = next; this.setData(second); } } static public void main(String[] args) { fibonacciFor fib = new fibonacciFor(); fib.print(); } } fibonacciFor.main(null); . Init method = For Loop fibonaccinacci Number 20 = 4181 fibonaccinacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonaccinacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonaccinacci Sequence 1 = [0] fibonaccinacci Sequence 2 = [0, 1] fibonaccinacci Sequence 3 = [0, 1, 1] fibonaccinacci Sequence 4 = [0, 1, 1, 2] fibonaccinacci Sequence 5 = [0, 1, 1, 2, 3] fibonaccinacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonaccinacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonaccinacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonaccinacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonaccinacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonaccinacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonaccinacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonaccinacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonaccinacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonaccinacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonaccinacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonaccinacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonaccinacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonaccinacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonaccinacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . public class whileloop extends fibonacci{ @Override public void init() { this.name = &quot;While Loop&quot;; this.setData(0); this.setData(first); this.setData(second); int loopSize = this.size - 3; int i = 0; while(i &lt; loopSize) { int temp = second; second = second + first; first = temp; this.setData(second); i++; } } static public void main(String[] args) { whileloop fib = new whileloop(); fib.print(); } } whileloop.main(null); . Init method = While Loop fibonaccinacci Number 20 = 4181 fibonaccinacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonaccinacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonaccinacci Sequence 1 = [0] fibonaccinacci Sequence 2 = [0, 1] fibonaccinacci Sequence 3 = [0, 1, 1] fibonaccinacci Sequence 4 = [0, 1, 1, 2] fibonaccinacci Sequence 5 = [0, 1, 1, 2, 3] fibonaccinacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonaccinacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonaccinacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonaccinacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonaccinacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonaccinacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonaccinacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonaccinacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonaccinacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonaccinacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonaccinacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonaccinacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonaccinacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonaccinacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonaccinacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . public class fibonacciRecur extends fibonacci{ @Override public void init() { this.name = &quot;Recursion&quot;; for (int i=0; i&lt;this.size; i++){ this.setData(recursiveFib(i)); } } // Recursion method public int recursiveFib(int n) { if (n == 0) { return 0; } else if (n == 1) { return this.first; } else if (n == 2) { return this.second; } return recursiveFib(n-2) + recursiveFib(n-1); } static public void main(String[] args) { fibonacciRecur fib = new fibonacciRecur(); fib.print(); } } fibonacciRecur.main(null); . Init method = Recursion fibonaccinacci Number 20 = 4181 fibonaccinacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonaccinacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonaccinacci Sequence 1 = [0] fibonaccinacci Sequence 2 = [0, 1] fibonaccinacci Sequence 3 = [0, 1, 1] fibonaccinacci Sequence 4 = [0, 1, 1, 2] fibonaccinacci Sequence 5 = [0, 1, 1, 2, 3] fibonaccinacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonaccinacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonaccinacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonaccinacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonaccinacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonaccinacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonaccinacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonaccinacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonaccinacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonaccinacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonaccinacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonaccinacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonaccinacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonaccinacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonaccinacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Collegeboard Standards . 1.B . Implementing a while loop, for loop, and recursive function to accomplish fibonacci. . 4.C . All 3 algorithms returned the same result through the printed output being the same. . 5.A . For and while loops run in linear time since they run through the input size once and do a constant amount of operations for each loop. The recursive algorithm takes exponential time, however, since for each term of the sequence, the algorithm needs to recalculate all of the other terms as well due to the nature of recursion. .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/29/fibousingextends.html",
            "relUrl": "/java/2022/09/29/fibousingextends.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Javascript Demo",
            "content": "console.log(&quot;hello world&quot;); . hello world . var msg = &quot;this is a message in a variable&quot;; console.log(msg); . this is a message in a variable . function logIt(output) { console.log(output); } logIt(msg); . this is a message in a variable . // using logIt logIt(msg) logIt(&quot;Hello Students!&quot;); logIt(2022) . this is a message in a variable Hello Students! 2022 . function logItType(output) { console.log(output, &quot;is a(n)&quot;, typeof output); } logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . hello is a(n) string 2020 &#39;is a(n)&#39; &#39;number&#39; [ 1, 2, 3 ] &#39;is a(n)&#39; &#39;object&#39; . var testhtml = &quot;Hello World&quot;; $$.html(testhtml); // prints as html . Hello World",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/25/jsdemo.html",
            "relUrl": "/java/2022/09/25/jsdemo.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "previous fibonacci Using Loops",
            "content": "public class Fibonacci { int firstFib = 1; int secondFib = 1; public void forFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using For Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using For Loop: 0 &quot; + firstFib); //} //else if (numOfFib == 2) { // System.out.println(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); for (int counter = 0; counter &lt; numOfFib-3; counter++ ) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); } } } public void whileFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using While Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using While Loop: 0 &quot; + firstFib); //} else if (numOfFib == 2) { // System.out.println(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); int counter = 0; while (counter &lt; numOfFib-3) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); counter++; } } } public int recursiveFib(int n) { if (n == 0) { return 0; } else if (n == 1) { return firstFib; } else if (n == 2) { return secondFib; } return recursiveFib(n-2) + recursiveFib(n-1); } public void printRecFib(int numOfFib){ System.out.print(&quot;Using Recursion: &quot;); for(int i = 0; i &lt; numOfFib; i++){ System.out.print(recursiveFib(i) +&quot; &quot;); } } public static void main(String[] args) { Scanner scanFib = new Scanner(System.in); int numOfFib = scanFib.nextInt(); Fibonacci fibseries = new Fibonacci(); fibseries.forFib(numOfFib); // For Loop System.out.println(); fibseries.whileFib(numOfFib); // While Loop System.out.println(); fibseries.printRecFib(numOfFib); // Recursive Loop } } Fibonacci.main(null); . Using For Loop: 0 1 1 2 3 5 8 13 21 34 Using While Loop: 0 1 1 2 3 5 8 13 21 34 Using Recursion: 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/25/fibonaccy.html",
            "relUrl": "/java/2022/09/25/fibonaccy.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Fibonacci Using Loops",
            "content": "public class Fibonacci { int firstFib = 1; int secondFib = 1; public void forFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using For Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using For Loop: 0 &quot; + firstFib); //} //else if (numOfFib == 2) { // System.out.println(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); for (int counter = 0; counter &lt; numOfFib-3; counter++ ) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); } } } public void whileFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using While Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using While Loop: 0 &quot; + firstFib); //} else if (numOfFib == 2) { // System.out.println(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); int counter = 0; while (counter &lt; numOfFib-3) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); counter++; } } } public int recursiveFib(int n) { if (n == 0) { return 0; } else if (n == 1) { return firstFib; } else if (n == 2) { return secondFib; } return recursiveFib(n-2) + recursiveFib(n-1); } public void printRecFib(int numOfFib){ System.out.print(&quot;Using Recursion: &quot;); for(int i = 0; i &lt; numOfFib; i++){ System.out.print(recursiveFib(i) +&quot; &quot;); } } public static void main(String[] args) { Scanner scanFib = new Scanner(System.in); int numOfFib = scanFib.nextInt(); Fibonacci fibseries = new Fibonacci(); fibseries.forFib(numOfFib); // For Loop System.out.println(); fibseries.whileFib(numOfFib); // While Loop System.out.println(); fibseries.printRecFib(numOfFib); // Recursive Loop } } Fibonacci.main(null); . Using For Loop: 0 1 1 2 3 5 8 13 21 34 Using While Loop: 0 1 1 2 3 5 8 13 21 34 Using Recursion: 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/25/fibo.html",
            "relUrl": "/java/2022/09/25/fibo.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "2019 FRQ",
            "content": ". . public static int numberOfLeapYears(int year1, int year2) { int yearcounter = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)) { yearcounter++; } } return yearcounter; } . . . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int someDay = dayOfYear(month, day, year); int result = (firstDay + someDay - 1) % 7; return result } . public class APCalendar{ /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int yearcounter = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)) { yearcounter++; } } return yearcounter; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int someDay = dayOfYear(month, day, year); int result = (firstDay + someDay - 1) % 7; return result } // There may be instance variables, constructors, and other methods not shown. } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/19/frq1-2019.html",
            "relUrl": "/java/2022/09/19/frq1-2019.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Iteration 2D Array with Kirby!",
            "content": "class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀&quot;, &quot; ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀&quot;, &quot; ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀&quot;, &quot; ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀&quot;, &quot; ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄&quot;, &quot; ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷&quot;, &quot; ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇&quot;, &quot; ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀&quot;, &quot; ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀&quot;, &quot; ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻&quot;, &quot; ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞&quot;, &quot; ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀&quot; }, //Monkey 1 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀&quot;, &quot; ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀&quot;, &quot; ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀&quot;, &quot; ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀&quot;, &quot; ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀&quot;, &quot; ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀&quot;, &quot; ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀&quot;, &quot; ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀&quot;, &quot; ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, //Monkey 2 { &quot; ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀&quot;, &quot; ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀&quot;, &quot; ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇&quot;, &quot; ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽&quot;, &quot; ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇&quot;, &quot; ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀&quot;, &quot; ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀&quot;, &quot; ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀&quot;, &quot; ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀&quot;, &quot; ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀&quot;, &quot; ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀&quot;, &quot; ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇&quot;, &quot; ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃&quot;, &quot; ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀&quot;, &quot; ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀&quot; }, //Monkey 3 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⡿⠿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⢿⣿⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣷⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠿⠋⠀⢀⣀⣀⣀⣠⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠻⣿⣧⡀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢉⣠⣴⣾⣿⣿⣿⣿⣿⣿⣯⠉⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠹⣿⡇&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⡇⠀⠀⣿⡇&quot;, &quot; ⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣿⣿⠃⠀⢰⣿⠇&quot;, &quot; ⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⠇⢻⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⢿⣿⣿⣏⠀⠀⣾⣿⠀&quot;, &quot; ⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠛⠋⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠈⣿⣿⣿⣿⣿⣿⡿⠀⠘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠈⣿⡟⣿⣆⣾⡿⠃⠀&quot;, &quot; ⠀⠈⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠘⢿⣿⣿⣿⡿⠁⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⢠⣾⠟⠀⠸⣿⣿⠁⠀⠀&quot;, &quot; ⠀⠀⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠈⢻⣿⡿⢁⣀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣧⣴⡿⠃⠀⠀⠀⣿⣿⠀⠀⠀&quot;, &quot; ⠀⢰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⣠⣾⠏⠀⠈⠛⠛⠛⠛⠋⠀⠈⠙⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⣹⣿⠀⠀⠀&quot;, &quot; ⢰⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀&quot;, &quot; ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⢿⣿⣫⣥⣤⣴⣴⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀&quot;, &quot; ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠛⠋⠁⢀⣼⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀&quot;, &quot; ⠘⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠇⠀⠀⠀&quot;, &quot; ⠀⠘⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡤⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠈⠙⠿⢿⣷⣶⡶⠶⠶⠶⠶⠟⠛⠉⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⠃⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠁⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣦⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡟⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⣦⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⣠⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣴⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣠⣴⣶⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⣹⣿⣿⣿⡿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⣤⣴⣾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠿⠿⠿⠿⠿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, //Monkey 4 { &quot; ⠀⠀⠀⢀⡴⠛⠉⠙⠲⣤⣤⠴⠖⠚⠋⠉⠉⠛⠒⠦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⣾⠁⠀⠀⣠⠞⠉⢀⡷⡀⠀⠀⠀⠀⠀⡀⠀⠀⠙⢷⣤⡤⠤⠤⣤⡀⠀&quot;, &quot; ⠀⠀⠀⣧⠀⢠⠞⠁⠀⠀⡎⣇⢿⠀⠀⣶⢊⡏⠁⠀⠀⠰⠟⠁⠀⠀⠀⠀⠹⡄&quot;, &quot; ⠀⠀⠀⢸⣤⠏⡠⢤⡀⠀⡃⢀⠇⠀⢸⠈⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇&quot;, &quot; ⠀⠀⠀⢠⡏⠀⠘⠤⠽⠀⢣⣊⣀⠀⠸⣀⠜⣀⠠⣀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠇&quot;, &quot; ⠀⠀⠀⢸⠀⠀⠀⠀⠀⡔⠉⠀⠀⠉⠢⡀⠀⠧⠠⠜⠀⠀⠀⠀⠀⠀⠀⣠⠟⠀&quot;, &quot; ⠀⠀⠀⢸⡀⠀⠀⠀⠸⠀⠀⢀⠔⠊⠉⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠁⠀⠀&quot;, &quot; ⠀⠀⠀⠘⣇⠀⠀⠀⢀⠀⡰⠃⠀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⢰⠇⠀⠀⠀&quot;, &quot; ⠀⠀⣠⠞⢻⡀⠀⠀⠸⣰⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢠⣏⠀⠀⠀⠀&quot;, &quot; ⠀⣼⠃⠀⠀⢳⡄⠀⠀⢳⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⣠⠏⠈⠳⣄⠀⠀&quot;, &quot; ⢰⡇⠀⠀⠀⠀⠙⢦⣀⠀⠱⢄⡀⠀⠀⣠⠋⠀⠀⠀⢀⣠⠞⠁⠀⠀⠀⠘⡆⠀&quot;, &quot; ⠈⣧⡀⠀⠀⠀⠀⠀⢉⣳⢦⣤⣈⣉⣉⣀⣠⣤⣶⠚⠋⠀⠀⠀⠀⠀⠀⠀⢻⠀&quot;, &quot; ⠀⠈⠙⠓⠲⠖⠚⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⣄⡀⠀⠀⠀⠀⣀⡾⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠋⠉⠀⠀&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Kirby in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; Kirby(s) jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more Kirby jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Kirby in Java Loopy 5 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀ ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀ ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇ ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽ ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇ ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀ ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀ ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀ ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀ ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀ ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀ ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇ ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃ ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀ ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀ ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⡿⠿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⢿⣿⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣷⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠿⠋⠀⢀⣀⣀⣀⣠⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠻⣿⣧⡀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢉⣠⣴⣾⣿⣿⣿⣿⣿⣿⣯⠉⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠹⣿⡇ ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⡇⠀⠀⣿⡇ ⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣿⣿⠃⠀⢰⣿⠇ ⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⠇⢻⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⢿⣿⣿⣏⠀⠀⣾⣿⠀ ⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠛⠋⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠈⣿⣿⣿⣿⣿⣿⡿⠀⠘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠈⣿⡟⣿⣆⣾⡿⠃⠀ ⠀⠈⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠘⢿⣿⣿⣿⡿⠁⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⢠⣾⠟⠀⠸⣿⣿⠁⠀⠀ ⠀⠀⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠈⢻⣿⡿⢁⣀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣧⣴⡿⠃⠀⠀⠀⣿⣿⠀⠀⠀ ⠀⢰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⣠⣾⠏⠀⠈⠛⠛⠛⠛⠋⠀⠈⠙⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⣹⣿⠀⠀⠀ ⢰⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀ ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⢿⣿⣫⣥⣤⣴⣴⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠛⠋⠁⢀⣼⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀ ⠘⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠘⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡤⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀ ⠀⠀⠀⠈⠙⠿⢿⣷⣶⡶⠶⠶⠶⠶⠟⠛⠉⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣦⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡟⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⣦⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⣠⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣴⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣠⣴⣶⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⣹⣿⣿⣿⡿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⣤⣴⣾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠿⠿⠿⠿⠿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⢀⡴⠛⠉⠙⠲⣤⣤⠴⠖⠚⠋⠉⠉⠛⠒⠦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣾⠁⠀⠀⣠⠞⠉⢀⡷⡀⠀⠀⠀⠀⠀⡀⠀⠀⠙⢷⣤⡤⠤⠤⣤⡀⠀ ⠀⠀⠀⣧⠀⢠⠞⠁⠀⠀⡎⣇⢿⠀⠀⣶⢊⡏⠁⠀⠀⠰⠟⠁⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢸⣤⠏⡠⢤⡀⠀⡃⢀⠇⠀⢸⠈⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇ ⠀⠀⠀⢠⡏⠀⠘⠤⠽⠀⢣⣊⣀⠀⠸⣀⠜⣀⠠⣀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠇ ⠀⠀⠀⢸⠀⠀⠀⠀⠀⡔⠉⠀⠀⠉⠢⡀⠀⠧⠠⠜⠀⠀⠀⠀⠀⠀⠀⣠⠟⠀ ⠀⠀⠀⢸⡀⠀⠀⠀⠸⠀⠀⢀⠔⠊⠉⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠁⠀⠀ ⠀⠀⠀⠘⣇⠀⠀⠀⢀⠀⡰⠃⠀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⢰⠇⠀⠀⠀ ⠀⠀⣠⠞⢻⡀⠀⠀⠸⣰⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢠⣏⠀⠀⠀⠀ ⠀⣼⠃⠀⠀⢳⡄⠀⠀⢳⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⣠⠏⠈⠳⣄⠀⠀ ⢰⡇⠀⠀⠀⠀⠙⢦⣀⠀⠱⢄⡀⠀⠀⣠⠋⠀⠀⠀⢀⣠⠞⠁⠀⠀⠀⠘⡆⠀ ⠈⣧⡀⠀⠀⠀⠀⠀⢉⣳⢦⣤⣈⣉⣉⣀⣠⣤⣶⠚⠋⠀⠀⠀⠀⠀⠀⠀⢻⠀ ⠀⠈⠙⠓⠲⠖⠚⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⣄⡀⠀⠀⠀⠀⣀⡾⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠋⠉⠀⠀ 4 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀ ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀ ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇ ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽ ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇ ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀ ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀ ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀ ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀ ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀ ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀ ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇ ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃ ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀ ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀ ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⡿⠿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⢿⣿⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣷⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠿⠋⠀⢀⣀⣀⣀⣠⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠻⣿⣧⡀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢉⣠⣴⣾⣿⣿⣿⣿⣿⣿⣯⠉⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠹⣿⡇ ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⡇⠀⠀⣿⡇ ⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣿⣿⠃⠀⢰⣿⠇ ⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⠇⢻⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⢿⣿⣿⣏⠀⠀⣾⣿⠀ ⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠛⠋⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠈⣿⣿⣿⣿⣿⣿⡿⠀⠘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠈⣿⡟⣿⣆⣾⡿⠃⠀ ⠀⠈⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠘⢿⣿⣿⣿⡿⠁⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⢠⣾⠟⠀⠸⣿⣿⠁⠀⠀ ⠀⠀⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠈⢻⣿⡿⢁⣀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣧⣴⡿⠃⠀⠀⠀⣿⣿⠀⠀⠀ ⠀⢰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⣠⣾⠏⠀⠈⠛⠛⠛⠛⠋⠀⠈⠙⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⣹⣿⠀⠀⠀ ⢰⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀ ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⢿⣿⣫⣥⣤⣴⣴⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠛⠋⠁⢀⣼⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀ ⠘⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠘⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡤⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀ ⠀⠀⠀⠈⠙⠿⢿⣷⣶⡶⠶⠶⠶⠶⠟⠛⠉⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣦⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡟⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⣦⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⣠⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣴⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣠⣴⣶⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⣹⣿⣿⣿⡿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⣤⣴⣾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠿⠿⠿⠿⠿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ 3 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀ ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀ ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇ ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽ ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇ ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀ ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀ ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀ ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀ ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀ ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀ ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇ ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃ ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀ ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀ ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀ 2 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ 1 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ No more Kirby jumping on the bed 0000000000000000000000000000000000 THE END . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 1 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 2 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 3 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 4 { &quot;(つ -‘ _ ‘- )つ&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Kirby in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; Kirby(s) jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeys[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyCount; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Kirby in Java Loopy 5 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 4 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 3 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 2 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 1 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/16/2darray.html",
            "relUrl": "/java/2022/09/16/2darray.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Boolean Expressions and If Statements",
            "content": "The following code blocks demonstrate if, if-else, and if-elseif-else. The print statments explain why each expression is shown or why it is not printed. It is known that when overall boolean is true, the statment is printed. Similarly, if the boolean is false, the statment is not printed. . // Boolean Expressions // if boolean value = true; if(value == true){ System.out.println(&quot;the statment is printed if the value is set to true&quot;); } if(value){ System.out.println(&quot;the statment is printed since the value is already set to true&quot;); } . the statment is printed if the value is set to true the statment is printed since the value is already set to true . // Boolean Expressions continued // if-else boolean value = false; if(value == true){ System.out.println(&quot;the statment is printed if the value is set to true&quot;); } else { System.out.println(&quot;else this statment is printed since the value is not true&quot;); } if(value != false) { System.out.println(&quot;if the value is not equal to false, then this statment will print&quot;); } else { System.out.println(&quot;else this statment is printed since the value is equal to false&quot;); } . else this statment is printed since the value is not true else this statment is printed since the value is equal to false . // if-else if-else boolean value1 = true; boolean value2 = true; if(value1 &amp;&amp; !value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else if(!value1 &amp;&amp; value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else if(!value1 &amp;&amp; !value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else if(!value1 || !value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else{ System.out.println(&quot;all the expressions are false! this is our last resort&quot;); // statment is not printed because the overall expression is false } . all the expressions are false! this is our last resort . if (true) { System.out.println(&quot;the statment is printed becuase the condition set to true&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;the statment is printed becuase the condition is true and not false which makes it true&quot;); } if (true || false) { System.out.println(&quot;the statment is printed becuase the condition is true or false, which results in true&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;the statment is printed becuase the condition is: (true and not false) and (true or false) which results in true&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;the statment is printed becuase the condition is: (not (false or false) or (false and true)) which results in true&quot;); } // De Morgan&#39;s laws boolean a = true; boolean b = false; if (!((b || a) &amp;&amp; (!b &amp;&amp; !a))) // NOT(A || B) is Equivalent to (NOT(A) AND NOT(B)) { System.out.println(&quot;demorgan first law&quot;); } if (!((a &amp;&amp; b) &amp;&amp; (!a || !b))) // NOT(A &amp;&amp; B) is Equivalent to (NOT(A) OR NOT(B)) { System.out.println(&quot;demorgan second law&quot;); } . the statment is printed becuase the condition set to true the statment is printed becuase the condition is true and not false which makes it true the statment is printed becuase the condition is true or false, which results in true the statment is printed becuase the condition is: (true and not false) and (true or false) which results in true the statment is printed becuase the condition is: (not (false or false) or (false and true)) which results in true demorgan first law demorgan second law . . . if else . if else statement is a conditional statement . the if line is executed if the specified statment is determined to be true. . if the condition is false, the if statment is not executed and the next statment is moved on to. else if statment is executed when the first if statment is not executed. else if is a another condition . else is the final and false statment . switch gives the option to select a block of code . import java.util.Scanner; . public class ifelse { int number; int remainder() { int rem = (number%2); System.out.println(&quot;Remainder: &quot; + rem); if( rem == 0) { System.out.println(&quot;Even&quot;); // if rem is equal to 0, then &quot;even&quot; will be printed } else { System.out.println(&quot;Odd&quot;); // if rem is not equal to 0, then &quot;odd&quot; will be printed } return rem; } public ifelse(int n) { System.out.println(&quot;Number entered: &quot; + n); number = n; } } . explanation . the input is an integer. the given integer is divided by 2 to determine if the remainder is 0 or 1. the remainder is tested to see if it is equal to 0. if the remainder is equal to 0, then the number is determined to be even. else the number is odd, because the remainder is not 0 and there is only one other possibility therefore another else if is not required. . public class gradeifelse { private double grade; public double finalgrade() { if ( grade &gt;= 90) { System.out.println(&quot;A&quot;); // if the grade is greater than equal to 90, then A will be printed } else if( grade &gt;= 80 &amp;&amp; grade &lt; 90) { System.out.println(&quot;B&quot;); // if the previous statment is not true and the grade is // greater than equal to 80 or less than 90, then B will be printed } else if( grade &gt;= 70 &amp;&amp; grade &lt; 80) { System.out.println(&quot;C&quot;); // if the previous statment is not true and the grade is // greater than equal to 70 or less than 80, then C will be printed } else if( grade &gt;= 60 &amp;&amp; grade &lt; 70) { System.out.println(&quot;D&quot;); // if the previous statment is not true and //the grade is greater than equal to 60 or less than 70, then D will be printed } else if( grade &gt;= 0 &amp;&amp; grade &lt; 60) { System.out.println(&quot;F&quot;); // if the previous statment is not true and the grade is less than 60, then F will be printed } else { System.out.println(&quot;Not within range&quot;); // if the previous statments are not true and an // integer is not inputted properly, then the else statment will be printed } return grade; } public gradeifelse(double n) { System.out.println(&quot;Grade entered: &quot; + n); grade = n; } } . import java.util.Scanner; public class gradeswitch { private int value = 0; private double grade; public gradeswitch(double n) { System.out.println(&quot;Grade entered: &quot; + n); grade = n; } public void switchgrade() { if (grade &gt;= 90) { value = 1; } else if( grade &gt;= 80 &amp;&amp; grade &lt; 90) { value = 2; } else if( grade &gt;= 70 &amp;&amp; grade &lt; 80) { value = 3; } else if( grade &gt;= 60 &amp;&amp; grade &lt; 70) { value = 4; } else if( grade &gt;= 0 &amp;&amp; grade &lt; 60) value = 5; switch(value) { //switch case with values case 1: System.out.println(&quot;A&quot;); break; case 2: System.out.println(&quot;B&quot;); break; case 3: System.out.println(&quot;C&quot;); break; case 4: System.out.println(&quot;D&quot;); break; case 5: System.out.println(&quot;F&quot;); break; default: System.out.println(&quot;not number assigned correctly&quot;); } } } . public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes Scanner sc; // available to all inside the menu class // Constructor on this Object takes control of menu events and actions public Menu() { sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.println(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Even or Odd&quot;); System.out.println(&quot;2 - Grade - with if else&quot;); System.out.println(&quot;3 - Grade - with switch case&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; double g; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot;Enter number: &quot;); int n = sc.nextInt(); ifelse mynumber = new ifelse(n); mynumber.remainder(); break; case 2: System.out.println(&quot;Enter grade: &quot;); g = sc.nextDouble(); gradeifelse mygrade = new gradeifelse(g); mygrade.finalgrade(); break; case 3: System.out.println(&quot;Enter grade: &quot;); g = sc.nextDouble(); gradeswitch grade = new gradeswitch(g); grade.switchgrade(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Even or Odd 2 - Grade - with if else 3 - Grade - with switch case 0 - Quit - 1: Enter number: Number entered: 5 Remainder: 1 Odd 1: Enter number: Number entered: 6 Remainder: 0 Even 2: Enter grade: Grade entered: 69.0 D 2: Enter grade: Grade entered: 80.0 B 3: Enter grade: Grade entered: 69.0 D 3: Enter grade: Grade entered: 80.0 B 0: Goodbye, World! .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/11/javaifelse.html",
            "relUrl": "/java/2022/09/11/javaifelse.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "focus and habits",
            "content": "connection Psychology and the Good Life . The idea of reducing stress and taking action to be mentally healthy is a common discussion I have heard throughout high school. In fact, I remember my AP Calculus BC teacher discussing the Psychology and the Good Life almost every morning in our class. . my ways to reduce stress . I enjoy listening to music. After I complete my work or tasks I try to listen to music as short break before I get right back to work. I try to not worry about the amount of work or time I have, but it is still very stressful. I have found that a good way to keep myself accountable and manage my time better is to keep a list of the things I need to get done . my goals for this year . As a senior year in high school, I want to be prepared for college. I want to make sure that I am building good study habits to make my college life easier. . CS group collaboration . We are fun a group! My CS group has good synergy and we do our best to help each other out. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/09/11/focusandhabits.html",
            "relUrl": "/entry/2022/09/11/focusandhabits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "documentation and analysis of oop",
            "content": "Completion of OOP in code.org . A class is defined when variables, objects or methods are added to the code. . public class MyNeighborhood { // where the objects and methods go } . instance of an object of the . Painter myPainter = new Painter(); . class calls the main method to execute . Menu.main(null); . mutating data: the following method parses an input as a double . double w = sc.nextDouble(); .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/05/javaoop.html",
            "relUrl": "/java/2022/09/05/javaoop.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "innovation using object",
            "content": "import java.lang.Math; . class box { double width; double height; double depth; // volume of box double volume() { double vol = width *height * depth; System.out.println(&quot;Volume &quot;+ vol); return vol; } public box(double w, double h, double d) { System.out.println(&quot;w h d: &quot; + w + &quot; &quot; + h + &quot; &quot; + d); width = w; height = h; depth = d; } public box(double w) { System.out.println(&quot;side : &quot; + w ); width = w; height = w; depth = w; } } . public class sphere { double radius; double volume() { double vol = ((4 * Math.PI * Math.pow(radius, 3))/3) ; System.out.println(&quot;Volume of sphere: &quot; + vol); return vol; } public sphere(double r) { System.out.println(&quot;r :&quot; + r); radius = r; } } . public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes Scanner sc; // available to all inside the menu class // Constructor on this Object takes control of menu events and actions public Menu() { sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.println(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Find volume of box&quot;); System.out.println(&quot;2 - Find volume of cube&quot;); System.out.println(&quot;3 - Find volume of sphere&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot;Enter width: &quot;); double w = sc.nextDouble(); System.out.println(&quot;Enter height: &quot;); double h = sc.nextDouble(); System.out.println(&quot;Enter depth: &quot;); double d = sc.nextDouble(); box myrectangle = new box(w, h, d); myrectangle.volume(); break; case 2: System.out.println(&quot;Enter side length: &quot;); w = sc.nextDouble(); box mycube = new box(w); mycube.volume(); break; case 3: System.out.println(&quot;Enter radius length: &quot;); double r = sc.nextDouble(); sphere mysphere = new sphere(r); mysphere.volume(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Find volume of box 2 - Find volume of cube 3 - Find volume of sphere 0 - Quit - 1: Enter width: Enter height: Enter depth: w h d: 2.0 3.0 4.0 Volume 24.0 0: Goodbye, World! .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/05/javaobject.html",
            "relUrl": "/java/2022/09/05/javaobject.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "alumni panel",
            "content": "insight and takeaway . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In today&#39;s alum panel, I related to Nitya, Allison, and Mabel the most. The three alumni shared a common relationship with computer science at the beginning of their introduction to the field. They all found computer science challenging and did not like it. However, through taking the AP Computer Science Principles class, they realized the value of computer science and how, in the present day, it is required for almost any field. Alison, who will be entering UCLA this year with a major in cognitive science and a minor in statistics, said that looking at the course, she saw that she needed to know how to program in the language R. She continued to state that probably most people that will be taking the statistics course do not realize that they need to know how to program if they want to succeed in the class. . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mabel and Nitya both talked about how they liked structured classes and set instructions. I also am a person who wants an organized structure. I took Computer Science Principles last year, and the idea of being free to create any idea of ours was very new to me. Over time, as I gained experience with Ms. Naidu and Mr. Mortensen, I understood how to use the freedom we were given and became interested in computer science. Similar to my experience, Nitya, Allison, and Mabel shared how they began to enjoy computer science and understand its value. Now in college, they are pursuing their majors, to which computer science is vital. . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A takeaway from today was when I talked to Colin at the end of the panel, where he explained that in any engineering major you choose, being proficient in computer science will make your life easier, and you will be able to perform better in college classes. As a senior who is concerned with what major to choose for college, I will always need to keep computer science in my toolbox and be able to apply it. . Me, Jeffrey Lee, and Anthony Vo after the alumni panel .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/08/29/alumnipanel.html",
            "relUrl": "/entry/2022/08/29/alumnipanel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Alumni Panel Notes",
            "content": "Colin - UCSD, mechanical . Nitya - UCSD . AVO - UCI, CS . Alison - UCLA, cognitive science, minoring in Stats . Mabel - UCSD, Cognitive Science and Machine Learning . Andrew – UCSD? . How did you realize you wanted to do your major? . Colin: I can code well. I can 3d model much better. Peers told him to go to comp sci. . | Avo: Did computer science from a young age. Functions and algorithms. . | Andrew: likes java, deployment . | Mabel: Did not like the class. Logical thinking really helped. Robotics team - helped with mission planning. Aerospace engineering was not structured well. . | Alison: artsy businessperson, cog sci major, she wants to work on web design. . | Nitya: took cs seriously in middle school and high school . | . What is the biggest challenge you have had with computer science? . Colin: Github throwing messages at you. There are solutions on the internet . | Avo: clashing egos, focus on your own path, there is a lot of smart people out there, the next steve jobs is already beating you . | Allison: Just starting, the temptation to BS, don’t cut corners, having the mindset to go above and beyond . | Nitya: one of the biggest challenges is getting started in the area of computer science, very organized person and requires structure . | . Any PBL scenarios in college classes? . Colin: one hands on project in freshman year and one senior year . | Mabel: College the first few years is general education, freeload of off you, they don’t expect interns to know much . | . Have you applied CS in your major if you have not applied majoring in CS? . Colin: coding will be everywhere, oh hey i can code this part of the project, matlab!! - important for mechanical engineering . | Andrew: knowledge of CS can help any high level math courses . | Allison: math classes will require programming, R - stats needed . | Colin mentioned something about Computation Aided Manufacturing .",
            "url": "https://rohitd3.github.io/rohitfastpages/2022/08/29/alumni-panel-notes.html",
            "relUrl": "/2022/08/29/alumni-panel-notes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "verify environment in bash",
            "content": "jupyter kernelspec list . Available kernels: bash /home/rohitde/.local/share/jupyter/kernels/bash java /home/rohitde/.local/share/jupyter/kernels/java javascript /home/rohitde/.local/share/jupyter/kernels/javascript python3 /home/rohitde/.local/share/jupyter/kernels/python3 . python --version python2 --version java --version conda --version . Python 3.9.12 Python 2.7.18 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) conda 4.14.0 .",
            "url": "https://rohitd3.github.io/rohitfastpages/bash/2022/08/28/verify-env.html",
            "relUrl": "/bash/2022/08/28/verify-env.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "unit 1 java primitive",
            "content": "import java.util.Scanner; public class gpacalculator { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); int sum = 0; //intialize sum to 0, the gpa will be summed up in the for loop System.out.println(&quot;Number of classes:&quot;); int classes = userInput.nextInt(); System.out.println(&quot;I am taking &quot; + classes+ &quot; classes&quot;); System.out.println(&quot;My class letter grades:&quot;); // enter as uppercase or lowercase for (int i = 0; i &lt;= classes; i++) { int gpa = 0; // intializing variable gpa as 0 String grade = userInput.nextLine(); System.out.println(grade); if (grade.equals(&quot;A&quot;) || grade.equals(&quot;a&quot;)) { gpa = 4; } else if (grade.equals(&quot;B&quot;) || grade.equals(&quot;b&quot;)) { gpa = 3; } else if (grade.equals(&quot;C&quot;) || grade.equals(&quot;c&quot;)) { gpa = 2; } else if (grade.equals(&quot;D&quot;) || grade.equals(&quot;d&quot;)) { gpa = 1; } else if (grade.equals(&quot;F&quot;) || grade.equals(&quot;f&quot;)) { gpa = 0; } sum = sum + gpa; } float gpaWhole = (float) sum/(float) classes; System.out.println(&quot;Your Overall GPA: &quot; + gpaWhole); } } gpacalculator.main(null); . Number of classes: I am taking 5 classes My class letter grades: A a C d A Your Overall GPA: 3.0 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/08/28/javagpacalc.html",
            "relUrl": "/java/2022/08/28/javagpacalc.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "rohit entry",
            "content": "cowsay -f dragon-and-cow &quot;Hi! I am Rohit, a senior at Del Norte High School. I can&#39;t wait to use more of fastpages and post more entries!!&quot; | lolcat --spread 9 . _______________________________________ / Hi! I am Rohit, a senior at Del Norte | High School. I can&#39;t wait to use more | of fastpages and post more entries!! / ^ /^ / // | ___/| / // . /O O __ / // | *-* / / /_/ // | | @___@` /_ // | / 0/0/| /_ // | 0/0/0/0/| /// | | | 0/0/0/0/0/_|_ / ( // | _ | / 0/0/0/0/0/0/`/,_ _ _/ ) ; -. | _ _ .-~ / / ,-} _ *-.|.-~-. .~ ~ __/ `/ / ~-. _ .-~ / ____(oo) *. } { / ( (--) .-~-. -` .~ //__ __ Ack! ///.-..&lt; _ -~ // ///-._ _ _ _ _ _ _{^ - - - - ~ .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/08/22/rohit-post.html",
            "relUrl": "/entry/2022/08/22/rohit-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Hello World in Python!",
            "content": "print(&#39;hello world&#39;) . hello world . List and Loops from CSP Tri 3 . InfoDb = [] # List with dictionary records placed in a list InfoDb.append({ &quot;MovieName&quot;: &quot;Spider-Man: No Way Home&quot;, &quot;MovieYear&quot;: &quot;2021&quot;, &quot;Rating&quot;: &quot;5&quot;, &quot;Actors&quot;: [ &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;, &quot;Zendaya&quot;, &quot;Andrew Garfield&quot;, &quot;Marisa Tomei&quot; ] }) InfoDb.append({ &quot;MovieName&quot;: &quot;Star Wars: The Force Awakens&quot;, &quot;MovieYear&quot;: &quot;2015&quot;, &quot;Rating&quot;: &quot;4&quot;, &quot;Actors&quot;: [&quot;Daisy Ridley&quot;, &quot;John Boyega&quot;, &quot;Harrison Ford&quot;, &quot;Adam Driver&quot;] }) InfoDb.append({ &quot;MovieName&quot;: &quot;Toy Story&quot;, &quot;MovieYear&quot;: &quot;1995&quot;, &quot;Rating&quot;: &quot;5&quot;, &quot;Actors&quot;: [&quot;Tom Hanks&quot;, &quot;Laurie Metcalf&quot;, &quot;Ernie Sabella&quot;, &quot;Nathan Lane&quot;] }) def print_data(n): print(&quot;Movie Name:&quot;, InfoDb[n][&quot;MovieName&quot;], &quot;Year:&quot;, InfoDb[n][&quot;MovieYear&quot;], &quot;Rating: &quot;,InfoDb[n][&quot;Rating&quot;] ) # using comma puts space between values print(&quot; t&quot;, &quot;Actors in the movie: &quot;, end=&quot;&quot;) # t is a tab indent, end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(InfoDb[n][&quot;Actors&quot;])) # join allows printing a string list with separator print() def tester(): print(&quot;For loop with range:&quot;) for_loop_limit(1,2) print(&quot;For loop&quot;) for_loop() print(&quot;While loop&quot;) while_loop(0) # requires initial index to start while print(&quot;Recursive loop&quot;) recursive_loop(0) # requires initial index to start recursion # for loop iterates on length of InfoDb def for_loop(): for n in range(len(InfoDb)): print_data(n) def for_loop_limit(start, end): for n in range(start, end+1): print_data(n) # while loop contains an initial n and an index incrementing statement (n += 1) # dont need to write n = 0 because it being called in the tester def while_loop(n): while n &lt; len(InfoDb): print_data(n) n += 1 return # recursion simulates loop incrementing on each call (n + 1) until exit condition is met def recursive_loop(n): if n &lt; len(InfoDb): print_data(n) recursive_loop(n + 1) return # exit condition if __name__ == &quot;__main__&quot;: tester() . For loop with range: Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane For loop Movie Name: Spider-Man: No Way Home Year: 2021 Rating: 5 Actors in the movie: Tom Holland, Tobey Maguire, Zendaya, Andrew Garfield, Marisa Tomei Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane While loop Movie Name: Spider-Man: No Way Home Year: 2021 Rating: 5 Actors in the movie: Tom Holland, Tobey Maguire, Zendaya, Andrew Garfield, Marisa Tomei Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane Recursive loop Movie Name: Spider-Man: No Way Home Year: 2021 Rating: 5 Actors in the movie: Tom Holland, Tobey Maguire, Zendaya, Andrew Garfield, Marisa Tomei Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane .",
            "url": "https://rohitd3.github.io/rohitfastpages/python/2022/08/22/python-notebook.html",
            "relUrl": "/python/2022/08/22/python-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Hello World in Java",
            "content": "System.out.println(&quot;Hello World&quot;); System.out.println(&quot;Hello World World&quot;); . Hello World Hello World World .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/08/21/java-notebook.html",
            "relUrl": "/java/2022/08/21/java-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Example Notebook",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2020/02/20/test.html",
            "relUrl": "/java/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rohitd3.github.io/rohitfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi! I am Rohit and am of the class of 2023. I am so excited for senior year in AP Computer Science A!! . .",
          "url": "https://rohitd3.github.io/rohitfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Calculator",
          "content": "&lt;!DOCTYPE html&gt; . Calculator . Value 1: Value 2: Operator: Add Subtract Multiply Divide Calculate .",
          "url": "https://rohitd3.github.io/rohitfastpages/calc/",
          "relUrl": "/calc/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Mazda Cars",
          "content": ". Car Brand Image Source . . . . . . . .",
          "url": "https://rohitd3.github.io/rohitfastpages/carapi/",
          "relUrl": "/carapi/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Collegeboard Work",
          "content": "AP Test Prep . Week 1 . . Notes . Terms to know: . shell | terminal | . View previous command by pressing up arrow ^ . $ pwd . shows the directory | . $ cd . change directory | . lower case is primitive . Upper case is wrapper class . primitive you just get the data . Primitive . Java Primitive gpa Calculator .",
          "url": "https://rohitd3.github.io/rohitfastpages/cbtestprep/",
          "relUrl": "/cbtestprep/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  
      ,"page9": {
          "title": "Star Wars Characters",
          "content": ". Name Planet Species . . . . . . . . s1dpDXFEcr6O1h18wJHCpA==SRqoKFJnFhai31pJ .",
          "url": "https://rohitd3.github.io/rohitfastpages/starwars/",
          "relUrl": "/starwars/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohitd3.github.io/rohitfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}