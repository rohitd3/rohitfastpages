{
  
    
        "post0": {
            "title": "JavaScript Tutorial",
            "content": "JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSA/master/_notebooks/2023-05-10-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age .",
            "url": "https://rohitd3.github.io/rohitfastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • May 11, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "FRQ 2017 Running Code",
            "content": "2017 FRQ . import java.util.*; import java.lang.*; public class Digits { private ArrayList&lt;Integer&gt; digitList; public Digits(int num){ digitList = new ArrayList&lt;Integer&gt;(); int remainderNum = 0; if(num != 0){ while(num != 0){ remainderNum = num % 10; System.out.println(&quot;Remainder: &quot;+ remainderNum); digitList.add(0,remainderNum); num = num / 10; System.out.println(&quot;Number: &quot; + num); } }else{ digitList.add(num); } } public String toString(){ String digitListPrint = &quot;&quot;; for(int i = 0; i &lt; digitList.size(); i++){ digitListPrint+=digitList.get(i); } return digitListPrint; } public static void main(String[] args){ Digits d1 = new Digits(15704); System.out.println(d1); Digits d2 = new Digits(0); System.out.println(d2); } } Digits.main(null); . Remainder: 4 Number: 1570 Remainder: 0 Number: 157 Remainder: 7 Number: 15 Remainder: 5 Number: 1 Remainder: 1 Number: 0 15704 0 . a) . +1 Constructs digitList . +1 Identifies a digit in num . +1 Adds at least one identified digit to a list . +1 Adds all identified digits to a list (must be in context of a loop) . +1 On exit: digitList contains all and only digits of num in the correct order . b) . +1 Compares at least one identified consecutive pair of digitList elements . +1 Determines if a consecutive pair of digitList is out of order (must be in context of a digitList traversal) . +1 Compares all necessary consecutive pairs of elements (no bounds errors) . +1 Returns true iff all consecutive pairs of elements are in order; returns false otherwise . a) 5/5 all reqiuirements are met . b) 4/4 all reqiuirements are met . public interface StudyPractice{ // defintion of the method is given, not the implementation String getProblem(); void nextProblem(); } . public class MultPractice implements StudyPractice { private int firstInt = 0; private int secondInt = 0; public MultPractice(int firstInt, int secondInt){ this.firstInt = firstInt; this.secondInt = secondInt; } public String getProblem(){ return firstInt + &quot; TIMES &quot; + secondInt; } public void nextProblem(){ secondInt+=1; } public static void main(String[] args){ StudyPractice p1 = new MultPractice(7, 3); System.out.println(p1.getProblem()); p1.nextProblem(); System.out.println(p1.getProblem()); p1.nextProblem(); System.out.println(p1.getProblem()); p1.nextProblem(); System.out.println(p1.getProblem()); StudyPractice p2 = new MultPractice(4, 12); p2.nextProblem(); System.out.println(p2.getProblem()); System.out.println(p2.getProblem()); p2.nextProblem(); p2.nextProblem(); System.out.println(p2.getProblem()); p2.nextProblem(); System.out.println(p2.getProblem()); } } MultPractice.main(null); . 7 TIMES 3 7 TIMES 4 7 TIMES 5 7 TIMES 6 4 TIMES 13 4 TIMES 13 4 TIMES 15 4 TIMES 16 . a) +1 Declares header: public class MultPractice implements StudyPractice . +1 Declares all necessary private instance variables . +1 Initializes all instance variables using parameters . +1 Declares header: public String getProblem() . +1 Builds string with current values of instance variables . +1 Returns constructed string . +1 Declares header: public void nextProblem() . +1 Updates instance variable(s) to reflect incremented second number . 8/9 requirements are met . public class Phrase{ private String currentPhrase = &quot;&quot;; public Phrase(String p){ currentPhrase = p; } public int findNthOccurrence(String str, int n){ return 3; } public void replaceNthOccurrence(String str, int n, String repl){ int indexOccurence = findNthOccurrence(str, n); if(indexOccurence != -1){ String str1 = currentPhrase.substring(0, indexOccurence); String str2 = currentPhrase.substring(indexOccurence + str.length()); currentPhrase = str1 + repl + str2; } } public int findLastOccurrence(String str){ String newPhrase = new String(currentPhrase); int n = currentPhrase.indexOf(str); int lastIndex = 0; while(n != -1){ newPhrase = newPhrase.substring(n+1); System.out.println(newPhrase); n = newPhrase.indexOf(str); System.out.println(n); } if(newPhrase.length() != 0){ lastIndex = currentPhrase.length() - newPhrase.length() -1; System.out.println(&quot;Last occurrence: &quot; + lastIndex); return lastIndex; } else { System.out.println(&quot;Last occurrence: -1&quot;); return -1; } } public String toString(){ return &quot;Phrase: &quot; + currentPhrase; } public static void main(String[] args){ Phrase phrase1 = new Phrase(&quot;A cat ate late.&quot;); phrase1.replaceNthOccurrence(&quot;at&quot;, 1, &quot;rane&quot;); // System.out.println(new String(&quot;A cat ate late.&quot;).length()); Phrase phrase2 = new Phrase(&quot;A cat ate late.&quot;); phrase2.findLastOccurrence(&quot;at&quot;); } } Phrase.main(null); . t ate late. 2 te late. 4 te. -1 Last occurrence: 11 . a) +1 Calls findNthOccurrence to find the index of the nth occurrence . +1 Preserves currentPhrase only if nth occurrence does not exist . +1 Identifies components of currentPhrase to retain (uses substring to extract before/after) . +1 Creates replacement string using identified components and repl . +1 Assigns replacement string to instance variable (currentPhrase) . b) . +1 Calls findNthOccurrence to find the index of the nth occurrence . +1 Increments (or decrements) the value used as n when finding nth occurrence . +1 Returns the index of the last occurrence, if it exists . +1 Returns -1 only when no occurrences exist . a) 4/4 all reqiuirements are met . b) Does not utilize findNthOccurrence therefore 3/4 . public class Position{ // int[][] intArr = { { 15, 5, 9 ,10 }, { 12, 16, 11, 6 }, { 14, 8, 13, 7}}; private int row = 0; private int col = 0; public Position(int r, int c){ row = r; col = c; } public static Position findPosition(int num, int[][] intArr){ for(int i = 0; i &lt; intArr.length; i++){ for(int g = 0; g &lt; intArr[i].length; g++){ if(intArr[i][g] == num){ System.out.println(&quot;row: &quot; + i + &quot; column: &quot; + g); return new Position(i, g); } } } System.out.println(&quot;null&quot;); return null; } public static Position[][] getSuccessorArray(int[][] intArr){ Position[][] posArray = new Position[intArr.length][intArr[0].length]; for(int i = 0; i &lt; intArr.length; i++){ for(int g = 0; g &lt; intArr[i].length; g++){ posArray[i][g] = findPosition(intArr[i][g] + 1, intArr); } } return posArray; } public static void main(String[] args){ int[][] intArr = { { 15, 5, 9 ,10 }, { 12, 16, 11, 6 }, { 14, 8, 13, 7}}; Position.findPosition(8, intArr); Position.findPosition(15, intArr); Position.findPosition(17, intArr); } } Position.main(null); . row: 2 column: 1 row: 0 column: 0 null . a) . +1 Accesses all necessary elements of intArr (no bounds errors) . +1 Identifies intArr element equal to num (in context of an intArr traversal) . +1 Constructs Position object with same row and column as identified intArr element . +1 Selects constructed object when intArr element identified; null when not . +1 Returns selected value . b) . +1 Creates 2D array of Position objects with same dimensions as intArr . +1 Assigns a value to a location in 2D successor array using a valid call to findPosition . +1 Determines the successor Position of an intArr element accessed by row and column (in context of intArr traversal) . +1 Assigns all necessary locations in successor array with corresponding position object or null (no bounds errors) . a) 5/5 all reqiuirements are met . b) 4/4 all reqiuirements are met . 2015 FRQ . public class ArrayManipulation{ public static int arraySum(int[] arr){ int arraySum = 0; for(int i = 0; i &lt; arr.length; i++){ // System.out.println(&quot;array sum: &quot; + arraySum); // System.out.println(&quot;arr i &quot;+ arr[i]); arraySum += arr[i]; } System.out.println(arraySum); return arraySum; } public static int[] rowSums(int[][] arr2D){ int rowSum; int[] rowSumS = new int[arr2D.length]; for(int i = 0; i &lt; arr2D.length; i++){ rowSum = 0; for(int h = 0; h &lt; arr2D[i].length; h++){ rowSum += arr2D[i][h]; } rowSumS[i] = rowSum; System.out.println(rowSumS[i]); } return rowSumS; } public static void main(String[] args){ int[] arr = {1, 3, 2, 7 ,3}; ArrayManipulation.arraySum(arr); int[][] arr2D = {{1, 3, 2, 7 ,3}, {10, 10, 4, 6, 2}, {5, 3, 5, 9 ,6 }, {7,6,4,2,1}}; ArrayManipulation.rowSums(arr2D); } } ArrayManipulation.main(null); . 16 16 32 28 20 . a) . +1 Accesses all elements of arr, (no bounds errors on arr) . +1 Initializes, computes, and returns sum of elements . b) . +1 Constructs correctly-sized 1D array of ints . +1 Accesses all rows in arr2D (no bounds errors on arr2D) . +1 Computes sum of row in arr2D using arraySum and assigns to element in 1D array . +1 Returns 1D array where kth element is computed sum of corresponding row in 2D array for all rows . a) 2/2 all reqiuirements are met . b) 4/4 all reqiuirements are met . c) incomplete .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/04/27/frqpractice2017.html",
            "relUrl": "/java/2023/04/27/frqpractice2017.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Hacks Unit 5,9,10 - Rohit, Nathan, Jun",
            "content": "// UNIT 5 import java.util.*; public class Car { private String carBrand; private String modelName; private String modelYear; private int carMileage = 0; private int carId = 0; private static int carsForSale = 0; private static ArrayList&lt;Car&gt; carsInMarket = new ArrayList&lt;Car&gt;(); /** * Constructor with 3 arguments * @param carBrand * @param modelName * @param modelYear * * everytime this method is called, car id is added and a new car is added to the array */ public Car(String carBrand, String modelName, String modelYear, int carMileage){ this.carBrand = carBrand; this.modelName = modelName; this.modelYear = modelYear; this.carMileage = carMileage; carId = uniqueID(); Car.carsInMarket.add(this); } /** * * @return number of cars */ public static int getCarsCount(){ return Car.carsInMarket.size(); } /** * * @return unique id for each car */ private int uniqueID(){ Random randid = new Random(); carId = randid.nextInt(9999); return carId; } /** * * @return calling the car array */ public static List&lt;Car&gt; getCarsInMarket(){ return Car.carsInMarket; } /** * printing the object */ public String toString(){ return &quot;Id: &quot; + carId + &quot; Brand: &quot; + carBrand + &quot; Model: &quot; + modelName + &quot; Year: &quot; + modelYear + &quot; Mileage: &quot; + carMileage; } public static void main(String[] args){ System.out.println(&quot;Car available: &quot; + Car.getCarsCount()); Car BMWX1 = new Car(&quot;BMW&quot;,&quot;X1&quot;,&quot;2002&quot;,30); Car HondaCRV = new Car(&quot;Honda&quot;,&quot;CRV&quot;,&quot;2015&quot;,40); for(int i = 0; i &lt; Car.getCarsCount(); i++){ System.out.println((Car.getCarsInMarket().get(i))); } System.out.println(&quot;Car available: &quot; + Car.getCarsCount()); } } Car.main(null); . Car available: 0 Id: 3967 Brand: BMW Model: X1 Year: 2002 Mileage: 30 Id: 667 Brand: Honda Model: CRV Year: 2015 Mileage: 40 Car available: 2 . // UNIT 9 PART 1 class Vehicle { public String name; public Vehicle(String name){ this.name = name; } public void honk(){ System.out.println(&quot;HONK MEEP BEEEEEEEP!&quot;); } } class Car extends Vehicle { public Car(String name){ super(name); } // methods and attributes } public class Main { public static void main(String[] args) { Car car1 = new Car(&quot;Lexus GS430&quot;); car1.honk(); System.out.println(car1.name); } } Main.main(null); . HONK MEEP BEEEEEEEP! Lexus GS430 . // UNIT 9 PART 2 // Parent class public class Animal { protected String name; protected int age; public Animal(String name, int age) { this.name = name; this.age = age; } public void speak() { System.out.println(&quot;I AM AN ANIMALIO!!!!!!!!&quot;); } } // Subclass 1 public class Turtle extends Animal { private String breed; public Turtle(String name, int age, String breed) { super(name, age); this.breed = breed; } @Override public void speak() { System.out.println(&quot;Turtle Noises Commence&quot;); } public void eat() { System.out.println(&quot;I nomp lettuce.&quot;); } } // Subclass 2 public class Cat extends Animal { private boolean isIndoor; public Cat(String name, int age, boolean isIndoor) { super(name, age); this.isIndoor = isIndoor; } @Override public void speak() { System.out.println(&quot;Meow!&quot;); } public void scratch() { System.out.println(&quot;I am scratching the furniture.&quot;); } } // Tester method public class AnimalTester { public static void main(String[] args) { Animal animal1 = new Turtle(&quot;Shellby&quot;, 3, &quot;Russian Tortoise&quot;); Animal animal2 = new Cat(&quot;Whiskers&quot;, 2, true); animal1.speak(); ((Turtle) animal1).eat(); System.out.println(animal1.name); animal2.speak(); ((Cat) animal2).scratch(); System.out.println(animal2.age); } } AnimalTester.main(null); . Turtle Noises Commence I nomp lettuce. Shellby Meow! I am scratching the furniture. 2 . // UNIT 10 public class Fibonacci { public static long fib(long n) { if ((n == 0) || (n == 1)) return n; else return fib(n - 1) + fib(n - 2); } public static void main(String[] args) { System.out.println(&quot;The 0th fibonacci number is: &quot; + fib(0)); System.out.println(&quot;The 7th fibonacci number is: &quot; + fib(7)); System.out.println(&quot;The 12th fibonacci number is: &quot; + fib(12)); } } Fibonacci.main(null); . The 0th fibonacci number is: 0 The 7th fibonacci number is: 13 The 12th fibonacci number is: 144 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/04/26/labhacks.html",
            "relUrl": "/java/2023/04/26/labhacks.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Extra Car Simulation",
            "content": "import java.util.*; public class Car { private String carBrand; private String modelName; private String startingYear; private int carMileage = 0; private final int CURRENTYEAR = 2023; private int carId = 0; private static int carsForSale = 0; private static ArrayList&lt;Car&gt; carsInMarket = new ArrayList&lt;Car&gt;(); /** * Constructor with 3 arguments * @param carBrand * @param modelName * @param startingYear * * everytime this method is called, car id is added and a new car is added to the array */ public Car(String carBrand, String modelName, String startingYear, int carMileage){ this.carBrand = carBrand; this.modelName = modelName; this.startingYear = startingYear; this.carMileage = carMileage; carId = uniqueID(); Car.carsInMarket.add(this); } /** * * @return number of cars */ public static int getCarsCount(){ return Car.carsInMarket.size(); } /** * * @return unique id for each car */ private int uniqueID(){ Random randid = new Random(); carId = randid.nextInt(9999); return carId; } /** * * @return calling the car array */ public static List&lt;Car&gt; getCarsInMarket(){ return Car.carsInMarket; } public int getMarketLife(){ return CURRENTYEAR - startingYear; } public void ageMarketLife() { this.life -= Book.YEAR; // remove a year if (getShelfLife() &lt; 0.1) // small number zero out, this is for double floating point condition this.life = this.created; } public void setMarketLife(int years) /** * printing the object */ public String toString(){ return &quot;Id: &quot; + carId + &quot; Brand: &quot; + carBrand + &quot; Model: &quot; + modelName + &quot; Year: &quot; + startingYear + &quot; Mileage: &quot; + carMileage; } public static void main(String[] args){ System.out.println(&quot;Car available: &quot; + Car.getCarsCount()); Car BMWX1 = new Car(&quot;BMW&quot;,&quot;X1&quot;,30); Car HondaCRV = new Car(&quot;Honda&quot;,&quot;CRV&quot;,40); for(int i = 0; i &lt; Car.getCarsCount(); i++){ System.out.println((Car.getCarsInMarket().get(i))); } System.out.println(&quot;Car available: &quot; + Car.getCarsCount()); } } Car.main(null); . Car available: 0 Id: 4722 Brand: BMW Model: X1 Mileage: 30 Id: 5579 Brand: Honda Model: CRV Mileage: 40 Car available: 2 . public class ElectricCar extends Car{ private int numBatteries; private long chargeTime; private boolean hasGear; public ElectricCar(String carBrand, String modelName, String startingYear, int carMileage, int numBatteries, long chargeTime){ super(carBrand, modelName, startingYear, carMileage); this.numBatteries = numBatteries; this.chargeTime = chargeTime; } public void setHasGear(boolean hasGear){ this.hasGear = hasGear; } public boolean getHasGear(){ return hasGear; } } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/04/24/carparts123.html",
            "relUrl": "/java/2023/04/24/carparts123.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Random Test - Part 1,2,3",
            "content": "import java.util.Random; import java.lang.Thread; public class Book{ private String titlle; private int bookId; private static int BookCounter = 0; private long startTime; public Book(String title){ titlle = title; BookCounter++; uniqueBookId(); startTime = System.nanoTime(); } public String toString(){ return &quot;Booktitle: &quot; + titlle + &quot; Id: &quot; + bookId + &quot; Super: &quot; + super.toString(); } public void testBook(){ System.out.println(this); } private int uniqueBookId(){ Random randid = new Random(); bookId = randid.nextInt(9999); return bookId; } public static int getBookCount(){ return BookCounter; } public long getshelfLife() { return System.nanoTime() - startTime; // difference from start to current } public static void main(String[] args){ System.out.println(&quot;Bookcount: &quot; + Book.getBookCount()); Book book1 = new Book(&quot;Book1&quot;); Book book2 = new Book(&quot;Book2&quot;); System.out.println(book1); System.out.println(book2); System.out.println(&quot;Bookcount: &quot; + Book.getBookCount()); // testing for book 1 try{ Thread.sleep(5000); // milliseconds System.out.println(&quot;Book1 shelflife: &quot; + book1.getshelfLife()); } catch (Exception e) { // catching the exception if there is an interruption System.out.println(e); } Book[] bookss = { // array iniitialization to add book new Book(&quot;Barron&#39;s Computer Science &quot;A &quot;&quot;), // Set a new Book object as array element. new Book(&quot;Angels and Demons&quot;), new Book(&quot;Lion, Witch, and a Wardrobe&quot;) }; for (Book book : bookss) { // for each syntax to iterate over array System.out.println(book); // same as book.toString() } System.out.println(&quot;Libary Book Count: &quot; + Book.getBookCount()); // String [][] books = { { &quot;e=MC^2 a Biography&quot;, &quot;Pan Books (January 1, 2001)&quot;}, // row 0 { &quot;The Practice of Programming&quot;, &quot;Addison-Wesley Professional Computing&quot; } // row 1 }; TextBook[] txtbooks= new TextBook[books.length]; for (int k =0; k&lt;books.length; k++) { txtbooks[k] = new TextBook(books[k][0]); txtbooks[k].setPublisher(books[k][1]); try{ Thread.sleep(5000); System.out.println(&quot;Textbook&quot;); System.out.println(txtbooks[k]); System.out.println(&quot;Publisher : &quot; + txtbooks[k].getPublisher()); System.out.println(&quot;shelflife textbook: &quot; + txtbooks[k].getshelfLife()); System.out.println(&quot;textbook expires: &quot; + txtbooks[k].shelfLifeExpiry()); // only for textbook } catch (Exception e) { // catching the exception System.out.println(e); } } // String [][] novelbooks = { { &quot;novel1 &quot;, &quot;authorofnovel1&quot;}, // row 0 { &quot;novel2&quot;, &quot;authorofnovel2&quot; } // row 1 }; Novel[] novbooks= new Novel[novelbooks.length] ;; for (int k =0; k&lt;novelbooks.length; k++) { novbooks[k] = new Novel(novelbooks[k][0]); novbooks[k].setAuthor(novelbooks[k][1]); } for (int i =0; i&lt;novbooks.length; i++) { System.out.println(&quot;Novel&quot;); System.out.println(novbooks[i]); System.out.println(&quot;Author: &quot; + novbooks[i].getAuthor()); System.out.println(&quot;Expiry: &quot; + novbooks[i].shelfLifeExpiry(4)); } } } Book.main(null); . Bookcount: 0 Booktitle: Book1 Id: 8027 Super: REPL.$JShell$16G$Book@1b2e4e9a Booktitle: Book2 Id: 786 Super: REPL.$JShell$16G$Book@fa73688 Bookcount: 2 Book1 shelflife: 5007731458 Booktitle: Barron&#39;s Computer Science &#34;A&#34; Id: 2653 Super: REPL.$JShell$16G$Book@63bb21ee Booktitle: Angels and Demons Id: 7505 Super: REPL.$JShell$16G$Book@6001dfbf Booktitle: Lion, Witch, and a Wardrobe Id: 1971 Super: REPL.$JShell$16G$Book@517350c8 Libary Book Count: 5 Textbook Booktitle: e=MC^2 a Biography Id: 9039 Super: REPL.$JShell$13D$TextBook@33ca166e Publisher : Pan Books (January 1, 2001) shelflife textbook: 5006280250 textbook expires: true Textbook Booktitle: The Practice of Programming Id: 5674 Super: REPL.$JShell$13D$TextBook@7874f5cf Publisher : Addison-Wesley Professional Computing shelflife textbook: 5007632667 textbook expires: true Novel Booktitle: novel1 Id: 5397 Super: REPL.$JShell$12D$Novel@2e0c3b36 Author: authorofnovel1 Expiry: true Novel Booktitle: novel2 Id: 6802 Super: REPL.$JShell$12D$Novel@357dea04 Author: authorofnovel2 Expiry: true . public class Novel extends Book{ private String author; private final int SHELFLIFEEXPIRY = 3; public Novel(String title){ super(title); } public void setAuthor(String authorName){ author = authorName; } public String getAuthor(){ return author; } public boolean shelfLifeExpiry(int returnstamp){ if (returnstamp &lt; SHELFLIFEEXPIRY){ return false; } return true; } } . public class TextBook extends Book{ private String publishingcomp; private final long SHELFLIFEEXPIRY = 3000; public TextBook(String title){ super(title); } public void setPublisher(String publisher){ publishingcomp = publisher; } public String getPublisher(){ return publishingcomp; } public boolean shelfLifeExpiry(){ if (getshelfLife() &lt; SHELFLIFEEXPIRY){ return false; // returns that it is not expired } return true; } } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/04/21/try3.html",
            "relUrl": "/java/2023/04/21/try3.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Sorting Algorithim",
            "content": "public class FavoriteSorts { public int comparisons = 0; public int swaps = 0; public int getComparisons(){ return this.comparisons; } public int getSwaps(){ return this.swaps; } // bubble sort with input array public void bubbleSort(int[] arr) { for (int x = 0; x &lt; arr.length; x++) { // iterate through the array to compare each element with its adjacent element for (int m = 0; m &lt; arr.length - 1; m++) { // if the current element is greater than the adjacent element, swap them if (arr[m] &gt; arr[m + 1]) { int temp = arr[m]; arr[m] = arr[m + 1]; arr[m + 1] = temp; swaps++; // increment swaps } comparisons++; // increment comparisons } } } // selection sort with input array public void selectionSort(int[] arr) { for (int x = 0; x &lt; arr.length; x++) { // assume the current element is the smallest int min = x; // iterate through the array to find the actual smallest element for (int m = x + 1; m &lt; arr.length; m++) { // if the current element is smaller than the assumed smallest element, update the index of the smallest element if (arr[m] &lt; arr[min]) { min = m; } comparisons++; // increment comparisons } // swap the current element with the smallest element int temp = arr[x]; arr[x] = arr[min]; arr[min] = temp; swaps++; // increment swaps } } // array of size 5000 public static int[] randomArray() { int[] array = new int[5000]; for (int i = 0; i &lt; array.length; i++) { array[i] = (int) (Math.random()); } return array; } public static void main(String[] args) { int[] avgTimes = new int[2]; for (int i = 0; i &lt; 12; i++) { int[] arr = randomArray(); FavoriteSorts fs = new FavoriteSorts(); // create an instance of FavoriteSorts long startTime = System.nanoTime(); fs.bubbleSort(arr); long endTime = System.nanoTime(); long time = endTime - startTime; avgTimes[0] += time; System.out.println(&quot;~BUBBLE Sort Time: &quot; + time + &quot; nanoseconds&quot;); System.out.println(&quot;Number of Comparisons: &quot; + fs.getComparisons()); System.out.println(&quot;Number of Swaps: &quot; + fs.getSwaps()); arr = randomArray(); fs = new FavoriteSorts(); arr = randomArray(); startTime = System.nanoTime(); fs.selectionSort(arr); endTime = System.nanoTime(); time = endTime - startTime; avgTimes[1] += time; System.out.println(&quot;*SELECTION Sort Time: &quot; + time + &quot; nanoseconds&quot;); System.out.println(&quot;Number of Comparisons: &quot; + fs.getComparisons()); System.out.println(&quot;Number of Swaps: &quot; + fs.getSwaps()); } System.out.println(&quot;!!BUBBLE Sort average time: &quot; + avgTimes[0] / 12 + &quot; nanoseconds&quot;); System.out.println(&quot;@@SELECTION sort average time : &quot; + avgTimes[1] / 12 + &quot; nanoseconds&quot;); } } FavoriteSorts.main(null); . ~BUBBLE Sort Time: 10673625 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4664625 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10507667 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4574292 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10682167 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4565917 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10549375 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4582584 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10506375 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4568167 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10597375 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4572958 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10490125 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4567125 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10597583 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4569750 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10552792 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4582125 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10619958 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4575417 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10573166 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4565833 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 ~BUBBLE Sort Time: 10575250 nanoseconds Number of Comparisons: 24995000 Number of Swaps: 0 *SELECTION Sort Time: 4801458 nanoseconds Number of Comparisons: 12497500 Number of Swaps: 5000 !!BUBBLE Sort average time: 10577121 nanoseconds @@SELECTION sort average time : 4599187 nanoseconds . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * People class extends Collectable and defines abstract methods */ public class People extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { People.key = key; } public enum KeyType implements KeyTypes {title, name, age, hairColor} // Instance data private final String name; private final int age; private final String hairColor; /* constructor * */ public People(String name, int age, String hairColor) { super.setType(&quot;People&quot;); this.name = name; this.age = age; this.hairColor = hairColor; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return People.key; } /* Getters / Accessors * */ public String getName() { return this.name; } public int getAge() { return this.age; } public String getColor() { return this.hairColor; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.hairColor.equals(this.getKey())) { output += this.hairColor; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.hairColor + &quot;, &quot; + this.age; } return output; } // Test data initializer public static People[] animals() { return new People[]{ new People(&quot;math&quot;, 5, &quot;Black&quot;), new People(&quot;apush&quot;, 18, &quot;Black&quot;), new People(&quot;csa&quot;, 18, &quot;Black&quot;), new People(&quot;apgov&quot;, 17, &quot;Red&quot;), new People(&quot;apush&quot;, 19, &quot;Black&quot;), new People(&quot;apel&quot;, 18, &quot;Blonde&quot;) }; } /* main to test People class * */ public static void main(String[] args) { // Inheritance Hierarchy People[] objs = animals(); // print with title People.setOrder(KeyType.title); People.print(objs); // convert to Coolection and sort in name order People.setOrder(KeyType.name); List&lt;People&gt; animals = new ArrayList&lt;People&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(animals); People.setOrder(KeyType.title); for (People people : animals) System.out.println(people); } } People.main(null); . class [LREPL.$JShell$79$People; 6 Collectable: People listed by title People: Nathan, Black, 5 People: Rohit, Black, 18 People: Jun, Black, 18 People: Rose, Red, 17 People: Alvin, Black, 19 People: Vinny, Blonde, 18 People: Alvin, Black, 19 People: Jun, Black, 18 People: Nathan, Black, 5 People: Rohit, Black, 18 People: Rose, Red, 17 People: Vinny, Blonde, 18 . import java.util.HashMap; public class Students { // create a new HashMap HashMap&lt;String, People&gt; names = new HashMap&lt;&gt;(); /* Add Students * */ public Students() { // add some key-value pairs to the HashMap names.put(&quot;Ritvik&quot;, new People(&quot;math&quot;, 17, &quot;Black&quot;)); names.put(&quot;Alvin&quot;, new People(&quot;apush&quot;, 18, &quot;Black&quot;)); names.put(&quot;Jun&quot;, new People(&quot;csa&quot;, 18, &quot;Black&quot;)); names.put(&quot;Nathan&quot;, new People(&quot;apgov&quot;, 17, &quot;Red&quot;)); names.put(&quot;Mark&quot;, new People(&quot;apush&quot;, 19, &quot;Black&quot;)); names.put(&quot;Vinny&quot;, new People(&quot;apel&quot;, 18, &quot;Blonde&quot;)); } /* Remove Pet * */ public People remove(String key) { // check if a key exists in the HashMap then remove People people = null; if (names.containsKey(key)) { people = names.get(key); names.remove(key); } return people; } /* Print Students * */ public void print() { // iterate over the keys in the HashMap for (String name: names.keySet()) { People obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getColor() + &quot; haired &quot; + obj.getName() + &quot; student and is &quot; + obj.getAge() + &quot; years old.&quot;); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Students Students students = new Students(); students.print(); // remove a Pet String key = &quot;Mathew&quot;; People people = students.remove(key); if (people == null) { System.out.println(key + &quot; not found&quot;); } else { System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + people); } students.print(); } } Students.main(null); . Ritvik is a Black haired math student and is 17 years old. Jun is a Black haired csa student and is 18 years old. Nathan is a Red haired apgov student and is 17 years old. Alvin is a Black haired apush student and is 18 years old. Mark is a Black haired apush student and is 19 years old. Vinny is a Blonde haired apel student and is 18 years old. Mathew not found Ritvik is a Black haired math student and is 17 years old. Jun is a Black haired csa student and is 18 years old. Nathan is a Red haired apgov student and is 17 years old. Alvin is a Black haired apush student and is 18 years old. Mark is a Black haired apush student and is 19 years old. Vinny is a Blonde haired apel student and is 18 years old. .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/04/01/sortalgo.html",
            "relUrl": "/java/2023/04/01/sortalgo.html",
            "date": " • Apr 1, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "CSUSM Event Write Up",
            "content": "Ashley and John talked about their experience and the opportunities available at Cal State San Marcos (CSUSM). John began his academic journey at Palomar College and pursued a computer science degree, which took him six years to complete. They mentioned that CSUSM is a leader in social mobility and offers various pathways such as chemistry, biochemistry, physics, applied physics, computer science, computer engineering, math, electrical engineering, software engineering, and mechanical engineering. They also highlighted the various clubs, hackathons, and internship opportunities available at CSUSM, such as the cyber security club, robotics, women in STEM, and the Society of Physics Students. Ashley and John emphasized the importance of networking and attending career fairs to find internships and job opportunities. They also mentioned the Quantum Bridge program, research opportunities in meteorites, quantum information sciences, and microplastics, and the availability of privately funded scholarships and government-funded grants. . Overall they emphasized that in college we should take every opportunity we are given to further our education and curiosity. Both Ashley and John have different interests in computer science and they are on their own separate paths. We should follow our own pace and explore our personal interests that we believe will help us in the real world and industry. . Little electrical project . .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2023/03/28/CSUSMevent.html",
            "relUrl": "/entry/2023/03/28/CSUSMevent.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Challenge 4",
            "content": "/** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Get the number of elements in the Queue. */ public int size() { int count = 0; for (T data : this) { count++; } return count; } /* * Returns true if Queue is empty. */ public boolean isEmpty() { return this.head == null; } /** * Return data in Queue. */ public String toString() { String str = &quot;&quot;; for (T data : this) { str += data + &quot; &quot;; } return str; } /** * Returns data as List. */ public List&lt;T&gt; asList() { List&lt;T&gt; list = new ArrayList&lt;&gt;(); for (T data : this) { list.add(data); } return list; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add an element to queue */ public void add(T data) { System.out.println(&quot;Enqueued data: &quot; + data); this.queue.add(data); this.count++; } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Delete an element from queue */ public void delete() { // print data else print null System.out.println(&quot;Dequeued data: &quot; + this.queue.delete()); this.count--; } /** * Print any array objects from queue */ public void printQueue() { System.out.print(this.name + &quot; count: &quot; + count + &quot; n&quot; + &quot;Data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . public class ReverseQueue { public static void main(String[] args) { Stack&lt;Object&gt; stack = new Stack&lt;Object&gt;(); Object[] numbers = new Integer[] { 1, 2, 3, 4, 5}; // create a queue manager for the array of integers QueueManager&lt;Object&gt; q = new QueueManager&lt;Object&gt;(&quot;Numbers&quot;, numbers); q.printQueue(); // place elements from Queue into Stack while (!q.queue.isEmpty()) { // loop until the queue is empty stack.push(q.queue.delete()); // remove the first element from the queue and add it to the top of the stack } // place elements from Stack back into Queue while (!stack.isEmpty()) { // loop until the stack is empty q.queue.add(stack.pop()); // remove the top element from the stack and add it to the end of the queue } q.printQueue(); } } ReverseQueue.main(null); . Numbers count: 5 Data: 1 2 3 4 5 Numbers count: 5 Data: 5 4 3 2 1 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/03/27/chck2chall4.html",
            "relUrl": "/java/2023/03/27/chck2chall4.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Challenge 3",
            "content": "/** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Get the number of elements in the Queue. */ public int size() { int count = 0; for (T data : this) { count++; } return count; } /* * Returns true if Queue is empty. */ public boolean isEmpty() { return this.head == null; } /** * Return data in Queue. */ public String toString() { String str = &quot;&quot;; for (T data : this) { str += data + &quot; &quot;; } return str; } /** * Returns data as List. */ public List&lt;T&gt; asList() { List&lt;T&gt; list = new ArrayList&lt;&gt;(); for (T data : this) { list.add(data); } return list; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add an element to queue */ public void add(T data) { System.out.println(&quot;Enqueued data: &quot; + data); this.queue.add(data); this.count++; } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Delete an element from queue */ public void delete() { // print data else print null System.out.println(&quot;Dequeued data: &quot; + this.queue.delete()); this.count--; } /** * Print any array objects from queue */ public void printQueue() { System.out.print(this.name + &quot; count: &quot; + count + &quot; n&quot; + &quot;Data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . public class ShuffleQueue { public static QueueManager&lt;Object&gt; shuffle(QueueManager&lt;Object&gt; q) { // convert the QueueManager to an ArrayList List&lt;Object&gt; list = new ArrayList&lt;Object&gt;(q.queue.asList()); // Shuffle the ArrayList Collections.shuffle(list); // creating a new QueueManager with the shuffled elements QueueManager&lt;Object&gt; shuffled = new QueueManager&lt;Object&gt;(&quot;Shuffled&quot;); shuffled.addList(list.toArray()); return shuffled; } public static void main(String[] args) { // array of integers Object[] numbers = new Integer[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; // creating a QueueManager with the integers QueueManager&lt;Object&gt; q = new QueueManager&lt;Object&gt;(&quot;Numbers&quot;, numbers); q.printQueue(); QueueManager&lt;Object&gt; shuffled = shuffle(q); shuffled.printQueue(); // array of strings Object[] words = new String[] { &quot;Ephemeral&quot; }; // creating a QueueManager with the string array QueueManager&lt;Object&gt; qw = new QueueManager&lt;Object&gt;(&quot;Words&quot;, words); qw.add(&quot;Serendipity&quot;); qw.add(&quot;Quixotic&quot;); qw.add(&quot;Melancholy&quot;); qw.add(&quot;Perfidious&quot;); qw.printQueue(); // shuffling the queue and store the result in a new QueueManager QueueManager&lt;Object&gt; shuffledwords = shuffle(qw); shuffledwords.printQueue(); } } ShuffleQueue.main(null); . Numbers count: 10 Data: 1 2 3 4 5 6 7 8 9 10 Shuffled count: 10 Data: 9 6 8 10 2 1 4 3 7 5 Enqueued data: Serendipity Enqueued data: Quixotic Enqueued data: Melancholy Enqueued data: Perfidious Words count: 5 Data: Ephemeral Serendipity Quixotic Melancholy Perfidious Shuffled count: 5 Data: Serendipity Quixotic Ephemeral Perfidious Melancholy .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/03/27/chck2chall3.html",
            "relUrl": "/java/2023/03/27/chck2chall3.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Challenge 2",
            "content": "import java.util.*; public class MergeQueues { public static Queue&lt;Integer&gt; merge(Queue&lt;Integer&gt; q1, Queue&lt;Integer&gt; q2) { // creating a new queue to store the merged elements Queue&lt;Integer&gt; mergedQueue = new LinkedList&lt;&gt;(); // merging until both q1 and q2 queues are empty while (q1.size() &gt; 0 || q2.size() &gt; 0) { // if q1 is empty then add all elements of q2 to the merged queue if (q1.size() == 0) { mergedQueue.add(q2.poll()); } // if q2 is empty then add all elements of q1 to the merged queue else if (q2.size() == 0) { mergedQueue.add(q1.poll()); } // comparing the smallest element of each queue and adding the smaller one to the merged queue else if (q1.peek() &lt;= q2.peek()) { mergedQueue.add(q1.poll()); } else { mergedQueue.add(q2.poll()); } // poll is pulling and deleting the first element of the queue, this while loop continues till either queue is empty } return mergedQueue; } public static void main(String[] args) { // two queues of integers Queue&lt;Integer&gt; q1 = new LinkedList&lt;&gt;(Arrays.asList(1, 4, 11, 3, 5, 9, 8)); Queue&lt;Integer&gt; q2 = new LinkedList&lt;&gt;(Arrays.asList(2, 4, 6, 3, 10)); System.out.println(&quot;Q1: &quot; + q1); System.out.println(&quot;Q2: &quot; + q2); // merge the two queues using the merge method Queue&lt;Integer&gt; mergedQueue = merge(q1, q2); // converting the merged queue to a list and sort it by least to greatest or greatest to least List&lt;Integer&gt; sortedQ = new ArrayList&lt;&gt;(mergedQueue); Collections.sort(sortedQ); System.out.println(&quot;Merged queue in least to greatest: &quot; + sortedQ); Collections.sort(sortedQ, Collections.reverseOrder()); System.out.println(&quot;Merged queue in greatest to least: &quot; + sortedQ); } } MergeQueues.main(null); . Q1: [1, 4, 11, 3, 5, 9, 8] Q2: [2, 4, 6, 3, 10] Merged queue in least to greatest: [1, 2, 3, 3, 4, 4, 5, 6, 8, 9, 10, 11] Merged queue in greatest to least: [11, 10, 9, 8, 6, 5, 4, 4, 3, 3, 2, 1] .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/03/27/chck2chall2.html",
            "relUrl": "/java/2023/03/27/chck2chall2.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Generics and Collections + Challenge 1",
            "content": "Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); // Collections has a toArray conversion Object[] arr = queue.toArray(); . // Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr){ // Type is Object from conversion System.out.println(a); // remove() method is called to remove and print the next element in the queue } . Iterate over Array John Jane Bob . // Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) // Interate while size System.out.println(queue.remove()); // remove() method is called to remove and print the next element in the queue System.out.println(queue); . Empty Queue John Jane Bob [] . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is smallSize to establish key order public abstract String toString(); // static print method smallSize by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties // System.out.println(objs.getClass() + &quot; &quot; + objs.length); System.out.println(objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Turtle extends Generics { public static KeyTypes key = KeyType.title; public static void setOrder(KeyTypes key) { Turtle.key = key; } public enum KeyType implements KeyTypes {title, name, age, weight, smallSize} private final String name; private final int age; private final double weight; private final boolean smallSize; public Turtle(String name, int age, double weight, boolean smallSize) { super.setType(&quot;Turtle&quot;); this.name = name; this.age = age; this.weight = weight; this.smallSize = smallSize; } @Override protected KeyTypes getKey() { return Turtle.key; } @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.weight.equals(this.getKey())) { output += this.weight; } else if (KeyType.smallSize.equals(this.getKey())) { output += this.smallSize; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.smallSize + &quot;, &quot; + this.age + &quot;, &quot; + this.weight; } return output; } // Test data initializer public static Turtle[] Turtles() { return new Turtle[]{ new Turtle(&quot;Shellbert&quot;, 5, 2.22, false), new Turtle(&quot;Eggbert&quot;, 4, 3.34, true), new Turtle(&quot;Seabert&quot;, 3, 6.54, true) }; } public static void main(String[] args) { // Inheritance Hierarchy Turtle[] objs = Turtles(); // print with title Turtle.setOrder(KeyType.title); Turtle.print(objs); // print name only Turtle.setOrder(KeyType.name); Turtle.print(objs); // print by weight only Turtle.setOrder(KeyType.weight); Turtle.print(objs); } } Turtle.main(null); . 3 Generic: Turtle listed by title Turtle: Shellbert, false, 5, 2.22 Turtle: Eggbert, true, 4, 3.34 Turtle: Seabert, true, 3, 6.54 3 Generic: Turtle listed by name Shellbert Eggbert Seabert 3 Generic: Turtle listed by weight 2.22 3.34 6.54 . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Turtle.setOrder(Turtle.KeyType.name); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Turtle.Turtles()); qGenerics.printQueue(); qGenerics.queue.add(new Turtle(&quot;Beachbert&quot;, 5, 5.22, false)); qGenerics.printQueue(); qGenerics.queue.add(new Turtle(&quot;Sheldon&quot;, 7, 4.42, false)); qGenerics.queue.delete(); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); } } QueueTester.main(null); . My Generics count: 3 My Generics data: Shellbert Eggbert Seabert My Generics count: 3 My Generics data: Shellbert Eggbert Seabert Beachbert My Generics count: 3 My Generics data: Eggbert Seabert Beachbert Sheldon My Generics count: 3 My Generics data: Seabert Beachbert Sheldon . FRQ 2018 Q4 . class Main { public static void main(String[] args) { int[][] arr1 = {{0,1,2}, {1, 2, 0}, {2, 0, 1}}; int[][] arr2 = {{0,1,2}, {1, 2, 0}, {2, 1, 0}}; printArray(arr1); System.out.println(ArrayTester.isLatin(arr1)); printArray(arr2); System.out.println(ArrayTester.isLatin(arr2)); } public static void printArray(int[][] arr) { for(int[] i: arr) { for(int j: i) { System.out.print(j + &quot; t&quot;); } System.out.println(); } } } class ArrayTester { public static int[] getColumn(int[][] arr, int col) { int[] column = new int[arr.length]; for(int i = 0; i &lt; arr.length; i++) { column[i] = arr[i][col]; } return column; } public static boolean hasAllValues(int[] arr1, int[] arr2) { for(int i = 0; i &lt; arr1.length; i++) { boolean found = false; for(int j = 0; j &lt; arr2.length; j++) { if(arr1[i] == arr2[j]) { found = true; break; } } if(!found) { return false; } } return true; } public static boolean containsDuplicates(int[] arr) { for(int i = 0; i &lt; arr.length - 1; i++) { if(arr[i] == arr[i+1]) { return true; } } System.out.print(&quot;Result: &quot;); return false; } public static boolean isLatin(int[][] square) { if(containsDuplicates(square[0])) { return false; } for(int i = 1; i &lt; square.length; i++) { if(!hasAllValues(square[0], square[i]) || !hasAllValues(square[0], getColumn(square, i))) { return false; } } return true; } } Main.main(null); . 0 1 2 1 2 0 2 0 1 Result: true 0 1 2 1 2 0 2 1 0 Result: false . Checkpoint #2 . Challenge 1 . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;Serendipity&quot;, &quot;Quixotic&quot;, &quot;Melancholy&quot;, &quot;Perfidious&quot;, &quot;Ephemeral&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); } } QueueTester.main(null); . Words count: 5 Words data: Serendipity Quixotic Melancholy Perfidious Ephemeral Integers count: 10 Integers data: 0 1 2 3 4 5 6 7 8 9 . import java.util.Iterator; public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; // Create new node with T data and reference to previous LinkedList&lt;T&gt; node public LinkedList(T data, LinkedList&lt;T&gt; node) { setData(data); setPrevNode(node); setNextNode(null); } // Create new node using copy public LinkedList(LinkedList&lt;T&gt; node) { setData(node.data); setPrevNode(node.prevNode); setNextNode(node.nextNode); } // Getters public T getData() { return this.data; } public LinkedList&lt;T&gt; getPrev() { return this.prevNode; } public LinkedList&lt;T&gt; getNext() { return this.nextNode; } // Setters public void setData(T data) { this.data = data; } public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } } /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { try { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } catch (Exception E) { return null; } } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { try { return this.head.getData(); } catch (Exception E) { return null; } } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } // Challenge 1 public T delete() { count--; return this.queue.delete(); } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;Serendipity&quot;, &quot;Quixotic&quot;, &quot;Melancholy&quot;, &quot;Perfidious&quot;, &quot;Ephemeral&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); while (qWords.delete() != null) { qWords.printQueue(); } } } QueueTester.main(null); . Words count: 5 Words data: Serendipity Quixotic Melancholy Perfidious Ephemeral Words count: 4 Words data: Quixotic Melancholy Perfidious Ephemeral Words count: 3 Words data: Melancholy Perfidious Ephemeral Words count: 2 Words data: Perfidious Ephemeral Words count: 1 Words data: Ephemeral Words count: 0 Words data: .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/03/19/generic.html",
            "relUrl": "/java/2023/03/19/generic.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "2015 Practice Exam MCQ Review and Corrections",
            "content": ". Question 2 . Answer D is incorrect. This would be the result if the outer loop started at 1 and continued as long as r &lt;= 3 was true, increasing r by 1 after each iteration, and if the inner loops were written with the second inner loop being before the first inner loop. Answer A is correct. The outer for loop iterates three times with r being assigned the values 3, 2, and 1. The two inner loops iterates a different number of times for each iteration of the outer loop depending on the value of r. During the first iteration of the outer loop, when r is 3, the first inner loop iterates two times for when c is equal to 1 and 2. This results in -- being printed. The second inner loop iterates one time for when c equals 3. This results in * being printed. Then the cursor moves to the next line and that concludes the first iteration of the outer loop. This pattern then continues. . Question 5 . Answer C is incorrect. The value of (x &amp;&amp; y) is true only when x is true and y is true, however, the value of (x || y) &amp;&amp; x could be true if x is true and y is false. Therefore, these statements are not equivalent. Answer A is correct. For the expression to evaluate to true, the expressions on either side of the &amp;&amp; operator must be true. If x is true then x || y is true regardless of the value of y, meaning (x || y) &amp;&amp; x evaluates to true. If x is false, the expression evaluates to false regardless of the value of (x || y). . Question 7 . Answer A is incorrect. This would be the result if the outer loop counter variable, outer, was incremented by 2 for each iteration. Answer C is correct. The outer loop iterates six times for when outer is assigned the values 1 through 6. For each iteration, the number of times the inner loop iterates is dependent on the value of outer. . Question 8 . Correct answer would be B. In the first iteration of the for loop, j is 0. The value of result[0] is assigned the product of row 1, column 0, which is 1 and row 0, column 2, which is 1. Therefore, result[0] is assigned the value 1. The second iteration of the for loop, when j is 1, result[1] is assigned the product of row 1, column 1, which is 2, and row 1, column 2, which is 3. Therefore, result[1] is assigned the value 6. The third iteration of the for loop, when j is 2, result[2] is assigned the product of row 1, column 2, which is 3, and row 2, column 2, which is 1. Therefore, result[2] is assigned the value 3. The final iteration of the for loop, when j is 3, result[3] is assigned the product of row 1, column 3, which is 4, and row 3, column 2, which is 1. Therefore, result[3] is assigned the value 4. . Question 31 . . This was a misunderstanding error. Answer E is correct. The first set of nested for loops sets each element in board to “O”. The next for loop starts val at 0 and increments by 1 until val is 4, when val is 5 the loop terminates. . Question 34 . Answer D is correct. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. To determine the size of an ArrayList we need to call the method size(). Each word will be separated by a comma, but no comma should appear after the last element in the list. Therefore, a comma is added as long as k does not equal the last index, sizeOfList – 1, since list indices start at 0. . Question 39 . Answer C is the correct option. The first for loop uses the set method to change the value of each element in students to “Alex”. When the set method is called, it returns the value that was originally at this index. So, the first loop will print Alex Bob Carl. At this point all elements have been set to “Alex”. The second for loop uses an enhanced for loop to access every element and will print Alex Alex Alex. .",
            "url": "https://rohitd3.github.io/rohitfastpages/cb/2023/03/13/reviewmcthirtynine.html",
            "relUrl": "/cb/2023/03/13/reviewmcthirtynine.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Data Types",
            "content": "Early Seed Award . static String add(int a1, int b1) { String s1 = Integer.toString(a1); String s2 = Integer.toString(b1); int number0 = Integer.parseInt(s1, 2); int number1 = Integer.parseInt(s2, 2); int total = number0 + number1; String finalvalue = Integer.toBinaryString(total); return finalvalue; } System.out.println(add(1,1)); System.out.println(add(0,1)); System.out.println(add(1,10)); System.out.println(add(1,110)); . 10 1 11 111 . Start with some small code excercises . Write a Jupyter notebook code example on the following primitive types with a code example (4 to 5 lines), preference would be using array and methods like substring and random as applicable: int, double, boolean, char.Now convert each of the examples to corresponding Wrapper classes, using arrays. Expression of these in Class or PBL forms is an option. But the review must be easy for me to see work. . integer . // int System.out.println(&quot;integer:&quot;); int[] intArray = new int[5]; int sum = 0; for (int i = 0; i &lt; intArray.length; i++) { intArray[i] = (int) (Math.floor(Math.random() * 100)); System.out.println(i + &quot;: &quot; + intArray[i]); sum += intArray[i]; } System.out.println(&quot;Sum: &quot; + sum); // Wrapper Class ArrayList&lt;Integer&gt; intArrayList = new ArrayList&lt;&gt;(); for (int i : intArray){ intArrayList.add(new Integer(i)); } . integer: 0: 36 1: 99 2: 87 3: 0 4: 95 Sum: 317 . double . public class doubleArray { public static void main(String[] args) { // declare an array of doubles double[] dubarray = {1.1, 2.2, 3.34, 5.56}; // print out the values of the array for (int i = 0; i &lt; dubarray.length; i++) { System.out.println(&quot;Value &quot; + i + &quot; = &quot; + dubarray[i]); // loop through the array using a for loop and print out each element in the array. Note that we use the double primitive type to declare the array and assign values to it. } } } doubleArray.main(null); . Value 0 = 1.1 Value 1 = 2.2 Value 2 = 3.34 Value 3 = 5.56 . boolean . public class isatortoise { public static void main(String[] args) { boolean tortoise = true; if(tortoise == true){ System.out.println(&quot;Shellby is a tortoise&quot;); } else{ System.out.println(&quot;Shellby is an aquatic turtle&quot;); } } } isatortoise.main(null); . Shellby is a tortoise . char . import java.util.Random; public class charalphabets { public static void main(String[] args) { Random rand = new Random(); // create random object to generate random number char[] alphabets = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;}; char randomletter = alphabets[rand.nextInt(alphabets.length)]; // next Int method of the rand object generates a random integer that retrieves a random vowel System.out.println(&quot;The random letter is &quot; + randomletter); } } charalphabets.main(null); . The random letter is d . What are methods? . In Java, a method is a block of code that, when called, executes the specified tasks listed in it. Consider a method as a little program that performs operations on data and might or might not return a value. Each technique has a unique name. | . What are control structures? . A block of code known as a control structure allows us to alter the course that those instructions take. Conditional branches, loops, and branching statements are the three types. Java has control structures that can alter the course of execution and manage how instructions are carried out. | . What FRQ did you explore? . 2016 FRQ 1 | . Exploring Mr. M&#39;s code . Diverse Array . Contains methods and control structures | Multiple control structures . For | While | If statements | . | Because it contains arrays, a data type, it falls under the category of data types. . | The majority of code segments, regardless of what they are on, deal with methods and control structures. | . Random . Gives value between 0 and 1 | Double a Math.random value and add 7 to it if you want a random number between 7 and 9. | . Do nothing by value . As a result of changing the subvalue rather than the variable&#39;s real value, you are essentially modifying the variable but it does not actually change. | . Int by Reference . Despite the fact that you are acting locally, the int changes its value. | Essentially states that there is a workaround for the issue that local variable editing is not possible. | . Menu . Use of Try, Catch, and Runnable to regulate program execution | . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } . 2016 FRQ Part 1 . // PART A public class RandomStringChooser { private ArrayList&lt;String&gt; words; public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); for (String w : wordArray) words.add(w); } public String getNext() { if (words.size() == 0) return &quot;NONE&quot;; int i = (int)(Math.random() * words.size()); return words.remove(i); } } // PART B public RandomLetterChooser(String str) { super(getSingleLetters(str)); } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2023/03/06/extraseed.html",
            "relUrl": "/java/2023/03/06/extraseed.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "52 CB MC Tri 2 Corrections + Reflection",
            "content": "Total score: 44/52 . Q14 count 2D array columns . Answer B is incorrect. The enhanced for loop in line 8 is intended to traverse the rows of the two-dimensional array arr. Each row o f arr is a one-dimensional array of int values, int[] row. Answer C is correct. Two-dimensional arrays are stored as arrays of one-dimensional arrays. Line 8 is intended to assign to row, a one-dimensional array of int values, a single row of the two-dimensional array arr. The original version of line 8 attempts to assign a row of col, but col is not a two-dimensional array. . Q16 count words in ArrayList wordList . Answer B is incorrect. This result would be printed if the if statement was changed to if (word.indexOf(&quot;a&quot;) &lt; 0). Answer D is correct. The code segment uses an enhanced for loop to traverse wordList. The value of count is incremented each time a word contains the character &quot;a&quot;. There are four elements of wordList that contain an &quot;a&quot;, so 4 is printed. . Q24 loop on string abcdef . Iteration error. After writing out what the code results, it should be abbccddeef . Q25 manipulate method and animals List . Answer E is incorrect. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. This would be the result if when words that started with “b” were found, they were added to the end instead of inserted at index animals.size() – k such as if the statement in the for loop was animals.add(animals.remove(k));. Answer B is correct. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. . Q26 mystery method with String parameter and substring . Answer D is incorrect. The reverse of “nono” is “onon”, since these two strings are not equal, the method will return false. Answer E is correct. This algorithm assigns temp the letters of str in reverse by extracting each letter of str starting at the end and moving to the beginning. Each letter is appended to the end of temp. So, if str was “abc”, “c” would be appended followed by “b”, and then “a”, making temp equal to “cba”. This method will return true if str is equal to temp, which is a string with the letters of str in reverse. The string “noon” is the only string that is the same in reverse. . Q30 print from 2D array . After writing out the process for the given code I get the following result: . 15 14 13 12 11 . 25 24 23 22 . 35 34 33 . 45 44 . Q37 processWords method . This was a silly mistake. The value 0 is always printed. . Q41 remove some ArrayList elements . Answer D is incorrect. The expression num % key == 0 is correctly used to identify values of num that are divisible by key. Answer E is correct. When the element at position i is removed from numList, subsequent elements are shifted left. After the removal, the element that used to be at position i + 1 is now at position i. Because the method increments i regardless of whether the element at position i was removed, the method does not always work as intended. For example, if two adjacent elements are both divisible by key, only the first element is removed. The method could be corrected by incrementing i only when the element at position i is not removed or by decrementing i when an element is removed. .",
            "url": "https://rohitd3.github.io/rohitfastpages/cb/2023/01/31/correctionsforfiftytwo.html",
            "relUrl": "/cb/2023/01/31/correctionsforfiftytwo.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "66 CB MC Tri 2 Corrections + Reflection",
            "content": "Total score: 59/66 . Q12 Compound Boolean expression with variables x and y . Answer B is incorrect. This expression will always evaluate to true since x is always either greater than 1000 or less than 1500. Answer A is correct. The original expression evaluates to true when either y is greater than 10000 or x is between 1000 and 1500. If the value of y is greater than 10000, this equivalent expression will evaluate to true since it is used in both of the or (||) expressions. If y is not greater than 10000, the only way the equivalent expression can evaluate to true is if x is between 1000 and 1500. . Q19 equivalent expressions . C is incorrect. The expressions are not equivalent when a has the value 2, b has the value 1, c has the value 3, and d has the value 4. A is the right answer according to De Morgan&#39;s laws, the given expression is equivalent to (a &lt; b) || (c &lt; d). . Q25 error in ItemInventory class . Answer C is incorrect. The constructor parameter is used by the assignment statement to initialize the instance variable numItems. Answer B is correct. The mutator method updateItems must have a return type. In this case, since no value is returned, the return type should be void. . Q34 for loop equivalent to enhanced for loop . A is incorrect. The original code segment prints the sum of twice the value of the elements in the array. This code segment prints a value that is twice the sum of the integers from 0 to arr.length - 1. D is the correct answer. The original code segment uses an enhanced for loop to iterate through the elements of array arr, uses variable sum to accumulate the sum of twice the value of the elements in the array, and prints the value of sum. This code segment produces the same output using a regular for loop. As the index k varies from 0 to arr.length - 1, twice the value of arr[k] accumulates in the variable sum. . Q36 GridWorld getDirection and getMoveLocation calls . Line 4 will causes a compile time error. . Q39 isLeapYear . Answer D is incorrect. The value 2001 is not a multiple of 4, so the expression (val % 4) == 0 evaluates to false and the statement return (val % 400) == 0; is executed and the method returns false, as intended. Answer A is the correct choice because the value 1900 is a multiple of 4, so the expression (val % 4) == 0 evaluates to true and the statement return true; is executed, thereby exiting the method with a return value of true. This is an error because even though 1900 is a multiple of 100, it is not a multiple of 400, so the method should have returned false. Any value that is a multiple of 100 but not a multiple of 400 will pass the first test and return true even though the method was intended to return false. . Q41 mystery call to get 11 . Answer choice B is correct because a is true, !a is false and the body of the first if statement is not executed. Since b is false, the body of the second if statement is not executed. Since c is true, the body of the third if statement is executed and the value 7 + 4 = 11 is returned. .",
            "url": "https://rohitd3.github.io/rohitfastpages/cb/2023/01/22/correctionsforsixtysixnoimage.html",
            "relUrl": "/cb/2023/01/22/correctionsforsixtysixnoimage.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Units 6-10 Review + Vocab List",
            "content": "Points . Unit Score Grading Comments . Unit 6 | 0.9/1 | Link | Met all the requirements, showed participation | . Unit 7 | 0.97/1 | Link | Hacks are done with key learnings but quizizz scored 90% | . Unit 8 | 1/1 | Link | N/A | . Unit 9 | Student Lesson Presentation | Link | Started by rotating through dialog on Cars. Sahil shared Car class. Talked about super keyword and had example to show constructor calling super and then assigning custom attribute. Hack was done immediately with bottle/water bottle. Rohit spoke of @Override examples all with println statements. Nathan spoke on super and calling horn method. Kurtis talked about inheritance hierarchy. Nathan spoke again about defining methods with different amount of parameters. Sahil introduced another hack. The activity hacks are well formed and seem well thought out for short examples in classroom. Ritvik finished with the Object superclass and toString method. - Mortensen | . Unit 10 | 0.95/1 | Link | missed one MC question + good implementation of recursion in code | . TOTAL SCORE | 3.82/4 | | | . Unit 6: Arrays . Jupyter Notebook Hacks . array is a type of data structure which contains a collection of data | Making Arrays: using constructors or using pre-initialized arrays Access elements through arrayName[index] | How to declare an array, ex: int[] array dom = new int [9]; (saying array length) or int[] array dom = {1,2,3,4,5} | . Unit 6 Code Examples . String[] candy = {&quot;M&amp;M&quot;, &quot;Reeses&quot;, &quot;Kisses&quot;, &quot;Drops&quot;}; for (int i = 0; i &lt; candy.length; i++) { System.out.println(candy[i]); } . M&amp;M Reeses Kisses Drops . public class ArrayExample { public static void main(String[] args) { int[] numbers = {1,2,3,4,5}; int index = 0; while (index &lt; numbers.length) { System.out.println(numbers[index]); index++; } } } ArrayExample.main(null); . 1 2 3 4 5 . Unit 7 Array List . Fastpages Blog . Methods to know: . size(): # of elements in the list | add(obj): adds an element at the end | add(index, object): adds element at specific index | remove(index): removes element from specific index | set(index, object): replaces element at index with new object | get(index): returns element at inde | . Unit 8 . Fastpages Blog . Array: a data structure used to implement a collection (list) of primitive or object reference data | Element: a single value in the array | Index: the position of the element in the array (starts from 0) | Array Length = the number of elements in the array | public: so can be accessed in any class | Access and update elements: arrayname[r][c] | . Unit 9 . Link to our lesson . Inheritance, order in which attributes, methods and strings called | constructor - where attributes are defined | overriding - subclass or child class can get overridden with another method in subclass | polymorphism - running multiple things with same name | super keyword, use superclass in subclass | . Unit 10 . Fastpages Blog . Learnings . Can be used in situations where loops are used | Must call itself and have a base case | . Recursion . Method that calls itself. Must have two parts: a base case and a recursive call. | . // O(n) time since it must go through n iterations to calculate factorial // factorial calculation public int factorial (int n) { if (n == 0 || n == 1) { return 1; } return n * factorial(n-1); } System.out.println(factorial(4)); System.out.println(factorial(10)); . 24 3628800 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/15/finallesson610.html",
            "relUrl": "/java/2022/12/15/finallesson610.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lesson 7",
            "content": "Learnings . Like an array but length is variable | Must sue wrapper class | Works with enhanced loops | Used with arraylist for primitives | . Key Learning on Wrapper Classes . Used with arraylist for primitives | Java auto converts between wrappers and primitives | An ArrayList cannot directly represent primitive datatypes. In the above example, I wanted an ArrayList of integers. The datatype that I provide is not int - it is instead Integer. | At a lower level, wrapper classes are classes that encapsulate data types, so that you can create objects of those datatypes. You can only have an ArrayList of objects, so this is one good use case for wrapper classes. | . Hack 1 . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; import java.lang.Math; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(); arr.add(5); arr.add(4); arr.add(3); int min = 0; int max = arr.size(); int range = max - min; for (int i = 0; i &lt; 5; i++) { int rand = (int)(Math.random() * range) + min; System.out.println(arr.get(rand)); } } } hack1.main(null); . 4 4 3 5 3 . Hack 2 . import java.util.ArrayList; public class main { public static void main(String[] args) { ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i = 0; i &lt; color.size(); i++) { if(color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); } } main.main(null); . [green box, blue water] . Hack 3 . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); public int sum = 0; for (int i = 0; i&lt;num.size(); i++) { sum = sum + num.get(i); } System.out.println(sum); . 9 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/14/lesson7hwk.html",
            "relUrl": "/java/2022/12/14/lesson7hwk.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Lightboard FRQ 4 Completed",
            "content": "public class LightBoard{ /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols){ lights = new boolean[numRows][numCols]; for (int i = 0; i &lt; numRows; i++) {//for loops for (int j = 0; j &lt; numCols; j++) { lights[i][j] = Math.random() &lt; 0.4;// random chance of being on 40 percent } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col){ //first find out how many are on in column int columnLights = 0; for (int i = 0; i &lt; lights.length; i++) { if (lights[i][col]) { columnLights++; } } //next check conditions for light if (lights[row][col] == true &amp;&amp; columnLights % 2 == 0) {//first condition return false; } else if (lights[row][col] == false &amp;&amp; columnLights % 3 == 0) {//second condition return true; } else {//last condition return lights[row][col]; } } public static void main(String[] args) { //tester method LightBoard tester = new LightBoard(10,10); System.out.println(tester.evaluateLight(3,6)); System.out.println(tester.evaluateLight(2,5)); System.out.println(tester.evaluateLight(0,8)); System.out.println(tester.evaluateLight(2,9)); } } LightBoard.main(null); . false false false true .",
            "url": "https://rohitd3.github.io/rohitfastpages/cb/2022/12/14/frq4.html",
            "relUrl": "/cb/2022/12/14/frq4.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Lesson 10",
            "content": "Notes for unit . Learnings . Can be used in situations where loops are used | Must call itself and have a base case | . Recursion . Method that calls itself. Must have two parts: a base case and a recursive call. | . Big O Notation . Describes time complexity for code to run | . Binary Search . data to be in sorted order to use. | algorithm coninuously halves the data until the wanted value is found | efficient compared to linear search | . Homework . Kahoot complete | Google form - one question missed | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/13/lesson10hwk.html",
            "relUrl": "/java/2022/12/13/lesson10hwk.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 9 - Inheritance",
            "content": "Setup . One of the main goals of learning inheritance is to teach you how to structure your code. So, we&#39;re going to leave a lot of the hacks up to your creativity, and you can make anything you want as long as it follows the structure of inheritance. . Open up a new notebook in your personal fastpages (you can do this in pairs or groups). The hacks in this lesson will be performed from scratch in this notebook. . What is Inheritance, and why is it useful? . Imagine you wanted to create a racing game. You would need a bunch of different cars-bugattis, lamborghinis, rolls royce. Each of these cars would have different features; they would have different fuel types, tires, and engines. A car like an Aston Martin would have a spoiler inside the car for aerodynamics. Lambos have cools doors for when you pull up to a race. But all of these cars would also have a lot in common; all cars have gear shifts, gas, breaks, and steering. . We could model each car with its own class, with attributes and methods specific to each car. But we would find that we&#39;re repeating a lot of the same code over and over - it doesn&#39;t really make sense to redefine the methods for gas and breaks for every single car, when it will do the same thing. . This is a great use case for inheritance. We can define a base &quot;Car Class&quot; that has the methods and attributes common to every car - steering methods, gas and break methods, and attributes like speed and miles per gallon. . Each car will &quot;extend&quot; from this base class. This means that it &quot;inherits&quot; the methods and attributes in the base Car Class (this is why it&#39;s called Inheritance). But each of the new car classes, for example a Bugatti Class, will have its own special methods and attributes. . SuperClasses and Subclasses with Cars . Let&#39;s first look at the base &quot;Car Class&quot; we talked about, with the generic methods all cars would have. This is called the Super Class. . Some vocab: protected is so that the attribute isn&#39;t affected by outside modifiers. . public class Car { protected String brandName; protected double range; protected double doorNumber; protected double maxSpeed; // Constructor for the attributes present in the superclass public Car(String brandName, double range, double doorNumber, double maxSpeed) { this.brandName = brandName; this.range = range; this.doorNumber = doorNumber; this.maxSpeed = maxSpeed; } public void gas () { System.out.println(&quot;Go!&quot;); } public void brake () { System.out.println(&quot;Stop!&quot;); } public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } public void horn () { System.out.print(&quot;honking... &quot;); } } . public class TeslaModelS extends Car { // Additional attribute not present in the superclass protected String hornSound; // Constructor for Subclass public TeslaModelS(String brandName, double range, double doorNumber, double maxSpeed, String hornSound) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(brandName, range, doorNumber, maxSpeed); // hornSound is not in the Superclass, so we add it separately in the constructor this.hornSound = hornSound; } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } // Here, we don&#39;t fully change the functionality of the existing horn method in the superclass // Instead, we take all of the functionality of the superclass method, and then add on to it public void horn () { super.horn(); System.out.print(hornSound); } public static void main(String[] args) { // 5 argument constructor TeslaModelS modelS = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;eugh&quot;); // We can still use the methods from the child class, even though we didn&#39;t mention them in the subclass! modelS.gas(); // Using the overridden method modelS.gearShift(); modelS.steer(); // Using the method we added on to modelS.horn(); } } TeslaModelS.main(null); . Go! Use the gear selector next to the wheel turning right... honking... eugh . Writing Constructors for Subclasses . In the previous example, the TeslaModelS class was a subclass. Recall that a constructor is what initializes the values of the attributes of a class when a new object of the class is created. How do we write constructors for subclasses? . Well, if the attributes of the subclass are exactly the same as the attributes of the superclass, then we can just use the constructor of the superclass. Take a look at the superclass, the Car class. We have defined a constructor within that class already. . To use the constructor of the superclass in our subclass, we need to use some specific syntax. Namely, we need to make use of the super keyword. This allows us to use constructors that we define in the superclass. . Look again at the constructor in the TeslaModelS class. We have passed in 4 attributes to the super constructor, meaning that we are making use of the 4 argument constructor in the superclass. . But our subclass also has an additional attribute: hornSound. We don&#39;t include this in the superclass since this isn&#39;t customizable for most cars. This attribute needs to be included in the constructor for our subclass, but it doesn&#39;t make sense to make a completely new constructor for all 5 attributes when 4 of the attributes are shared with the superclass. . So, what we do is call the superclass constructor with 4 attributes, but then simply add an additional assignment for the 5th, unique, attribute. . Hack 1 . In your own notebook, make any class with 2 attributes and 0 methods. Create a 2 argument constructor for that class. This will be your superclass. Now, create a subclass that extends from the superclass you made. Create 1 additional attribute in your subclass that was not present in the superclass. . Then, create a constructor for the subclass that uses the superclass constructor with the super keyword, and then adds an additional assignment for the third attribute. . Overriding Methods . Overriding allows a subclass or child class to provide a specific implementation of a method that has already been provided by a super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type (or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class. . // the existing method in the superclass public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } . Hack 2 . Add a method to the superclass you created before. This method should be very general; it should only have functionality that you know for sure will be needed in almost every single subclass. In your subclass, override this method. Remember that overriding the method will give your subclass the specific functionality it needs from that method. . Super Keyword . The two main uses of the super keyword are to use constructors in the superclass and methods in the superclass in a child class. . In this example child class TeslaModelS, the super keyword can be found in the constructor and the method horn. When it says, super(brandName, range, doorNumber, maxSpeed) in the constructor, the super keyword is used to utilize the super class constructor inside the child class. Next, in the horn() method, super.horn() is called. This line utilizes the super keyword to call the method horn() from the parent class Car. . Creating References Using Inheritance Hierarchies . Type Diagram . It is similar to looking at it like a family tree. A is the superclass, or the head of the family. The descendants are the subclasses. . So . public class A public class B extends A public class C extends B . A Reference refers to an object of the class, or the object of an inherited class. So an Inheritance Hierarchy can create references . Polymorphism . public class ToyotaCamry extends Car { public ToyotaCamry (String brandName, double range, double doorNumber, double maxSpeed) { super(brandName, range, doorNumber, maxSpeed); } @Override public void gearShift () { System.out.println(&quot;Manual shift!&quot;); } public void turbo (int a) { System.out.println(&quot;Engaging turbo &quot; + a); } public void turbo (int a, int b) { System.out.println(&quot;Engaging turbo &quot; + a + &quot; and nitro &quot; + b); } public static void main(String[] args) { // 4 superclass argument constructor ToyotaCamry camry = new ToyotaCamry(&quot;Toyota&quot;, 348, 4, 145); // Using the overridden method camry.gearShift(); // Using the overloaded method camry.turbo(1); camry.turbo(1, 1); } } ToyotaCamry.main(null); . Manual shift! Engaging turbo 1 Engaging turbo 1 and nitro 1 . Polymorphism means &quot;many forms&quot;. It means that we do one thing in many ways through inheritance. . For example, the gearShift method defined in the superclass simply says to use the stick. But in manual cars and a Tesla, you need to do different things. So, we show the method to shift gears being used in two different ways in two different classes. We can have two different implementations through overriding methods. . Look at the different outputs for the method in the ToyotaCamry and TeslaModelS class. . This method of polymorphism is called Runtime Polymorphism. It is also called Dynamic Binding or Dynamic Method Dispatch. When you hear any of these things, think of method overriding. . Imagine if you want to do a single method in a single class, but in different ways. For example, in the ToyotaCamry class, we need to either engage a turbo by itself, or a turbo with a nitro. So, we have two methods called turbo. When the method is called, the actual functionality is resolved at compile-time. . When we call camry.turbo(1), then the single argument turbo method is called. When we call camry.turbo(1, 1), the two argument turbo method is called. . Having two methods with the same name but different arguments and functionalities is called method overloading. . This is another form of polymorphism called Compile Time Polymorphism or Static Polymorphism. When you see these terms, think of method overloading. . Hack 3 . Create another subclass from your original superclass. Now, implement method overloading in this subclass. Remember that this means having two methods with the same name, but with different arguments. The method you are using for method overloading doesn&#39;t have to exist in the superclass. This will implement Static Polymorphism. . Next, override the method in your superclass in your new subclass. Make sure it has different functionality than your method in the other subclass. This will implement Runtime Polymorphism. . 9.7 Object Superclass . Important Things to Know . Object class is the superclass of all other classes in Java | Object is part of the java.lang package (know for imports) | Important Object class methods include: boolean equals(Object x) &amp; String toString() | Object class&#39; subclasses override the equals and toString methods | . toString Method . Prints out the attributes of an object | Converts string object into a string | . equals Method . Compares two strings | Returns a boolean value of true if equal, otherwise returns false | . // Demonstration of toString method // Utilized toString methods in all FRQs so far, here&#39;s an example from FRQ1 public String dayOfWeekToString() { return (&quot;{ &quot;month &quot;: &quot; + this.month + &quot;, &quot; + &quot; &quot;day &quot;: &quot; + this.day + &quot;, &quot; + &quot; &quot;year &quot;: &quot; + this.year + &quot;, &quot; + &quot; &quot;dayOfWeek &quot;: &quot; + this.dayOfWeek + &quot; }&quot;); } public String toString() { return dayOfWeekToString(); } . // Demonstration of equals method // Outputs boolean value of true or false // If one object equals another public class Student { private String name; public Student(String name) { this.name = name; } public static void main(String[] args) { Student student1 = new Student(&quot;Bob&quot;); Student student2 = new Student(&quot;Jeff&quot;); Student student3 = student1; Student student4 = new Student(&quot;A&quot;); Student student5 = student4; System.out.println(student1.equals(student2)); System.out.println(student2.equals(student3)); System.out.println(student1.equals(student3)); System.out.println(student3.equals(student4)); System.out.println(student3.equals(student4)); System.out.println(student5.equals(student4)); } } Student.main(null); . false false true false false true .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/12/08/InheritanceLesson.html",
            "relUrl": "/entry/2022/12/08/InheritanceLesson.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Lesson 8 - 2D Array",
            "content": "Vocabulary . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(&quot;last element: &quot;+ arr[2][2]); } } Test.main(null); . last element: i . Updating an element: list[r][c] = value; . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); System.out.println(arr[arr.length - 1][arr[0].length - 3]); arr[arr.length - 1][arr[0].length - 3] = &quot;Athens&quot;; System.out.println(arr[arr.length - 1][arr[0].length - 3]); for(int row = 0; row &lt; arr.length; row++) { for(int column = 0; column &lt; arr.length; column++) { System.out.print(arr[row][column] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . Change Austin to Athens and print! Austin Athens Atlanta Baltimore Chicago Australia Boston Cincinnati Athens Beaumont Columbus . You can use Nested Loops to traverse 2D Arrays . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; String shortest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); for(int row =0; row &lt; arr.length; row++) { for(int col=0; col &lt; arr[row].length; col++) { if (arr[row][col].length() &gt; longest.length()) { longest = arr[row][col]; } } } System.out.println(&quot;Longest String: &quot; + longest); for(int row =0; row &lt; arr.length; row++) { for(int col=0; col &lt; arr[row].length; col++) { if (arr[row][col].length() &lt; shortest.length()) { shortest = arr[row][col]; } } } System.out.println(&quot;Shortest String: &quot; + shortest); } } Test.main(null); . Use nested for loops to find the longest or shortest string! Longest String: Cincinnati Shortest String: Boston . Extra submission . int height = 20; String[][] arr = new String[height][height]; for (int col=0; col&lt;=height; col+=2) { System.out.println(&quot; &quot;.repeat(height - col/2) +&quot;*&quot;.repeat(col)); } System.out.println(&quot; &quot;.repeat(height - 1) + &quot;*&quot;.repeat(2)); System.out.println(&quot; &quot;.repeat(height - 1) + &quot;*&quot;.repeat(2)); . ** **** ****** ******** ********** ************ ************** **************** ****************** ******************** ** ** .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/06/lesson8hwk.html",
            "relUrl": "/java/2022/12/06/lesson8hwk.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 1-5 Lesson Notes",
            "content": "Unit 1 . Work done . wrapper classes for all primitive data types like char, int, double, boolean where you can call in static methods that return values | primitive wrapper objects or string objects are immutable so the methods can&#39;t change Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | . | String class are unable to be changed | declare a variable that can be accessible and/or changed (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | . | . Unit 2 . Work done . classes are blueprints for creating objects | objects are instances within a class attributes are inherited by objects | Non static methods are dot operators | . | methods are certain set of code that runs a specific task | overloaded methods give multiple methods the same name with different signatures | void methods don&#39;t return values | Non void methods return a value of the same type defined in the method signature | static methods are a part of a class instead of an instance of a class which is why it&#39;s in a bracket in the class | . Unit 3 . Work done . boolean expression is true or false | If-else statements sets up alternate code if the first expression turns false | Else-if statements allow for more conditions to be defined | De Morgan&#39;s law: logical operators &amp;&amp; (and) ll(or) and !(not) | . Unit 4 . Work done . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | For loops are most tested | Strings: array chairs | . Unit 5 . Work done . Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | toString() method is a overridden method that provides description of a specific object | Mutator Method (setter): void method that changes value of instance variables/static variable | . Additional Vocab . Primitives: . Doubles - 64 bits | Integers - 32 bits - use int when declaring, not Integer. Integer is non-primitive | Booleans - 1 bit | String is a non-primitive data type | . Non-primitive or Wrapper classes data types use methods to perform actions . String Class . Strings are immutable - unable to be changed . Methods that act upon string objects do not change the state of the defined string object. . Constructors - initialize the attributes for an object . Constructors start with public, and have the same name as the class. In this case, these constructors are for the class Person | . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). . Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from) . Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes . Casting . change one data type to another. Two casting operators are | int | double . | Division - Seen above, casting can round the division for y/x so that it returns an integer, this is to allow for certain code beyond that that would only be able to take integer values for a specific reason. . | Rounding/Truncating - Seen in both examples above, casting is great for rounding a value to an integer or for another reason in order to simplify code. | . double x = 4.5; double y = 6.52; int z = (int) (y/x); int aa = (int) (x*y); System.out.println(z); System.out.println(aa) . 1 29 . Wrapper Classes - Classes that are able to make primitive types into objects to be used in things such as ArrayLists that would not allow primitives. See below for an example. . // Wrapper classes example ArrayList&lt;Integer&gt; ton = new ArrayList&lt;Integer&gt;(); // ArrayList&lt;int&gt; would not work for this // Concatenation example String a = &quot;Hello&quot;; String b = &quot;World&quot;; int c = 333; String d = a + &quot; &quot; + b + &quot; &quot; + c; System.out.println(d); . Hello World 333 . Concatenation - Concatenation involves combining two or more strings together. This is done by using the + operator. Anything that&#39;s not a string is attempted to be converted to a string in order to be concatenated on the end, like the int in this example. . Static/Class Variables - Static variables are variables that are shared across all instances of a class. This means that no matter how many objects you instantiate of the same class, modifying a static variable or method will update it for all instances. This is useful for things like a counter that you want to increment for every instance of a class. . Inheritance/Extends - Using an extends method allows it to inherit attributes and methods from the class it is extending. This is useful when you want to modify or create a subclass of a class without having to rewrite all of the code for the class you are extending. . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Polymorphism - Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters . Overloading is when you have multiple methods with the same name but different parameters. . Overriding is when you have a method with the same name and parameters as a method in a superclass but you want to modify the method in the subclass. . Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. Abstract Class - Objects cannot be created from an abstract class, they can only be extended. This is useful when you want to create a class that can be extended but not instantiated . abstract class People { public void walked() { System.out.println(&quot;Rohit walked 10 miles&quot;); } } class KURTIS extends People { public void walked() { System.out.println(&quot;kurtis walked 9 miles&quot;); } } class NATHAN extends People { public void walked() { System.out.println(&quot;nathan walked 8 miles&quot;); } } // Instantiating the People class would throw an error as it is abstract KURTIS kur = new KURTIS(); NATHAN nat = new NATHAN(); kur.walked(); nat.walked(); . kurtis walked 9 miles nathan walked 8 miles . Subclass Constructor / Super - Extending a class and then constructing the new extends class will call the constructor of the superclass. This is useful when you want to have a constructor that will call the constructor of the superclass. . Referencing Superclass - Using the super keyword allows you to reference the superclass of the current class. This is useful when you want to reference the superclass of the current class. . Standard Methods - ToString is a standard method that is used to convert an object into a string. Equals is useful for comparing two objects to see if they are equal. HashCode is useful for getting a unique hash code for an object. . Big O Notation - Implementing Big O notation is useful for determining the efficiency of an algorithm. Making algorithms more efficient is useful for making programs compile and run faster and likely reduce the load of it, which could be especially good for websites where users may be runnning the same function through an api many times. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/12/02/trioenlessons.html",
            "relUrl": "/entry/2022/12/02/trioenlessons.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 1-5 Lesson Score",
            "content": "Unit Score Grading Comments . Unit 1 | 0.9/1 | Link | N/A | . Unit 2 | 0.95/1 | Link | Standard Answers yet a seemlingly perfect blog | . Unit 3 | 0.9/1 | Link.html) | Completed exercises, not FRQ | . Unit 4 | 0.9/1 | Link | N/A | . Unit 5 | 1/1 | Link | N/A | . TOTAL SCORE | 4.65/5 | | | .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/12/02/scoretrione.html",
            "relUrl": "/entry/2022/12/02/scoretrione.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 1-5 Lesson Blogs",
            "content": "Grading . Unit Score Grading . Unit 1 | 0.9/1 | Link | . Unit 2 | 0.95/1 | Link | . Unit 3 | 0.9/1 | Link.html) | . Unit 4 | 0.8/1 | Link | . Unit 5 | 1/1 | Link | . TOTAL SCORE | 4.55/5 | N/A | . Unit 1 . Work done . wrapper classes for all primitive data types like char, int, double, boolean where you can call in static methods that return values | primitive wrapper objects or string objects are immutable so the methods can&#39;t change Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | . | String class are unable to be changed | declare a variable that can be accessible and/or changed (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | . | . Unit 2 . Work done . classes are blueprints for creating objects | objects are instances within a class attributes are inherited by objects | Non static methods are dot operators | . | methods are certain set of code that runs a specific task | overloaded methods give multiple methods the same name with different signatures | void methods don&#39;t return values | Non void methods return a value of the same type defined in the method signature | static methods are a part of a class instead of an instance of a class which is why it&#39;s in a bracket in the class | . Unit 3 . Work done . boolean expression is true or false | If-else statements sets up alternate code if the first expression turns false | Else-if statements allow for more conditions to be defined | De Morgan&#39;s law: logical operators &amp;&amp; (and) ll(or) and !(not) | . Unit 4 . Work done . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | For loops are most tested | Strings: array chairs | . Unit 5 . Work done . Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | toString() method is a overridden method that provides description of a specific object | Mutator Method (setter): void method that changes value of instance variables/static variable | . Additional Vocab . Primitives: . Doubles - 64 bits | Integers - 32 bits - use int when declaring, not Integer. Integer is non-primitive | Booleans - 1 bit | String is a non-primitive data type | . Non-primitive or Wrapper classes data types use methods to perform actions . String Class . Strings are immutable - unable to be changed . Methods that act upon string objects do not change the state of the defined string object. . Overloading with Constructors and Methods . Constructors - initialize the attributes for an object . Constructors start with public, and have the same name as the class. In this case, these constructors are for the class Person | . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). . Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from) . Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/12/02/final15lessons.html",
            "relUrl": "/java/2022/12/02/final15lessons.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Collegeboard Test Corrections",
            "content": "Score: 36/40 . Corrections for Q4 . The value of 2.33333 is incorrect because it is the result if the division used was floating point division, instead of integer division. . For it to be correct, evaluating x &lt; 10 &amp;&amp; y &lt; 0 for x having the value 7 and y have a value of 3, x &lt; 10 is true since 7 is less than 10 and y is less than 0 makes it false since 3 is not less than 0. The operator &amp;&amp; evaluates to true when both conditions are true and evaluates to false otherwise. As a result, compiler will skip first output and execute the else statement for integer division for 7 / 3, which is 2. . Corrections for Q5 . B is incorrect as this would be the output if k was initialized to 0. . The correct answer is C. As the method mystery contains a loop that starts k at 1 and iterates, incrementing k by 1 until k exceeds n, which is 6. In each iteration, the Integer value k * k + 3 is added to the ArrayList seq. As the iterations continue {4, 7, 12, 19, 28, 39} is formed. . Corrections for Q12 . D is incorrect. This would be the return value if k was incremented by 1 instead of 2 and the loop condition was changed to k &lt; input.length()- 1. . The correct answer is C. The value of the loop control variable k starts at 1 and is incremented by 2 as long as it is less than input.length. The input is “computer”, so input.length is 8. The values of k are 1, 3, 5, 7, and then when k is 9, the loop terminates. The statement input.substring (k, k + 1) will return the value of input at index k. Output is “o”, “p”, “t”, and “r”. The value “optr” is returned. . Corrections for Q40 . . Answer D is incorrect. When whatsItDo(“W”) is called, nothing is printed since the print occurs in the if statement which does not execute. All previous recursive method calls print a substring of str and not str. . C is correct. The call whatsItDo(“WATCH”) assigns to temp a substring of “WATCH” starting at 0 and ending at 4 – 1 or 3, which is “WATC”. Next the call whatsItDo(“WATC”) is made. The call whatsItDo(“WATC”), sets its local temp to “WAT” and calls whatsItDo(“WAT”). The call whatsItDo(“WAT”), sets its local temp to “WA” and calls whatsItDo(“WA”). The call whatsItDo(“WA”), sets its local temp to “W” and calls whatsItDo(“W”). The call whatsItDo(“W”) reaches the base case and doesn’t do anything since the length of “W” is 1. Then we need to finish the call to whatsItDo(“WA”), which prints the value of its local temp, “W”. . Reflection . Taking AP CSP last year, I wanted to further my computer science education by taking AP CSA the sequential year. The Java syntax was really different than the python syntax I learned last year but it was still very interesting. I believe that our group dynamic was really nice and I also learned from my team members. . What I want to get better at is working with backend and try making my own API next trimester. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/11/08/cbtest.html",
            "relUrl": "/entry/2022/11/08/cbtest.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Lesson 6 - Array",
            "content": "HACK 1 . // HACK 1 int[] arrayOne = {1, 3, 5, 7, 9}; for (int num : arrayOne) { if (num % 2 == 0) { System.out.println(num); } } . HACK 2 . // HACK 2 // Answer is B . HACK 3 . // HACK 3 import java.util.Arrays; public class arraySorter { public static void main(int[] a) { Arrays.sort(a); for (int i : a) { System.out.println(i); } } } int[] myNumbers = new int[] {5, 3, 4, 1, 2}; arraySorter.main(myNumbers); . 1 2 3 4 5 . HACK 4 . // HACK 4 // ANSWER IS B . HACK 5 . // HACK 5 public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } . HACK 6 . // HACK 6 // ANSWER IS D . HACK 7 . // HACK 7 public class leftShifted { public static int[] main(int[] a) { int first = a[0]; for (int i=1; i&lt;a.length; i++) { a[i-1] = a[i]; } a[a.length-1] = first; return a; } } int[] array = {7,9,4}; int[] array_out = leftShifted.main(array); Arrays.toString(array_out) . [9, 4, 7] . HACK 8 . // HACK 8 public class findDuplicate { public static int main(int[] a, int b) { int d=0; for (int number : a) { if (number==b) { d++; } } return d; } } int[] array = {7,7,9,4}; findDuplicate.main(array, 7); . 2 . HACK 9 . // HACK 9 public class reverseString { public static char[] main(char[] s) { char[] reverse = new char[s.length]; for (int i=s.length-1; i&gt;=0; i--) { reverse[s.length-i-1] = s[i]; } return reverse; } } String s = &quot;hello&quot;; char[] c = s.toCharArray(); char[] reverse = reverseString.main(c); // Arrays.toString(reverse) String reversed = new String(reverse); System.out.println(reversed); . olleh . FRQ PART A . // FRQ PART A public void addMembers(String[] names, int gradYear) { for (String name : names) { MemberInfo member = new MemberInfo(name, gradYear, true); memberList.add(member); } } . Notes . Arrays: one type of data storage | Reference types | Need import java.util Arrays | Initialize arrays using constructors | Access elements through arrayName[index] | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/11/01/lesson6hwk.html",
            "relUrl": "/java/2022/11/01/lesson6hwk.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Lesson 5 Homework - Writing Classes",
            "content": "2019 FRQ Q2 Rohit and Kurtis . public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 . Notes . Classes are blueprints to create objects and define attributes | Instances: attributes, constructors, methods, objects | Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/28/lesson5hwk.html",
            "relUrl": "/java/2022/10/28/lesson5hwk.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Lesson 4 Homework -  Iteration",
            "content": "Hack 1 . public class WhileLoops { public double money = 0; public double profit = 5450000; public double goal = 30000000; public double years = 0; public void Calc() { while (this.money &lt; this.goal) { this.money = this.money + this.profit; this.profit = this.profit * 1.05; this.years = this.years + 1; } System.out.println(this.years); } public static void main(String[] args) { WhileLoops obj = new WhileLoops(); obj.Calc(); } } WhileLoops.main(null); . 5.0 . Hack 2 . public class ForLoops { public double temp = 0; public void Calc() { System.out.println(&quot;Numbers 10-15&quot;); for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } System.out.println(&quot;Convert temperature&quot;); for (int x = 0; x&lt;=100; x+=10) { temp = 0; temp = x + 273.15; System.out.println(x + &quot;c -&gt; &quot; + temp + &quot;k&quot;); } } public static void main(String[] args) { ForLoops obj = new ForLoops(); obj.Calc(); } } ForLoops.main(null); . Numbers 10-15 10 11 12 13 14 15 Convert temperature 0c -&gt; 273.15k 10c -&gt; 283.15k 20c -&gt; 293.15k 30c -&gt; 303.15k 40c -&gt; 313.15k 50c -&gt; 323.15k 60c -&gt; 333.15k 70c -&gt; 343.15k 80c -&gt; 353.15k 90c -&gt; 363.15k 100c -&gt; 373.15k . Caesar Cipher Homework . public class CaesarCipher { public String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; public String temp; // Method which takes a string and swaps a character static char[] swap(String str, int i, char j) { char ch[] = str.toCharArray(); ch[i] = j; return ch; } public String Calc(String message) { temp = message; // Looping through each character in the message for (int i=0; i&lt;temp.length(); i++) { // Cast the character to ascii to make substitutions much more efficient int ascii = (int) temp.charAt(i); // Letters at the end of the alphabet behave differently, so we create two separate conditionals if (ascii &gt; 64 &amp;&amp; ascii &lt; 88 || (ascii &gt; 96 &amp;&amp; ascii &lt; 120)) { ascii = ascii + 3; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } // This is for the last three letters of the alphabet else if (ascii &gt; 87 &amp;&amp; ascii &lt; 91 || ascii &gt; 119 &amp;&amp; ascii &lt; 123) { ascii = ascii - 23; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } } return temp; } public static void main(String[] args) { CaesarCipher cipherCalc = new CaesarCipher(); String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipherCalc.Calc(message1)); System.out.println(cipherCalc.Calc(message2)); System.out.println(cipherCalc.Calc(message3)); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious . Notes . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | . | For loops are most tested | Strings: array chairs | Nested iteration: loop within a loop | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/27/lesson4hwk.html",
            "relUrl": "/java/2022/10/27/lesson4hwk.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Lesson 3 Homework - Boolean Expressions and if Statements",
            "content": "Conditionals Exercises . 2 . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The roots are -0.552786404500042 and -1.4472135954999579 . 4 . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 6 . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 8 . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Vowel . 10 . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 12 . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 18 The Average is : 3.0 . 14 . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 6 X 0 = 0 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 . 16 . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 123 1234 12345 123456 1234567 12345678 123456789 12345678910 1234567891011 123456789101112 12345678910111213 1234567891011121314 123456789101112131415 12345678910111213141516 1234567891011121314151617 123456789101112131415161718 12345678910111213141516171819 . 18 . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 78910 1112131415 161718192021 22232425262728 2930313233343536 373839404142434445 . 20 . import java.util.Scanner; public class Exercise20 { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Exercise20.main(null); . Input number of rows : 1 . Notes . if the boolean expression is true or false dictates whether the code will run | if-else statements sets up alternate code if the first expression turns false | else-if statements allow for more conditions to be defined | De Morgan&#39;s law: . !(a&amp;&amp;b) = (!a || !b) . | !(a || b) = (!a &amp;&amp; !b) . | . | Comparing objects through == | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/25/lesson3hwk.html",
            "relUrl": "/java/2022/10/25/lesson3hwk.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lesson 2 Homework - Using Objects",
            "content": "public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Notes . Classes are blueprints for creating objects | Objects are instances within a class | Methods: certain set of code that runs a specific task | Class attributes are inherited by objects | Learned about myPainter in Code.org | Non static methods are dot operators | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/25/lesson2hwk.html",
            "relUrl": "/java/2022/10/25/lesson2hwk.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lesson 1 Homework - Primitive Types",
            "content": "import java.util.*; public class gradecalc { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Final is part of the test category? true or false&quot;); boolean finalIsTest = sc.nextBoolean(); if (finalIsTest) { System.out.println(&quot;Current grade:&quot;); double grade = sc.nextDouble(); System.out.println(&quot;What percent of your grade is the tests category?&quot;); int testsPercent = sc.nextInt(); System.out.println(&quot;Your current grade (in tests category)?&quot;); double testsGrade = sc.nextDouble(); System.out.println(&quot;Total points in tests category currently?&quot;); int testsPoints = sc.nextInt(); System.out.println(&quot;Amount of points:&quot;); int finalPoints = sc.nextInt(); System.out.println(&quot;The grade you want:&quot;); double finalgrade = sc.nextDouble(); double percentReq = finalgrade - (grade - testsGrade * testsPercent/100.0); double testPointsNeeded = (percentReq/testsPercent) * (testsPoints + finalPoints); double finalPointsNeeded = testPointsNeeded - testsPoints; System.out.println(&quot;You need a &quot; + finalPointsNeeded + &quot; on the final.&quot;); } else { System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); int finalPercent = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double target = sc.nextDouble(); double percentReq = target - (grade/100.0)*(100.0-finalPercent); double gradeNeeded = 100.0 * (percentReq/finalPercent); System.out.println(&quot;You need a &quot; + gradeNeeded + &quot; on the test.&quot;); } } } gradecalc.main(null); . Final is part of the test category? true or false Current grade: What percent of your grade is the tests category? Your current grade (in tests category)? Total points in tests category currently? Amount of points: The grade you want: You need a 32.0 on the final. . Notes . Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | Learned to declare a variable that can be accessible and/or changed | Learned how to store data as variables | (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/24/lesson1hwk.html",
            "relUrl": "/java/2022/10/24/lesson1hwk.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "POJO",
            "content": "POJO w/ Annotation . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; // generating getters and setters using lombok annotations import javax.persistence.*; @Data // simplify writing code @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Lo ng id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // stores joke likes private int dislike; // stores joke jeers } . POJO w/o Annotation . import javax.persistence.*; // without lombok we have more boilerplate code @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { public CarBrands() { this.id = null; this.brand = &quot;&quot;; this.like = 0; this.dislike = 0; } public CarBrands(Long ID, String Brand, int Like, int Dislike) { this.id = null; this.brand = Brand; this.like = Like; this.dislike = Dislike; } @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // Store joke likes private int dislike; // Store joke jeers // Only have a getter for ID // Don&#39;t need to set since it auto generates public Long getID() { return this.id; } public String getBrand() { return this.brand; } public void setBrand(String Brand) { this.brand = Brand; } public int getLike() { return this.like; } public void setLike(int Like) { this.like = Like; } public int getDislike() { return this.dislike; } public void setDislike(int Dislike) { this.dislike = Dislike; } } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/10/pojostuff.html",
            "relUrl": "/java/2022/10/10/pojostuff.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "image rescaling and coloring",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;mort&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Changing to go by blocks 2 times as wide as tall for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // Gray scale method public void GrayScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+green+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGray = new Color(avg, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGray.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graymort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (green)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGreen = new Color(avg, green, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGreen.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greenmort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorRed = new Color(red, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorRed.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redmort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorBlue = new Color(avg, avg, blue); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorBlue.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluemort&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics mort = new Pics(&quot;mort&quot;, &quot;png&quot;); mort.GrayScale(); mort.GreenScale(); mort.RedScale(); mort.BlueScale(); mort.printStats(&quot;Original&quot;); mort.resize(33); mort.printStats(&quot;Scaled&quot;); mort.convertToAscii(); } } Pics.main(null); . Original: 621907 627x622 images/mort.png Scaled: 122492 207x205 images/tmp/mort.png . .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/02/image.html",
            "relUrl": "/java/2022/10/02/image.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "api",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/louislefebure9/api/star-wars-characters/ HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://star-wars-characters.p.rapidapi.com/46DYBV/star_wars_characters&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;bf09b94566msh22c602dfe97bd97p19c2fajsn1d42e34f8724&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;star-wars-characters.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //Printing out results System.out.println(response.body()); . [ { &#34;id&#34;: 1, &#34;mass&#34;: &#34;77&#34;, &#34;name&#34;: &#34;Luke Skywalker&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;172&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;19BBY&#34;, &#34;hair_color&#34;: &#34;blond&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 2, &#34;mass&#34;: &#34;75&#34;, &#34;name&#34;: &#34;C-3PO&#34;, &#34;gender&#34;: &#34;NA&#34;, &#34;height&#34;: &#34;167&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;112BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;gold&#34; }, { &#34;id&#34;: 3, &#34;mass&#34;: &#34;32&#34;, &#34;name&#34;: &#34;R2-D2&#34;, &#34;gender&#34;: &#34;NA&#34;, &#34;height&#34;: &#34;96&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;33BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;white, blue&#34; }, { &#34;id&#34;: 4, &#34;mass&#34;: &#34;136&#34;, &#34;name&#34;: &#34;Darth Vader&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;202&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;41.9BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;white&#34; }, { &#34;id&#34;: 5, &#34;mass&#34;: &#34;49&#34;, &#34;name&#34;: &#34;Leia Organa&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;150&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Alderaan&#34;, &#34;birth_year&#34;: &#34;19BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 6, &#34;mass&#34;: &#34;120&#34;, &#34;name&#34;: &#34;Owen Lars&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;52BBY&#34;, &#34;hair_color&#34;: &#34;brown, grey&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 7, &#34;mass&#34;: &#34;75&#34;, &#34;name&#34;: &#34;Beru Whitesun lars&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;165&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;47BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 8, &#34;mass&#34;: &#34;32&#34;, &#34;name&#34;: &#34;R5-D4&#34;, &#34;gender&#34;: &#34;NA&#34;, &#34;height&#34;: &#34;97&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;white, red&#34; }, { &#34;id&#34;: 9, &#34;mass&#34;: &#34;84&#34;, &#34;name&#34;: &#34;Biggs Darklighter&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;24BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 10, &#34;mass&#34;: &#34;77&#34;, &#34;name&#34;: &#34;Obi-Wan Kenobi&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;182&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue-gray&#34;, &#34;homeworld&#34;: &#34;Stewjon&#34;, &#34;birth_year&#34;: &#34;57BBY&#34;, &#34;hair_color&#34;: &#34;auburn, white&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 11, &#34;mass&#34;: &#34;84&#34;, &#34;name&#34;: &#34;Anakin Skywalker&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;41.9BBY&#34;, &#34;hair_color&#34;: &#34;blond&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 12, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Wilhuff Tarkin&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Eriadu&#34;, &#34;birth_year&#34;: &#34;64BBY&#34;, &#34;hair_color&#34;: &#34;auburn, grey&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 13, &#34;mass&#34;: &#34;112&#34;, &#34;name&#34;: &#34;Chewbacca&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;228&#34;, &#34;species&#34;: &#34;Wookiee&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Kashyyyk&#34;, &#34;birth_year&#34;: &#34;200BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;NA&#34; }, { &#34;id&#34;: 14, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Han Solo&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Corellia&#34;, &#34;birth_year&#34;: &#34;29BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 15, &#34;mass&#34;: &#34;74&#34;, &#34;name&#34;: &#34;Greedo&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;173&#34;, &#34;species&#34;: &#34;Rodian&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Rodia&#34;, &#34;birth_year&#34;: &#34;44BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 16, &#34;mass&#34;: &#34;1,358&#34;, &#34;name&#34;: &#34;Jabba Desilijic Tiure&#34;, &#34;gender&#34;: &#34;hermaphrodite&#34;, &#34;height&#34;: &#34;175&#34;, &#34;species&#34;: &#34;Hutt&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Nal Hutta&#34;, &#34;birth_year&#34;: &#34;600BBY&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;green-tan, brown&#34; }, { &#34;id&#34;: 17, &#34;mass&#34;: &#34;77&#34;, &#34;name&#34;: &#34;Wedge Antilles&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;hazel&#34;, &#34;homeworld&#34;: &#34;Corellia&#34;, &#34;birth_year&#34;: &#34;21BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 18, &#34;mass&#34;: &#34;110&#34;, &#34;name&#34;: &#34;Jek Tono Porkins&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Bestine IV&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 19, &#34;mass&#34;: &#34;17&#34;, &#34;name&#34;: &#34;Yoda&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;66&#34;, &#34;species&#34;: &#34;Yoda&#39;s species&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;896BBY&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 20, &#34;mass&#34;: &#34;75&#34;, &#34;name&#34;: &#34;Palpatine&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;82BBY&#34;, &#34;hair_color&#34;: &#34;grey&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 21, &#34;mass&#34;: &#34;78.2&#34;, &#34;name&#34;: &#34;Boba Fett&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Kamino&#34;, &#34;birth_year&#34;: &#34;31.5BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 22, &#34;mass&#34;: &#34;140&#34;, &#34;name&#34;: &#34;IG-88&#34;, &#34;gender&#34;: &#34;none&#34;, &#34;height&#34;: &#34;200&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;15BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;metal&#34; }, { &#34;id&#34;: 23, &#34;mass&#34;: &#34;113&#34;, &#34;name&#34;: &#34;Bossk&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;190&#34;, &#34;species&#34;: &#34;Trandoshan&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Trandosha&#34;, &#34;birth_year&#34;: &#34;53BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 24, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Lando Calrissian&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;177&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Socorro&#34;, &#34;birth_year&#34;: &#34;31BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 25, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Lobot&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;175&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Bespin&#34;, &#34;birth_year&#34;: &#34;37BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 26, &#34;mass&#34;: &#34;83&#34;, &#34;name&#34;: &#34;Ackbar&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Mon Calamari&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Mon Cala&#34;, &#34;birth_year&#34;: &#34;41BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;brown mottle&#34; }, { &#34;id&#34;: 27, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Mon Mothma&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;150&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Chandrila&#34;, &#34;birth_year&#34;: &#34;48BBY&#34;, &#34;hair_color&#34;: &#34;auburn&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 28, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Arvel Crynyd&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 29, &#34;mass&#34;: &#34;20&#34;, &#34;name&#34;: &#34;Wicket Systri Warrick&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;88&#34;, &#34;species&#34;: &#34;Ewok&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Endor&#34;, &#34;birth_year&#34;: &#34;8BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 30, &#34;mass&#34;: &#34;68&#34;, &#34;name&#34;: &#34;Nien Nunb&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;160&#34;, &#34;species&#34;: &#34;Sullustan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Sullust&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 31, &#34;mass&#34;: &#34;89&#34;, &#34;name&#34;: &#34;Qui-Gon Jinn&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;193&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;92BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 32, &#34;mass&#34;: &#34;90&#34;, &#34;name&#34;: &#34;Nute Gunray&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;191&#34;, &#34;species&#34;: &#34;Neimodian&#34;, &#34;eye_color&#34;: &#34;red&#34;, &#34;homeworld&#34;: &#34;Cato Neimoidia&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;mottled green&#34; }, { &#34;id&#34;: 33, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Finis Valorum&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Coruscant&#34;, &#34;birth_year&#34;: &#34;91BBY&#34;, &#34;hair_color&#34;: &#34;blond&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 34, &#34;mass&#34;: &#34;66&#34;, &#34;name&#34;: &#34;Jar Jar Binks&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;196&#34;, &#34;species&#34;: &#34;Gungan&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;52BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;orange&#34; }, { &#34;id&#34;: 35, &#34;mass&#34;: &#34;82&#34;, &#34;name&#34;: &#34;Roos Tarpals&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;224&#34;, &#34;species&#34;: &#34;Gungan&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 36, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Rugor Nass&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;206&#34;, &#34;species&#34;: &#34;Gungan&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 37, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Ric Olié&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 38, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Watto&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;137&#34;, &#34;species&#34;: &#34;Toydarian&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Toydaria&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;blue, grey&#34; }, { &#34;id&#34;: 39, &#34;mass&#34;: &#34;40&#34;, &#34;name&#34;: &#34;Sebulba&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;112&#34;, &#34;species&#34;: &#34;Dug&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Malastare&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey, red&#34; }, { &#34;id&#34;: 40, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Quarsh Panaka&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;62BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 41, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Shmi Skywalker&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;163&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;72BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 42, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Darth Maul&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;175&#34;, &#34;species&#34;: &#34;Zabrak&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Dathomir&#34;, &#34;birth_year&#34;: &#34;54BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;red&#34; }, { &#34;id&#34;: 43, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Bib Fortuna&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;180&#34;, &#34;species&#34;: &#34;Twi&#39;lek&#34;, &#34;eye_color&#34;: &#34;pink&#34;, &#34;homeworld&#34;: &#34;Ryloth&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 44, &#34;mass&#34;: &#34;55&#34;, &#34;name&#34;: &#34;Ayla Secura&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;Twi&#39;lek&#34;, &#34;eye_color&#34;: &#34;hazel&#34;, &#34;homeworld&#34;: &#34;Ryloth&#34;, &#34;birth_year&#34;: &#34;48BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;blue&#34; }, { &#34;id&#34;: 45, &#34;mass&#34;: &#34;45&#34;, &#34;name&#34;: &#34;Dud Bolt&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;94&#34;, &#34;species&#34;: &#34;Vulptereen&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Vulpter&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;blue, grey&#34; }, { &#34;id&#34;: 46, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Gasgano&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;122&#34;, &#34;species&#34;: &#34;Xexto&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Troiken&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;white, blue&#34; }, { &#34;id&#34;: 47, &#34;mass&#34;: &#34;65&#34;, &#34;name&#34;: &#34;Ben Quadinaros&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;163&#34;, &#34;species&#34;: &#34;Toong&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Tund&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey, green, yellow&#34; }, { &#34;id&#34;: 48, &#34;mass&#34;: &#34;84&#34;, &#34;name&#34;: &#34;Mace Windu&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Haruun Kal&#34;, &#34;birth_year&#34;: &#34;72BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 49, &#34;mass&#34;: &#34;82&#34;, &#34;name&#34;: &#34;Ki-Adi-Mundi&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;198&#34;, &#34;species&#34;: &#34;Cerean&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Cerea&#34;, &#34;birth_year&#34;: &#34;92BBY&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 50, &#34;mass&#34;: &#34;87&#34;, &#34;name&#34;: &#34;Kit Fisto&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;196&#34;, &#34;species&#34;: &#34;Nautolan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Glee Anselm&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 51, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Eeth Koth&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;171&#34;, &#34;species&#34;: &#34;Zabrak&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Iridonia&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 52, &#34;mass&#34;: &#34;50&#34;, &#34;name&#34;: &#34;Adi Gallia&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;184&#34;, &#34;species&#34;: &#34;Tholothian&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Coruscant&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 53, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Saesee Tiin&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Iktotchi&#34;, &#34;eye_color&#34;: &#34;orange&#34;, &#34;homeworld&#34;: &#34;Iktotch&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 54, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Yarael Poof&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;264&#34;, &#34;species&#34;: &#34;Quermian&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Quermia&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;white&#34; }, { &#34;id&#34;: 55, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Plo Koon&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Kel Dor&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Dorin&#34;, &#34;birth_year&#34;: &#34;22BBY&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;orange&#34; }, { &#34;id&#34;: 56, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Mas Amedda&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;196&#34;, &#34;species&#34;: &#34;Chagrian&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Champala&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;blue&#34; }, { &#34;id&#34;: 57, &#34;mass&#34;: &#34;85&#34;, &#34;name&#34;: &#34;Gregar Typho&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;185&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 58, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Cordé&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;157&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 59, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Cliegg Lars&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Tatooine&#34;, &#34;birth_year&#34;: &#34;82BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 60, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Poggle the Lesser&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Geonosian&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Geonosis&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green&#34; }, { &#34;id&#34;: 61, &#34;mass&#34;: &#34;56.2&#34;, &#34;name&#34;: &#34;Luminara Unduli&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;170&#34;, &#34;species&#34;: &#34;Mirialan&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Mirial&#34;, &#34;birth_year&#34;: &#34;58BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;yellow&#34; }, { &#34;id&#34;: 62, &#34;mass&#34;: &#34;50&#34;, &#34;name&#34;: &#34;Barriss Offee&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;166&#34;, &#34;species&#34;: &#34;Mirialan&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Mirial&#34;, &#34;birth_year&#34;: &#34;40BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;yellow&#34; }, { &#34;id&#34;: 63, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Dormé&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;165&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 64, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Dooku&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;193&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Serenno&#34;, &#34;birth_year&#34;: &#34;102BBY&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 65, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Bail Prestor Organa&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;191&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Alderaan&#34;, &#34;birth_year&#34;: &#34;67BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;tan&#34; }, { &#34;id&#34;: 66, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Jango Fett&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;183&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Concord Dawn&#34;, &#34;birth_year&#34;: &#34;66BBY&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;tan&#34; }, { &#34;id&#34;: 67, &#34;mass&#34;: &#34;55&#34;, &#34;name&#34;: &#34;Zam Wesell&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;168&#34;, &#34;species&#34;: &#34;Clawdite&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Zolan&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;blonde&#34;, &#34;skin_color&#34;: &#34;fair, green, yellow&#34; }, { &#34;id&#34;: 68, &#34;mass&#34;: &#34;102&#34;, &#34;name&#34;: &#34;Dexter Jettster&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;198&#34;, &#34;species&#34;: &#34;Besalisk&#34;, &#34;eye_color&#34;: &#34;yellow&#34;, &#34;homeworld&#34;: &#34;Ojom&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 69, &#34;mass&#34;: &#34;88&#34;, &#34;name&#34;: &#34;Lama Su&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;229&#34;, &#34;species&#34;: &#34;Kaminoan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Kamino&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 70, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Taun We&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;213&#34;, &#34;species&#34;: &#34;Kaminoan&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Kamino&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 71, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Jocasta Nu&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;167&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Coruscant&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;white&#34;, &#34;skin_color&#34;: &#34;fair&#34; }, { &#34;id&#34;: 72, &#34;mass&#34;: &#34;15&#34;, &#34;name&#34;: &#34;Ratts Tyerell&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;79&#34;, &#34;species&#34;: &#34;Aleena&#34;, &#34;eye_color&#34;: &#34;NA&#34;, &#34;homeworld&#34;: &#34;Aleen Minor&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey, blue&#34; }, { &#34;id&#34;: 73, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;R4-P17&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;96&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;red, blue&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;silver, red&#34; }, { &#34;id&#34;: 74, &#34;mass&#34;: &#34;48&#34;, &#34;name&#34;: &#34;Wat Tambor&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;193&#34;, &#34;species&#34;: &#34;Skakoan&#34;, &#34;eye_color&#34;: &#34;NA&#34;, &#34;homeworld&#34;: &#34;Skako&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;green, grey&#34; }, { &#34;id&#34;: 75, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;San Hill&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;191&#34;, &#34;species&#34;: &#34;Muun&#34;, &#34;eye_color&#34;: &#34;gold&#34;, &#34;homeworld&#34;: &#34;Muunilinst&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 76, &#34;mass&#34;: &#34;57&#34;, &#34;name&#34;: &#34;Shaak Ti&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;Togruta&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Shili&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;red, blue, white&#34; }, { &#34;id&#34;: 77, &#34;mass&#34;: &#34;159&#34;, &#34;name&#34;: &#34;Grievous&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;216&#34;, &#34;species&#34;: &#34;Kaleesh&#34;, &#34;eye_color&#34;: &#34;green, yellow&#34;, &#34;homeworld&#34;: &#34;Kalee&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;brown, white&#34; }, { &#34;id&#34;: 78, &#34;mass&#34;: &#34;136&#34;, &#34;name&#34;: &#34;Tarfful&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;234&#34;, &#34;species&#34;: &#34;Wookiee&#34;, &#34;eye_color&#34;: &#34;blue&#34;, &#34;homeworld&#34;: &#34;Kashyyyk&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;brown&#34; }, { &#34;id&#34;: 79, &#34;mass&#34;: &#34;79&#34;, &#34;name&#34;: &#34;Raymus Antilles&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;188&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Alderaan&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 80, &#34;mass&#34;: &#34;48&#34;, &#34;name&#34;: &#34;Sly Moore&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;178&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;white&#34;, &#34;homeworld&#34;: &#34;Umbara&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;pale&#34; }, { &#34;id&#34;: 81, &#34;mass&#34;: &#34;80&#34;, &#34;name&#34;: &#34;Tion Medon&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;206&#34;, &#34;species&#34;: &#34;Pau&#39;an&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;Utapau&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;grey&#34; }, { &#34;id&#34;: 82, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Finn&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;dark&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;black&#34;, &#34;skin_color&#34;: &#34;dark&#34; }, { &#34;id&#34;: 83, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Rey&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;hazel&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 84, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Poe Dameron&#34;, &#34;gender&#34;: &#34;male&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 85, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;BB8&#34;, &#34;gender&#34;: &#34;none&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;Droid&#34;, &#34;eye_color&#34;: &#34;black&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;none&#34;, &#34;skin_color&#34;: &#34;none&#34; }, { &#34;id&#34;: 86, &#34;mass&#34;: &#34;NA&#34;, &#34;name&#34;: &#34;Captain Phasma&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;NA&#34;, &#34;species&#34;: &#34;NA&#34;, &#34;eye_color&#34;: &#34;NA&#34;, &#34;homeworld&#34;: &#34;NA&#34;, &#34;birth_year&#34;: &#34;NA&#34;, &#34;hair_color&#34;: &#34;NA&#34;, &#34;skin_color&#34;: &#34;NA&#34; }, { &#34;id&#34;: 87, &#34;mass&#34;: &#34;45&#34;, &#34;name&#34;: &#34;Padmé Amidala&#34;, &#34;gender&#34;: &#34;female&#34;, &#34;height&#34;: &#34;165&#34;, &#34;species&#34;: &#34;Human&#34;, &#34;eye_color&#34;: &#34;brown&#34;, &#34;homeworld&#34;: &#34;Naboo&#34;, &#34;birth_year&#34;: &#34;46BBY&#34;, &#34;hair_color&#34;: &#34;brown&#34;, &#34;skin_color&#34;: &#34;light&#34; }, { &#34;id&#34;: 88, &#34;mass&#34;: null, &#34;name&#34;: &#34;&#34;, &#34;gender&#34;: null, &#34;height&#34;: null, &#34;species&#34;: null, &#34;eye_color&#34;: null, &#34;homeworld&#34;: null, &#34;birth_year&#34;: null, &#34;hair_color&#34;: null, &#34;skin_color&#34;: null } ] . import java.io.InputStream; import java.net.HttpURLConnection; import java.net.URL; import com.fasterxml.jackson.databind.ObjectMapper; URL url = new URL(&quot;https://api.api-ninjas.com/v1/cars?model=camry&quot;); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestProperty(&quot;accept&quot;, &quot;application/json&quot;); InputStream responseStream = connection.getInputStream(); ObjectMapper mapper = new ObjectMapper(); JsonNode root = mapper.readTree(responseStream); System.out.println(root.path(&quot;fact&quot;).asText()); . | import com.fasterxml.jackson.databind.ObjectMapper; package com.fasterxml.jackson.databind does not exist .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/10/02/api.html",
            "relUrl": "/java/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "fibonacci using loops",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: fibonaccinacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class fibonacci { String name; // name or title of method , no name is set int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current fibonaccinacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result int first = 1; int second = 1; /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public fibonacci() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonaccinacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public fibonacci(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonaccinacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; */ protected abstract void init(); /* Number is added to fibonaccinacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { // the number in setdata is added here list.add(num); // the number is added to the list hash.put(this.hashID++, list.clone()); // the hash id is incremented and added as a key and list is added as a value in the hashmap } /* Custom Getter to return last element in fibonaccinacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonaccinacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonaccinacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonaccinacci List = &quot; + this.list); System.out.println(&quot;fibonaccinacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonaccinacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . public class fibonacciFor extends fibonacci{ @Override public void init() { this.name = &quot;For Loop&quot;; // setting name this.setData(0); // first item in the list this.setData(first); this.setData(second); int loopSize = this.size - 3; for(int i = 0;i&lt;loopSize;i++) { int next = second; second = second + first; first = next; this.setData(second); } } static public void main(String[] args) { fibonacciFor fib = new fibonacciFor(); fib.print(); } } fibonacciFor.main(null); . Init method = For Loop fibonaccinacci Number 20 = 4181 fibonaccinacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonaccinacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonaccinacci Sequence 1 = [0] fibonaccinacci Sequence 2 = [0, 1] fibonaccinacci Sequence 3 = [0, 1, 1] fibonaccinacci Sequence 4 = [0, 1, 1, 2] fibonaccinacci Sequence 5 = [0, 1, 1, 2, 3] fibonaccinacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonaccinacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonaccinacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonaccinacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonaccinacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonaccinacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonaccinacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonaccinacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonaccinacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonaccinacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonaccinacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonaccinacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonaccinacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonaccinacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonaccinacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . public class whileloop extends fibonacci{ @Override public void init() { this.name = &quot;While Loop&quot;; this.setData(0); this.setData(first); this.setData(second); int loopSize = this.size - 3; int i = 0; while(i &lt; loopSize) { int temp = second; second = second + first; first = temp; this.setData(second); i++; } } static public void main(String[] args) { whileloop fib = new whileloop(); fib.print(); } } whileloop.main(null); . Init method = While Loop fibonaccinacci Number 20 = 4181 fibonaccinacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonaccinacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonaccinacci Sequence 1 = [0] fibonaccinacci Sequence 2 = [0, 1] fibonaccinacci Sequence 3 = [0, 1, 1] fibonaccinacci Sequence 4 = [0, 1, 1, 2] fibonaccinacci Sequence 5 = [0, 1, 1, 2, 3] fibonaccinacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonaccinacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonaccinacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonaccinacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonaccinacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonaccinacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonaccinacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonaccinacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonaccinacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonaccinacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonaccinacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonaccinacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonaccinacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonaccinacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonaccinacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . public class fibonacciRecur extends fibonacci{ @Override public void init() { this.name = &quot;Recursion&quot;; for (int i=0; i&lt;this.size; i++){ this.setData(recursiveFib(i)); } } // Recursion method public int recursiveFib(int n) { if (n == 0) { return 0; } else if (n == 1) { return this.first; } else if (n == 2) { return this.second; } return recursiveFib(n-2) + recursiveFib(n-1); } static public void main(String[] args) { fibonacciRecur fib = new fibonacciRecur(); fib.print(); } } fibonacciRecur.main(null); . Init method = Recursion fibonaccinacci Number 20 = 4181 fibonaccinacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonaccinacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonaccinacci Sequence 1 = [0] fibonaccinacci Sequence 2 = [0, 1] fibonaccinacci Sequence 3 = [0, 1, 1] fibonaccinacci Sequence 4 = [0, 1, 1, 2] fibonaccinacci Sequence 5 = [0, 1, 1, 2, 3] fibonaccinacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonaccinacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonaccinacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonaccinacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonaccinacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonaccinacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonaccinacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonaccinacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonaccinacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonaccinacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonaccinacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonaccinacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonaccinacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonaccinacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonaccinacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Collegeboard Standards . 1.B . Implementing a while loop, for loop, and recursive function to accomplish fibonacci. . 4.C . All 3 algorithms returned the same result through the printed output being the same. . 5.A . For and while loops run in linear time since they run through the input size once and do a constant amount of operations for each loop. The recursive algorithm takes exponential time, however, since for each term of the sequence, the algorithm needs to recalculate all of the other terms as well due to the nature of recursion. .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/29/fibousingextends.html",
            "relUrl": "/java/2022/09/29/fibousingextends.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Javascript Demo",
            "content": "console.log(&quot;hello world&quot;); . hello world . var msg = &quot;this is a message in a variable&quot;; console.log(msg); . this is a message in a variable . function logIt(output) { console.log(output); } logIt(msg); . this is a message in a variable . // using logIt logIt(msg) logIt(&quot;Hello Students!&quot;); logIt(2022) . this is a message in a variable Hello Students! 2022 . function logItType(output) { console.log(output, &quot;is a(n)&quot;, typeof output); } logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . hello is a(n) string 2020 &#39;is a(n)&#39; &#39;number&#39; [ 1, 2, 3 ] &#39;is a(n)&#39; &#39;object&#39; . var testhtml = &quot;Hello World&quot;; $$.html(testhtml); // prints as html . Hello World",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/25/jsdemo.html",
            "relUrl": "/java/2022/09/25/jsdemo.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "previous fibonacci Using Loops",
            "content": "public class Fibonacci { int firstFib = 1; int secondFib = 1; public void forFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using For Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using For Loop: 0 &quot; + firstFib); //} //else if (numOfFib == 2) { // System.out.println(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); for (int counter = 0; counter &lt; numOfFib-3; counter++ ) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); } } } public void whileFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using While Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using While Loop: 0 &quot; + firstFib); //} else if (numOfFib == 2) { // System.out.println(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); int counter = 0; while (counter &lt; numOfFib-3) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); counter++; } } } public int recursiveFib(int n) { if (n == 0) { return 0; } else if (n == 1) { return firstFib; } else if (n == 2) { return secondFib; } return recursiveFib(n-2) + recursiveFib(n-1); } public void printRecFib(int numOfFib){ System.out.print(&quot;Using Recursion: &quot;); for(int i = 0; i &lt; numOfFib; i++){ System.out.print(recursiveFib(i) +&quot; &quot;); } } public static void main(String[] args) { Scanner scanFib = new Scanner(System.in); int numOfFib = scanFib.nextInt(); Fibonacci fibseries = new Fibonacci(); fibseries.forFib(numOfFib); // For Loop System.out.println(); fibseries.whileFib(numOfFib); // While Loop System.out.println(); fibseries.printRecFib(numOfFib); // Recursive Loop } } Fibonacci.main(null); . Using For Loop: 0 1 1 2 3 5 8 13 21 34 Using While Loop: 0 1 1 2 3 5 8 13 21 34 Using Recursion: 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/25/fibonaccy.html",
            "relUrl": "/java/2022/09/25/fibonaccy.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Fibonacci Using Loops",
            "content": "public class Fibonacci { int firstFib = 1; int secondFib = 1; public void forFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using For Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using For Loop: 0 &quot; + firstFib); //} //else if (numOfFib == 2) { // System.out.println(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using For Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); for (int counter = 0; counter &lt; numOfFib-3; counter++ ) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); } } } public void whileFib(int numOfFib) { if (numOfFib == 1) { System.out.println(&quot;Using While Loop: 0&quot;); } else if (numOfFib == 2) { System.out.println(&quot;Using While Loop: 0 &quot; + firstFib); //} else if (numOfFib == 2) { // System.out.println(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); } else if (numOfFib &gt; 2) { int prevFib = firstFib; int currentFib = secondFib; int nextFib; System.out.print(&quot;Using While Loop: 0 &quot; + firstFib + &quot; &quot; + secondFib); int counter = 0; while (counter &lt; numOfFib-3) { nextFib = prevFib + currentFib; // prevFib, currentFib, nextFib prevFib = currentFib; currentFib = nextFib; System.out.print(&quot; &quot; + nextFib); counter++; } } } public int recursiveFib(int n) { if (n == 0) { return 0; } else if (n == 1) { return firstFib; } else if (n == 2) { return secondFib; } return recursiveFib(n-2) + recursiveFib(n-1); } public void printRecFib(int numOfFib){ System.out.print(&quot;Using Recursion: &quot;); for(int i = 0; i &lt; numOfFib; i++){ System.out.print(recursiveFib(i) +&quot; &quot;); } } public static void main(String[] args) { Scanner scanFib = new Scanner(System.in); int numOfFib = scanFib.nextInt(); Fibonacci fibseries = new Fibonacci(); fibseries.forFib(numOfFib); // For Loop System.out.println(); fibseries.whileFib(numOfFib); // While Loop System.out.println(); fibseries.printRecFib(numOfFib); // Recursive Loop } } Fibonacci.main(null); . Using For Loop: 0 1 1 2 3 5 8 13 21 34 Using While Loop: 0 1 1 2 3 5 8 13 21 34 Using Recursion: 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/25/fibo.html",
            "relUrl": "/java/2022/09/25/fibo.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "2019 FRQ",
            "content": ". . public static int numberOfLeapYears(int year1, int year2) { int yearcounter = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)) { yearcounter++; } } return yearcounter; } . . . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int someDay = dayOfYear(month, day, year); int result = (firstDay + someDay - 1) % 7; return result } . public class APCalendar{ /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int yearcounter = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)) { yearcounter++; } } return yearcounter; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int someDay = dayOfYear(month, day, year); int result = (firstDay + someDay - 1) % 7; return result } // There may be instance variables, constructors, and other methods not shown. } .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/19/frq1-2019.html",
            "relUrl": "/java/2022/09/19/frq1-2019.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Iteration 2D Array with Kirby!",
            "content": "class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀&quot;, &quot; ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀&quot;, &quot; ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀&quot;, &quot; ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀&quot;, &quot; ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄&quot;, &quot; ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷&quot;, &quot; ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇&quot;, &quot; ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀&quot;, &quot; ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀&quot;, &quot; ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻&quot;, &quot; ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞&quot;, &quot; ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀&quot; }, //Monkey 1 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀&quot;, &quot; ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀&quot;, &quot; ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀&quot;, &quot; ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀&quot;, &quot; ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀&quot;, &quot; ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀&quot;, &quot; ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀&quot;, &quot; ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀&quot;, &quot; ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, //Monkey 2 { &quot; ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀&quot;, &quot; ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀&quot;, &quot; ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇&quot;, &quot; ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽&quot;, &quot; ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇&quot;, &quot; ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀&quot;, &quot; ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀&quot;, &quot; ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀&quot;, &quot; ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀&quot;, &quot; ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀&quot;, &quot; ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀&quot;, &quot; ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇&quot;, &quot; ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃&quot;, &quot; ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀&quot;, &quot; ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀&quot; }, //Monkey 3 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⡿⠿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⢿⣿⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣷⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠿⠋⠀⢀⣀⣀⣀⣠⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠻⣿⣧⡀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢉⣠⣴⣾⣿⣿⣿⣿⣿⣿⣯⠉⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠹⣿⡇&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⡇⠀⠀⣿⡇&quot;, &quot; ⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣿⣿⠃⠀⢰⣿⠇&quot;, &quot; ⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⠇⢻⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⢿⣿⣿⣏⠀⠀⣾⣿⠀&quot;, &quot; ⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠛⠋⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠈⣿⣿⣿⣿⣿⣿⡿⠀⠘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠈⣿⡟⣿⣆⣾⡿⠃⠀&quot;, &quot; ⠀⠈⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠘⢿⣿⣿⣿⡿⠁⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⢠⣾⠟⠀⠸⣿⣿⠁⠀⠀&quot;, &quot; ⠀⠀⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠈⢻⣿⡿⢁⣀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣧⣴⡿⠃⠀⠀⠀⣿⣿⠀⠀⠀&quot;, &quot; ⠀⢰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⣠⣾⠏⠀⠈⠛⠛⠛⠛⠋⠀⠈⠙⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⣹⣿⠀⠀⠀&quot;, &quot; ⢰⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀&quot;, &quot; ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⢿⣿⣫⣥⣤⣴⣴⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀&quot;, &quot; ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠛⠋⠁⢀⣼⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀&quot;, &quot; ⠘⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠇⠀⠀⠀&quot;, &quot; ⠀⠘⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡤⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠈⠙⠿⢿⣷⣶⡶⠶⠶⠶⠶⠟⠛⠉⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⠃⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠁⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣦⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡟⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⣦⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⣠⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣴⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣠⣴⣶⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⣹⣿⣿⣿⡿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⣤⣴⣾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠿⠿⠿⠿⠿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, //Monkey 4 { &quot; ⠀⠀⠀⢀⡴⠛⠉⠙⠲⣤⣤⠴⠖⠚⠋⠉⠉⠛⠒⠦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⣾⠁⠀⠀⣠⠞⠉⢀⡷⡀⠀⠀⠀⠀⠀⡀⠀⠀⠙⢷⣤⡤⠤⠤⣤⡀⠀&quot;, &quot; ⠀⠀⠀⣧⠀⢠⠞⠁⠀⠀⡎⣇⢿⠀⠀⣶⢊⡏⠁⠀⠀⠰⠟⠁⠀⠀⠀⠀⠹⡄&quot;, &quot; ⠀⠀⠀⢸⣤⠏⡠⢤⡀⠀⡃⢀⠇⠀⢸⠈⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇&quot;, &quot; ⠀⠀⠀⢠⡏⠀⠘⠤⠽⠀⢣⣊⣀⠀⠸⣀⠜⣀⠠⣀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠇&quot;, &quot; ⠀⠀⠀⢸⠀⠀⠀⠀⠀⡔⠉⠀⠀⠉⠢⡀⠀⠧⠠⠜⠀⠀⠀⠀⠀⠀⠀⣠⠟⠀&quot;, &quot; ⠀⠀⠀⢸⡀⠀⠀⠀⠸⠀⠀⢀⠔⠊⠉⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠁⠀⠀&quot;, &quot; ⠀⠀⠀⠘⣇⠀⠀⠀⢀⠀⡰⠃⠀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⢰⠇⠀⠀⠀&quot;, &quot; ⠀⠀⣠⠞⢻⡀⠀⠀⠸⣰⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢠⣏⠀⠀⠀⠀&quot;, &quot; ⠀⣼⠃⠀⠀⢳⡄⠀⠀⢳⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⣠⠏⠈⠳⣄⠀⠀&quot;, &quot; ⢰⡇⠀⠀⠀⠀⠙⢦⣀⠀⠱⢄⡀⠀⠀⣠⠋⠀⠀⠀⢀⣠⠞⠁⠀⠀⠀⠘⡆⠀&quot;, &quot; ⠈⣧⡀⠀⠀⠀⠀⠀⢉⣳⢦⣤⣈⣉⣉⣀⣠⣤⣶⠚⠋⠀⠀⠀⠀⠀⠀⠀⢻⠀&quot;, &quot; ⠀⠈⠙⠓⠲⠖⠚⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⣄⡀⠀⠀⠀⠀⣀⡾⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠋⠉⠀⠀&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Kirby in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; Kirby(s) jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more Kirby jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Kirby in Java Loopy 5 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀ ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀ ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇ ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽ ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇ ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀ ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀ ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀ ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀ ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀ ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀ ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇ ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃ ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀ ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀ ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⡿⠿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⢿⣿⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣷⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠿⠋⠀⢀⣀⣀⣀⣠⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠻⣿⣧⡀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢉⣠⣴⣾⣿⣿⣿⣿⣿⣿⣯⠉⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠹⣿⡇ ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⡇⠀⠀⣿⡇ ⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣿⣿⠃⠀⢰⣿⠇ ⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⠇⢻⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⢿⣿⣿⣏⠀⠀⣾⣿⠀ ⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠛⠋⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠈⣿⣿⣿⣿⣿⣿⡿⠀⠘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠈⣿⡟⣿⣆⣾⡿⠃⠀ ⠀⠈⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠘⢿⣿⣿⣿⡿⠁⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⢠⣾⠟⠀⠸⣿⣿⠁⠀⠀ ⠀⠀⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠈⢻⣿⡿⢁⣀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣧⣴⡿⠃⠀⠀⠀⣿⣿⠀⠀⠀ ⠀⢰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⣠⣾⠏⠀⠈⠛⠛⠛⠛⠋⠀⠈⠙⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⣹⣿⠀⠀⠀ ⢰⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀ ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⢿⣿⣫⣥⣤⣴⣴⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠛⠋⠁⢀⣼⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀ ⠘⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠘⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡤⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀ ⠀⠀⠀⠈⠙⠿⢿⣷⣶⡶⠶⠶⠶⠶⠟⠛⠉⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣦⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡟⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⣦⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⣠⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣴⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣠⣴⣶⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⣹⣿⣿⣿⡿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⣤⣴⣾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠿⠿⠿⠿⠿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⢀⡴⠛⠉⠙⠲⣤⣤⠴⠖⠚⠋⠉⠉⠛⠒⠦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣾⠁⠀⠀⣠⠞⠉⢀⡷⡀⠀⠀⠀⠀⠀⡀⠀⠀⠙⢷⣤⡤⠤⠤⣤⡀⠀ ⠀⠀⠀⣧⠀⢠⠞⠁⠀⠀⡎⣇⢿⠀⠀⣶⢊⡏⠁⠀⠀⠰⠟⠁⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢸⣤⠏⡠⢤⡀⠀⡃⢀⠇⠀⢸⠈⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇ ⠀⠀⠀⢠⡏⠀⠘⠤⠽⠀⢣⣊⣀⠀⠸⣀⠜⣀⠠⣀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠇ ⠀⠀⠀⢸⠀⠀⠀⠀⠀⡔⠉⠀⠀⠉⠢⡀⠀⠧⠠⠜⠀⠀⠀⠀⠀⠀⠀⣠⠟⠀ ⠀⠀⠀⢸⡀⠀⠀⠀⠸⠀⠀⢀⠔⠊⠉⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠁⠀⠀ ⠀⠀⠀⠘⣇⠀⠀⠀⢀⠀⡰⠃⠀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⢰⠇⠀⠀⠀ ⠀⠀⣠⠞⢻⡀⠀⠀⠸⣰⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢠⣏⠀⠀⠀⠀ ⠀⣼⠃⠀⠀⢳⡄⠀⠀⢳⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⣠⠏⠈⠳⣄⠀⠀ ⢰⡇⠀⠀⠀⠀⠙⢦⣀⠀⠱⢄⡀⠀⠀⣠⠋⠀⠀⠀⢀⣠⠞⠁⠀⠀⠀⠘⡆⠀ ⠈⣧⡀⠀⠀⠀⠀⠀⢉⣳⢦⣤⣈⣉⣉⣀⣠⣤⣶⠚⠋⠀⠀⠀⠀⠀⠀⠀⢻⠀ ⠀⠈⠙⠓⠲⠖⠚⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢦⣄⡀⠀⠀⠀⠀⣀⡾⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠋⠉⠀⠀ 4 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀ ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀ ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇ ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽ ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇ ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀ ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀ ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀ ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀ ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀ ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀ ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇ ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃ ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀ ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀ ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⡿⠿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⢿⣿⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣷⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠿⠋⠀⢀⣀⣀⣀⣠⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠻⣿⣧⡀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢉⣠⣴⣾⣿⣿⣿⣿⣿⣿⣯⠉⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠹⣿⡇ ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⡇⠀⠀⣿⡇ ⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣿⣿⠃⠀⢰⣿⠇ ⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⠇⢻⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠘⢿⣿⣿⣏⠀⠀⣾⣿⠀ ⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠛⠋⠉⠉⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠈⣿⣿⣿⣿⣿⣿⡿⠀⠘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠈⣿⡟⣿⣆⣾⡿⠃⠀ ⠀⠈⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠘⢿⣿⣿⣿⡿⠁⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⢠⣾⠟⠀⠸⣿⣿⠁⠀⠀ ⠀⠀⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠈⢻⣿⡿⢁⣀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣧⣴⡿⠃⠀⠀⠀⣿⣿⠀⠀⠀ ⠀⢰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⣠⣾⠏⠀⠈⠛⠛⠛⠛⠋⠀⠈⠙⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀⣹⣿⠀⠀⠀ ⢰⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀ ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⢿⣿⣫⣥⣤⣴⣴⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠛⠋⠁⢀⣼⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀ ⠘⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠘⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡤⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀ ⠀⠀⠀⠈⠙⠿⢿⣷⣶⡶⠶⠶⠶⠶⠟⠛⠉⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣦⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡟⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⣦⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⣠⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣴⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣠⣴⣶⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⣹⣿⣿⣿⡿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⣤⣴⣾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠿⠿⠿⠿⠿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ 3 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠛⠉⠉⠛⠶⣄⡤⠞⠻⠫⠙⠳⢤⡀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢠⠟⠁⠀⠀⠀⠀⠀⠀⠈⠀⢰⡆⠀⠀⠐⡄⠻⡄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠤⣤⣇⢀⢷⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⢈⡼⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠘⣆⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⠃⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠙⣎⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣝⠳⣄⡀⠀⠀⠀⠀⠀⢀⡴⠟⠁⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢮⣉⣒⣖⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣀⣴⠶⠶⢦⣀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀ ⠀⢀⡾⠋⠀⠀⠀⠀⠉⠧⠶⠒⠛⠛⠛⠛⠓⠲⢤⣴⡟⠅⠀⠀⠈⠙⣦⠀ ⠀⣾⠁⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⣀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠸⣇ ⠀⣿⡀⠀⠀⠀⠀⠀⢀⡟⢁⣿⠀⢠⠎⢙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽ ⠀⠈⢻⡇⠀⠀⠀⠀⣾⣧⣾⡃⠀⣾⣦⣾⠇⠀⠀⠀⠀⠀⠀⠀⠰⠀⣼⠇ ⠀⢰⡟⠀⡤⠴⠦⣬⣿⣿⡏⠀⢰⣿⣿⡿⢀⡄⠤⣀⡀⠀⠀⠀⠰⢿⡁⠀ ⠀⡞⠀⢸⣇⣄⣤⡏⠙⠛⢁⣴⡈⠻⠿⠃⢚⡀⠀⣨⣿⠀⠀⠀⠀⢸⡇⠀ ⢰⡇⠀⠀⠈⠉⠁⠀⠀⠀⠀⠙⠁⠀⠀⠀⠈⠓⠲⠟⠋⠀⠀⠀⠀⢀⡇⠀ ⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀ ⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡄⠀ ⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠋⣷⠀ ⠀⠀⢰⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⣿⡇ ⠀⠀⢸⡯⠈⠛⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠂⠀⠀⣿⠃ ⠀⠀⠈⣷⣄⡛⢠⣈⠉⠛⠶⢶⣶⠶⠶⢶⡶⠾⠛⠉⠀⠀⠀⠁⢠⣠⡏⠀ ⠀⠀⠀⠈⠳⣅⡺⠟⠀⣀⡶⠟⠁⠀⠀⠘⢷⡄⠀⠛⠻⠦⡄⢀⣒⡿⠀⠀ ⠀⠀⠀⠀⠀⠈⠉⠉⠛⠁⠀⠀⠀⠀⠒⠂⠀⠙⠶⢬⣀⣀⣤⡶⠟⠁⠀⠀ 2 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠦⡄⠀⠀⠀⠀⠀⠀⡴⠀⠀⠀ ⠀⢀⣀⠀⠀⠀⣀⠤⠖⠒⠋⡉⠙⢲⣺⢅⡀⠀⠹⡀⠀⠀⠀⢀⡜⠁⠀⠀⠀ ⣼⠉⠀⠉⠓⠏⠁⠀⠀⠀⠀⢯⣧⠈⢿⡆⠈⠓⢴⠇⠀⠀⣠⠊⠀⠀⠀⡀⠀ ⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡀⠄⠠⢀⠈⢣⡀⠀⠁⠀⢀⡤⠊⠀⠀ ⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⠎⠀⠀⠀⠘⡇⠀⢧⠀⠐⠊⠁⠀⠀⠀⠀ ⠀⢸⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⢺⠀⠀⠀⠀⠀⡇⠀⢸⠀⠀⠀⠀⢀⣀⣀⡀ ⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣆⠠⠄⢀⡀⢇⠀⢸⡀⠀⡀⠀⠀⠀⠀⠀ ⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠈⠙⠆⡼⠛⢦⡀⠑⠢⣄⠀⠀ ⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⠢⣀⠀⢀⡴⡰⠁⠀⢀⡇⠀⠀⠈⠑⠀ ⠀⠀⠀⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠗⠒⠚⠉⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡜⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⣨⠟⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠙⠂⠴⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ 1 Kirby&#39;s jumping on the bed... ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣠⡶⠒⠒⠶⣄⣠⡴⠚⠉⠁⠀⠀⠀⠀⠀⠉⠙⠳⢦⡀⠀⠀⠀⠀⠀⠀ ⢠⡏⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢧⡀⠀⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⢱⠀⠀⢠⠉⢡⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀ ⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⣾⠄⠀⢸⣦⣾⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀ ⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠸⣿⡿⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠈⠁⡴⠶⡆⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄ ⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠇ ⠀⠀⠀⣀⡿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣿⡛⠁⠀ ⠀⣠⢾⣭⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢠⣝⣷⡀ ⢠⡏⠘⠋⠀⠀⠀⠈⠑⠦⣄⣀⠀⠀⠀⠀⠀⣀⡠⠔⠋⠀⠀⠀⠈⠛⠃⢻ ⠈⠷⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⡽⠟⠛⠿⣭⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⠞ ⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠀⠀⠀ No more Kirby jumping on the bed 0000000000000000000000000000000000 THE END . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 1 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 2 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 3 { &quot;(つ -‘ _ ‘- )つ&quot; }, //Monkey 4 { &quot;(つ -‘ _ ‘- )つ&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Kirby in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; Kirby(s) jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeys[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyCount; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Kirby in Java Loopy 5 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 4 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 3 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 2 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ (つ -‘ _ ‘- )つ 1 Kirby(s) jumping on the bed... (つ -‘ _ ‘- )つ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/16/2darray.html",
            "relUrl": "/java/2022/09/16/2darray.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Boolean Expressions and If Statements",
            "content": "The following code blocks demonstrate if, if-else, and if-elseif-else. The print statments explain why each expression is shown or why it is not printed. It is known that when overall boolean is true, the statment is printed. Similarly, if the boolean is false, the statment is not printed. . // Boolean Expressions // if boolean value = true; if(value == true){ System.out.println(&quot;the statment is printed if the value is set to true&quot;); } if(value){ System.out.println(&quot;the statment is printed since the value is already set to true&quot;); } . the statment is printed if the value is set to true the statment is printed since the value is already set to true . // Boolean Expressions continued // if-else boolean value = false; if(value == true){ System.out.println(&quot;the statment is printed if the value is set to true&quot;); } else { System.out.println(&quot;else this statment is printed since the value is not true&quot;); } if(value != false) { System.out.println(&quot;if the value is not equal to false, then this statment will print&quot;); } else { System.out.println(&quot;else this statment is printed since the value is equal to false&quot;); } . else this statment is printed since the value is not true else this statment is printed since the value is equal to false . // if-else if-else boolean value1 = true; boolean value2 = true; if(value1 &amp;&amp; !value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else if(!value1 &amp;&amp; value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else if(!value1 &amp;&amp; !value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else if(!value1 || !value2){ System.out.println(&quot;false!&quot;); // statment is not printed because the overall expression is false } else{ System.out.println(&quot;all the expressions are false! this is our last resort&quot;); // statment is not printed because the overall expression is false } . all the expressions are false! this is our last resort . if (true) { System.out.println(&quot;the statment is printed becuase the condition set to true&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;the statment is printed becuase the condition is true and not false which makes it true&quot;); } if (true || false) { System.out.println(&quot;the statment is printed becuase the condition is true or false, which results in true&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;the statment is printed becuase the condition is: (true and not false) and (true or false) which results in true&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;the statment is printed becuase the condition is: (not (false or false) or (false and true)) which results in true&quot;); } // De Morgan&#39;s laws boolean a = true; boolean b = false; if (!((b || a) &amp;&amp; (!b &amp;&amp; !a))) // NOT(A || B) is Equivalent to (NOT(A) AND NOT(B)) { System.out.println(&quot;demorgan first law&quot;); } if (!((a &amp;&amp; b) &amp;&amp; (!a || !b))) // NOT(A &amp;&amp; B) is Equivalent to (NOT(A) OR NOT(B)) { System.out.println(&quot;demorgan second law&quot;); } . the statment is printed becuase the condition set to true the statment is printed becuase the condition is true and not false which makes it true the statment is printed becuase the condition is true or false, which results in true the statment is printed becuase the condition is: (true and not false) and (true or false) which results in true the statment is printed becuase the condition is: (not (false or false) or (false and true)) which results in true demorgan first law demorgan second law . . . if else . if else statement is a conditional statement . the if line is executed if the specified statment is determined to be true. . if the condition is false, the if statment is not executed and the next statment is moved on to. else if statment is executed when the first if statment is not executed. else if is a another condition . else is the final and false statment . switch gives the option to select a block of code . import java.util.Scanner; . public class ifelse { int number; int remainder() { int rem = (number%2); System.out.println(&quot;Remainder: &quot; + rem); if( rem == 0) { System.out.println(&quot;Even&quot;); // if rem is equal to 0, then &quot;even&quot; will be printed } else { System.out.println(&quot;Odd&quot;); // if rem is not equal to 0, then &quot;odd&quot; will be printed } return rem; } public ifelse(int n) { System.out.println(&quot;Number entered: &quot; + n); number = n; } } . explanation . the input is an integer. the given integer is divided by 2 to determine if the remainder is 0 or 1. the remainder is tested to see if it is equal to 0. if the remainder is equal to 0, then the number is determined to be even. else the number is odd, because the remainder is not 0 and there is only one other possibility therefore another else if is not required. . public class gradeifelse { private double grade; public double finalgrade() { if ( grade &gt;= 90) { System.out.println(&quot;A&quot;); // if the grade is greater than equal to 90, then A will be printed } else if( grade &gt;= 80 &amp;&amp; grade &lt; 90) { System.out.println(&quot;B&quot;); // if the previous statment is not true and the grade is // greater than equal to 80 or less than 90, then B will be printed } else if( grade &gt;= 70 &amp;&amp; grade &lt; 80) { System.out.println(&quot;C&quot;); // if the previous statment is not true and the grade is // greater than equal to 70 or less than 80, then C will be printed } else if( grade &gt;= 60 &amp;&amp; grade &lt; 70) { System.out.println(&quot;D&quot;); // if the previous statment is not true and //the grade is greater than equal to 60 or less than 70, then D will be printed } else if( grade &gt;= 0 &amp;&amp; grade &lt; 60) { System.out.println(&quot;F&quot;); // if the previous statment is not true and the grade is less than 60, then F will be printed } else { System.out.println(&quot;Not within range&quot;); // if the previous statments are not true and an // integer is not inputted properly, then the else statment will be printed } return grade; } public gradeifelse(double n) { System.out.println(&quot;Grade entered: &quot; + n); grade = n; } } . import java.util.Scanner; public class gradeswitch { private int value = 0; private double grade; public gradeswitch(double n) { System.out.println(&quot;Grade entered: &quot; + n); grade = n; } public void switchgrade() { if (grade &gt;= 90) { value = 1; } else if( grade &gt;= 80 &amp;&amp; grade &lt; 90) { value = 2; } else if( grade &gt;= 70 &amp;&amp; grade &lt; 80) { value = 3; } else if( grade &gt;= 60 &amp;&amp; grade &lt; 70) { value = 4; } else if( grade &gt;= 0 &amp;&amp; grade &lt; 60) value = 5; switch(value) { //switch case with values case 1: System.out.println(&quot;A&quot;); break; case 2: System.out.println(&quot;B&quot;); break; case 3: System.out.println(&quot;C&quot;); break; case 4: System.out.println(&quot;D&quot;); break; case 5: System.out.println(&quot;F&quot;); break; default: System.out.println(&quot;not number assigned correctly&quot;); } } } . public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes Scanner sc; // available to all inside the menu class // Constructor on this Object takes control of menu events and actions public Menu() { sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.println(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Even or Odd&quot;); System.out.println(&quot;2 - Grade - with if else&quot;); System.out.println(&quot;3 - Grade - with switch case&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; double g; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot;Enter number: &quot;); int n = sc.nextInt(); ifelse mynumber = new ifelse(n); mynumber.remainder(); break; case 2: System.out.println(&quot;Enter grade: &quot;); g = sc.nextDouble(); gradeifelse mygrade = new gradeifelse(g); mygrade.finalgrade(); break; case 3: System.out.println(&quot;Enter grade: &quot;); g = sc.nextDouble(); gradeswitch grade = new gradeswitch(g); grade.switchgrade(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Even or Odd 2 - Grade - with if else 3 - Grade - with switch case 0 - Quit - 1: Enter number: Number entered: 5 Remainder: 1 Odd 1: Enter number: Number entered: 6 Remainder: 0 Even 2: Enter grade: Grade entered: 69.0 D 2: Enter grade: Grade entered: 80.0 B 3: Enter grade: Grade entered: 69.0 D 3: Enter grade: Grade entered: 80.0 B 0: Goodbye, World! .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/11/javaifelse.html",
            "relUrl": "/java/2022/09/11/javaifelse.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "focus and habits",
            "content": "connection Psychology and the Good Life . The idea of reducing stress and taking action to be mentally healthy is a common discussion I have heard throughout high school. In fact, I remember my AP Calculus BC teacher discussing the Psychology and the Good Life almost every morning in our class. . my ways to reduce stress . I enjoy listening to music. After I complete my work or tasks I try to listen to music as short break before I get right back to work. I try to not worry about the amount of work or time I have, but it is still very stressful. I have found that a good way to keep myself accountable and manage my time better is to keep a list of the things I need to get done . my goals for this year . As a senior year in high school, I want to be prepared for college. I want to make sure that I am building good study habits to make my college life easier. . CS group collaboration . We are fun a group! My CS group has good synergy and we do our best to help each other out. .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/09/11/focusandhabits.html",
            "relUrl": "/entry/2022/09/11/focusandhabits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "documentation and analysis of oop",
            "content": "Completion of OOP in code.org . A class is defined when variables, objects or methods are added to the code. . public class MyNeighborhood { // where the objects and methods go } . instance of an object of the . Painter myPainter = new Painter(); . class calls the main method to execute . Menu.main(null); . mutating data: the following method parses an input as a double . double w = sc.nextDouble(); .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/05/javaoop.html",
            "relUrl": "/java/2022/09/05/javaoop.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "innovation using object",
            "content": "import java.lang.Math; . class box { double width; double height; double depth; // volume of box double volume() { double vol = width *height * depth; System.out.println(&quot;Volume &quot;+ vol); return vol; } public box(double w, double h, double d) { System.out.println(&quot;w h d: &quot; + w + &quot; &quot; + h + &quot; &quot; + d); width = w; height = h; depth = d; } public box(double w) { System.out.println(&quot;side : &quot; + w ); width = w; height = w; depth = w; } } . public class sphere { double radius; double volume() { double vol = ((4 * Math.PI * Math.pow(radius, 3))/3) ; System.out.println(&quot;Volume of sphere: &quot; + vol); return vol; } public sphere(double r) { System.out.println(&quot;r :&quot; + r); radius = r; } } . public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes Scanner sc; // available to all inside the menu class // Constructor on this Object takes control of menu events and actions public Menu() { sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.println(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Find volume of box&quot;); System.out.println(&quot;2 - Find volume of cube&quot;); System.out.println(&quot;3 - Find volume of sphere&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot;Enter width: &quot;); double w = sc.nextDouble(); System.out.println(&quot;Enter height: &quot;); double h = sc.nextDouble(); System.out.println(&quot;Enter depth: &quot;); double d = sc.nextDouble(); box myrectangle = new box(w, h, d); myrectangle.volume(); break; case 2: System.out.println(&quot;Enter side length: &quot;); w = sc.nextDouble(); box mycube = new box(w); mycube.volume(); break; case 3: System.out.println(&quot;Enter radius length: &quot;); double r = sc.nextDouble(); sphere mysphere = new sphere(r); mysphere.volume(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Find volume of box 2 - Find volume of cube 3 - Find volume of sphere 0 - Quit - 1: Enter width: Enter height: Enter depth: w h d: 2.0 3.0 4.0 Volume 24.0 0: Goodbye, World! .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/09/05/javaobject.html",
            "relUrl": "/java/2022/09/05/javaobject.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "alumni panel",
            "content": "insight and takeaway . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In today&#39;s alum panel, I related to Nitya, Allison, and Mabel the most. The three alumni shared a common relationship with computer science at the beginning of their introduction to the field. They all found computer science challenging and did not like it. However, through taking the AP Computer Science Principles class, they realized the value of computer science and how, in the present day, it is required for almost any field. Alison, who will be entering UCLA this year with a major in cognitive science and a minor in statistics, said that looking at the course, she saw that she needed to know how to program in the language R. She continued to state that probably most people that will be taking the statistics course do not realize that they need to know how to program if they want to succeed in the class. . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mabel and Nitya both talked about how they liked structured classes and set instructions. I also am a person who wants an organized structure. I took Computer Science Principles last year, and the idea of being free to create any idea of ours was very new to me. Over time, as I gained experience with Ms. Naidu and Mr. Mortensen, I understood how to use the freedom we were given and became interested in computer science. Similar to my experience, Nitya, Allison, and Mabel shared how they began to enjoy computer science and understand its value. Now in college, they are pursuing their majors, to which computer science is vital. . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A takeaway from today was when I talked to Colin at the end of the panel, where he explained that in any engineering major you choose, being proficient in computer science will make your life easier, and you will be able to perform better in college classes. As a senior who is concerned with what major to choose for college, I will always need to keep computer science in my toolbox and be able to apply it. . Me, Jeffrey Lee, and Anthony Vo after the alumni panel .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/08/29/alumnipanel.html",
            "relUrl": "/entry/2022/08/29/alumnipanel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Alumni Panel Notes",
            "content": "Colin - UCSD, mechanical . Nitya - UCSD . AVO - UCI, CS . Alison - UCLA, cognitive science, minoring in Stats . Mabel - UCSD, Cognitive Science and Machine Learning . Andrew – UCSD? . How did you realize you wanted to do your major? . Colin: I can code well. I can 3d model much better. Peers told him to go to comp sci. . | Avo: Did computer science from a young age. Functions and algorithms. . | Andrew: likes java, deployment . | Mabel: Did not like the class. Logical thinking really helped. Robotics team - helped with mission planning. Aerospace engineering was not structured well. . | Alison: artsy businessperson, cog sci major, she wants to work on web design. . | Nitya: took cs seriously in middle school and high school . | . What is the biggest challenge you have had with computer science? . Colin: Github throwing messages at you. There are solutions on the internet . | Avo: clashing egos, focus on your own path, there is a lot of smart people out there, the next steve jobs is already beating you . | Allison: Just starting, the temptation to BS, don’t cut corners, having the mindset to go above and beyond . | Nitya: one of the biggest challenges is getting started in the area of computer science, very organized person and requires structure . | . Any PBL scenarios in college classes? . Colin: one hands on project in freshman year and one senior year . | Mabel: College the first few years is general education, freeload of off you, they don’t expect interns to know much . | . Have you applied CS in your major if you have not applied majoring in CS? . Colin: coding will be everywhere, oh hey i can code this part of the project, matlab!! - important for mechanical engineering . | Andrew: knowledge of CS can help any high level math courses . | Allison: math classes will require programming, R - stats needed . | Colin mentioned something about Computation Aided Manufacturing .",
            "url": "https://rohitd3.github.io/rohitfastpages/2022/08/29/alumni-panel-notes.html",
            "relUrl": "/2022/08/29/alumni-panel-notes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "verify environment in bash",
            "content": "jupyter kernelspec list . Available kernels: bash /home/rohitde/.local/share/jupyter/kernels/bash java /home/rohitde/.local/share/jupyter/kernels/java javascript /home/rohitde/.local/share/jupyter/kernels/javascript python3 /home/rohitde/.local/share/jupyter/kernels/python3 . python --version python2 --version java --version conda --version . Python 3.9.12 Python 2.7.18 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) conda 4.14.0 .",
            "url": "https://rohitd3.github.io/rohitfastpages/bash/2022/08/28/verify-env.html",
            "relUrl": "/bash/2022/08/28/verify-env.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "unit 1 java primitive",
            "content": "import java.util.Scanner; public class gpacalculator { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); int sum = 0; //intialize sum to 0, the gpa will be summed up in the for loop System.out.println(&quot;Number of classes:&quot;); int classes = userInput.nextInt(); System.out.println(&quot;I am taking &quot; + classes+ &quot; classes&quot;); System.out.println(&quot;My class letter grades:&quot;); // enter as uppercase or lowercase for (int i = 0; i &lt;= classes; i++) { int gpa = 0; // intializing variable gpa as 0 String grade = userInput.nextLine(); System.out.println(grade); if (grade.equals(&quot;A&quot;) || grade.equals(&quot;a&quot;)) { gpa = 4; } else if (grade.equals(&quot;B&quot;) || grade.equals(&quot;b&quot;)) { gpa = 3; } else if (grade.equals(&quot;C&quot;) || grade.equals(&quot;c&quot;)) { gpa = 2; } else if (grade.equals(&quot;D&quot;) || grade.equals(&quot;d&quot;)) { gpa = 1; } else if (grade.equals(&quot;F&quot;) || grade.equals(&quot;f&quot;)) { gpa = 0; } sum = sum + gpa; } float gpaWhole = (float) sum/(float) classes; System.out.println(&quot;Your Overall GPA: &quot; + gpaWhole); } } gpacalculator.main(null); . Number of classes: I am taking 5 classes My class letter grades: A a C d A Your Overall GPA: 3.0 .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/08/28/javagpacalc.html",
            "relUrl": "/java/2022/08/28/javagpacalc.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "rohit entry",
            "content": "cowsay -f dragon-and-cow &quot;Hi! I am Rohit, a senior at Del Norte High School. I can&#39;t wait to use more of fastpages and post more entries!!&quot; | lolcat --spread 9 . _______________________________________ / Hi! I am Rohit, a senior at Del Norte | High School. I can&#39;t wait to use more | of fastpages and post more entries!! / ^ /^ / // | ___/| / // . /O O __ / // | *-* / / /_/ // | | @___@` /_ // | / 0/0/| /_ // | 0/0/0/0/| /// | | | 0/0/0/0/0/_|_ / ( // | _ | / 0/0/0/0/0/0/`/,_ _ _/ ) ; -. | _ _ .-~ / / ,-} _ *-.|.-~-. .~ ~ __/ `/ / ~-. _ .-~ / ____(oo) *. } { / ( (--) .-~-. -` .~ //__ __ Ack! ///.-..&lt; _ -~ // ///-._ _ _ _ _ _ _{^ - - - - ~ .",
            "url": "https://rohitd3.github.io/rohitfastpages/entry/2022/08/22/rohit-post.html",
            "relUrl": "/entry/2022/08/22/rohit-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Hello World in Python!",
            "content": "print(&#39;hello world&#39;) . hello world . List and Loops from CSP Tri 3 . InfoDb = [] # List with dictionary records placed in a list InfoDb.append({ &quot;MovieName&quot;: &quot;Spider-Man: No Way Home&quot;, &quot;MovieYear&quot;: &quot;2021&quot;, &quot;Rating&quot;: &quot;5&quot;, &quot;Actors&quot;: [ &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;, &quot;Zendaya&quot;, &quot;Andrew Garfield&quot;, &quot;Marisa Tomei&quot; ] }) InfoDb.append({ &quot;MovieName&quot;: &quot;Star Wars: The Force Awakens&quot;, &quot;MovieYear&quot;: &quot;2015&quot;, &quot;Rating&quot;: &quot;4&quot;, &quot;Actors&quot;: [&quot;Daisy Ridley&quot;, &quot;John Boyega&quot;, &quot;Harrison Ford&quot;, &quot;Adam Driver&quot;] }) InfoDb.append({ &quot;MovieName&quot;: &quot;Toy Story&quot;, &quot;MovieYear&quot;: &quot;1995&quot;, &quot;Rating&quot;: &quot;5&quot;, &quot;Actors&quot;: [&quot;Tom Hanks&quot;, &quot;Laurie Metcalf&quot;, &quot;Ernie Sabella&quot;, &quot;Nathan Lane&quot;] }) def print_data(n): print(&quot;Movie Name:&quot;, InfoDb[n][&quot;MovieName&quot;], &quot;Year:&quot;, InfoDb[n][&quot;MovieYear&quot;], &quot;Rating: &quot;,InfoDb[n][&quot;Rating&quot;] ) # using comma puts space between values print(&quot; t&quot;, &quot;Actors in the movie: &quot;, end=&quot;&quot;) # t is a tab indent, end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(InfoDb[n][&quot;Actors&quot;])) # join allows printing a string list with separator print() def tester(): print(&quot;For loop with range:&quot;) for_loop_limit(1,2) print(&quot;For loop&quot;) for_loop() print(&quot;While loop&quot;) while_loop(0) # requires initial index to start while print(&quot;Recursive loop&quot;) recursive_loop(0) # requires initial index to start recursion # for loop iterates on length of InfoDb def for_loop(): for n in range(len(InfoDb)): print_data(n) def for_loop_limit(start, end): for n in range(start, end+1): print_data(n) # while loop contains an initial n and an index incrementing statement (n += 1) # dont need to write n = 0 because it being called in the tester def while_loop(n): while n &lt; len(InfoDb): print_data(n) n += 1 return # recursion simulates loop incrementing on each call (n + 1) until exit condition is met def recursive_loop(n): if n &lt; len(InfoDb): print_data(n) recursive_loop(n + 1) return # exit condition if __name__ == &quot;__main__&quot;: tester() . For loop with range: Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane For loop Movie Name: Spider-Man: No Way Home Year: 2021 Rating: 5 Actors in the movie: Tom Holland, Tobey Maguire, Zendaya, Andrew Garfield, Marisa Tomei Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane While loop Movie Name: Spider-Man: No Way Home Year: 2021 Rating: 5 Actors in the movie: Tom Holland, Tobey Maguire, Zendaya, Andrew Garfield, Marisa Tomei Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane Recursive loop Movie Name: Spider-Man: No Way Home Year: 2021 Rating: 5 Actors in the movie: Tom Holland, Tobey Maguire, Zendaya, Andrew Garfield, Marisa Tomei Movie Name: Star Wars: The Force Awakens Year: 2015 Rating: 4 Actors in the movie: Daisy Ridley, John Boyega, Harrison Ford, Adam Driver Movie Name: Toy Story Year: 1995 Rating: 5 Actors in the movie: Tom Hanks, Laurie Metcalf, Ernie Sabella, Nathan Lane .",
            "url": "https://rohitd3.github.io/rohitfastpages/python/2022/08/22/python-notebook.html",
            "relUrl": "/python/2022/08/22/python-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Hello World in Java",
            "content": "System.out.println(&quot;Hello World&quot;); System.out.println(&quot;Hello World World&quot;); . Hello World Hello World World .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2022/08/21/java-notebook.html",
            "relUrl": "/java/2022/08/21/java-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Example Notebook",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rohitd3.github.io/rohitfastpages/java/2020/02/20/test.html",
            "relUrl": "/java/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post52": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rohitd3.github.io/rohitfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi! I am Rohit and am of the class of 2023. I am so excited for senior year in AP Computer Science A!! . .",
          "url": "https://rohitd3.github.io/rohitfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Calculator",
          "content": "&lt;!DOCTYPE html&gt; . Calculator . Value 1: Value 2: Operator: Add Subtract Multiply Divide Calculate .",
          "url": "https://rohitd3.github.io/rohitfastpages/calc/",
          "relUrl": "/calc/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Mazda Cars",
          "content": ". Car Brand Image Source . . . . . . . .",
          "url": "https://rohitd3.github.io/rohitfastpages/carapi/",
          "relUrl": "/carapi/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Collegeboard Work",
          "content": "AP Test Prep . Week 1 . . Notes . Terms to know: . shell | terminal | . View previous command by pressing up arrow ^ . $ pwd . shows the directory | . $ cd . change directory | . lower case is primitive . Upper case is wrapper class . primitive you just get the data . Primitive . Java Primitive gpa Calculator .",
          "url": "https://rohitd3.github.io/rohitfastpages/cbtestprep/",
          "relUrl": "/cbtestprep/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  
      ,"page9": {
          "title": "Star Wars Characters",
          "content": ". Name Planet Species . . . . . . . .",
          "url": "https://rohitd3.github.io/rohitfastpages/starwars/",
          "relUrl": "/starwars/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohitd3.github.io/rohitfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}